// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package importingevmdata.importingevm_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: ImportingEVM Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.2.1.20190620_1446
 * @status 
 */
public class ImportingEVM implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(Email_from != null){
				
					this.setProperty("Email_from", Email_from.toString());
				
			}
			
			if(Email_host != null){
				
					this.setProperty("Email_host", Email_host.toString());
				
			}
			
			if(Email_password != null){
				
					this.setProperty("Email_password", Email_password.toString());
				
			}
			
			if(Email_port != null){
				
					this.setProperty("Email_port", Email_port.toString());
				
			}
			
			if(Email_to != null){
				
					this.setProperty("Email_to", Email_to.toString());
				
			}
			
			if(Email_username != null){
				
					this.setProperty("Email_username", Email_username.toString());
				
			}
			
			if(DB_Host != null){
				
					this.setProperty("DB_Host", DB_Host.toString());
				
			}
			
			if(DB_Name != null){
				
					this.setProperty("DB_Name", DB_Name.toString());
				
			}
			
			if(DB_Password != null){
				
					this.setProperty("DB_Password", DB_Password.toString());
				
			}
			
			if(DB_Port != null){
				
					this.setProperty("DB_Port", DB_Port.toString());
				
			}
			
			if(DB_Username != null){
				
					this.setProperty("DB_Username", DB_Username.toString());
				
			}
			
			if(Customer_File != null){
				
					this.setProperty("Customer_File", Customer_File.toString());
				
			}
			
			if(Moderator_File != null){
				
					this.setProperty("Moderator_File", Moderator_File.toString());
				
			}
			
		}

public String Email_from;
public String getEmail_from(){
	return this.Email_from;
}
public String Email_host;
public String getEmail_host(){
	return this.Email_host;
}
public String Email_password;
public String getEmail_password(){
	return this.Email_password;
}
public String Email_port;
public String getEmail_port(){
	return this.Email_port;
}
public String Email_to;
public String getEmail_to(){
	return this.Email_to;
}
public String Email_username;
public String getEmail_username(){
	return this.Email_username;
}
public String DB_Host;
public String getDB_Host(){
	return this.DB_Host;
}
public String DB_Name;
public String getDB_Name(){
	return this.DB_Name;
}
public String DB_Password;
public String getDB_Password(){
	return this.DB_Password;
}
public String DB_Port;
public String getDB_Port(){
	return this.DB_Port;
}
public String DB_Username;
public String getDB_Username(){
	return this.DB_Username;
}
public String Customer_File;
public String getCustomer_File(){
	return this.Customer_File;
}
public String Moderator_File;
public String getModerator_File(){
	return this.Moderator_File;
}
	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "ImportingEVM";
	private final String projectName = "IMPORTINGEVMDATA";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				ImportingEVM.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(ImportingEVM.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tFileInputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_17_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSendMail_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSendMail_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_20_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSendMail_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSendMail_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileInputDelimited_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileInputDelimited_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileInputDelimited_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileInputDelimited_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_16_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileInputDelimited_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_18_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileInputDelimited_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSendMail_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSendMail_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_19_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSendMail_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSendMail_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileInputDelimited_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_22_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileInputDelimited_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileInputDelimited_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileInputDelimited_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_26_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileInputDelimited_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_25_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileInputDelimited_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSendMail_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tSendMail_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_23_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row40_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row17_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row22_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row30_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row38_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row34_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "ERROR", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

				try {
					
						if(this.execStat){
							runStat.updateStatOnConnection("OnSubjobError1", 0, "error");
						}
					
					errorCode = null;
					tSendMail_1Process(globalMap);
					if (!"failure".equals(status)) {
						status = "end";
					}
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
			public void tSendMail_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputDelimited_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "ERROR", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

				try {
					
						if(this.execStat){
							runStat.updateStatOnConnection("OnSubjobError5", 0, "error");
						}
					
					errorCode = null;
					tSendMail_5Process(globalMap);
					if (!"failure".equals(status)) {
						status = "end";
					}
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
			public void tSendMail_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputDelimited_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "ERROR", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

				try {
					
						if(this.execStat){
							runStat.updateStatOnConnection("OnSubjobError2", 0, "error");
						}
					
					errorCode = null;
					tSendMail_2Process(globalMap);
					if (!"failure".equals(status)) {
						status = "end";
					}
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
			public void tSendMail_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputDelimited_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "ERROR", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

				try {
					
						if(this.execStat){
							runStat.updateStatOnConnection("OnSubjobError3", 0, "error");
						}
					
					errorCode = null;
					tSendMail_3Process(globalMap);
					if (!"failure".equals(status)) {
						status = "end";
					}
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
			public void tSendMail_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputDelimited_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "ERROR", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

				try {
					
						if(this.execStat){
							runStat.updateStatOnConnection("OnSubjobError4", 0, "error");
						}
					
					errorCode = null;
					tSendMail_4Process(globalMap);
					if (!"failure".equals(status)) {
						status = "end";
					}
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
			public void tSendMail_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	






public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_IMPORTINGEVMDATA_ImportingEVM = new byte[0];
    static byte[] commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int ID;

				public int getID () {
					return this.ID;
				}
				
			    public String WholesalerID;

				public String getWholesalerID () {
					return this.WholesalerID;
				}
				
			    public String Description;

				public String getDescription () {
					return this.Description;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.ID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row4Struct other = (row4Struct) obj;
		
						if (this.ID != other.ID)
							return false;
					

		return true;
    }

	public void copyDataTo(row4Struct other) {

		other.ID = this.ID;
	            other.WholesalerID = this.WholesalerID;
	            other.Description = this.Description;
	            
	}

	public void copyKeysDataTo(row4Struct other) {

		other.ID = this.ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IMPORTINGEVMDATA_ImportingEVM.length) {
				if(length < 1024 && commonByteArray_IMPORTINGEVMDATA_ImportingEVM.length == 0) {
   					commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[1024];
				} else {
   					commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IMPORTINGEVMDATA_ImportingEVM, 0, length);
			strReturn = new String(commonByteArray_IMPORTINGEVMDATA_ImportingEVM, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IMPORTINGEVMDATA_ImportingEVM) {

        	try {

        		int length = 0;
		
			        this.ID = dis.readInt();
					
					this.WholesalerID = readString(dis);
					
					this.Description = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ID);
					
					// String
				
						writeString(this.WholesalerID,dos);
					
					// String
				
						writeString(this.Description,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",WholesalerID="+WholesalerID);
		sb.append(",Description="+Description);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row25Struct implements routines.system.IPersistableRow<row25Struct> {
    final static byte[] commonByteArrayLock_IMPORTINGEVMDATA_ImportingEVM = new byte[0];
    static byte[] commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int ID;

				public int getID () {
					return this.ID;
				}
				
			    public String WholesalerID;

				public String getWholesalerID () {
					return this.WholesalerID;
				}
				
			    public String Description;

				public String getDescription () {
					return this.Description;
				}
				
			    public String errorCode;

				public String getErrorCode () {
					return this.errorCode;
				}
				
			    public String errorMessage;

				public String getErrorMessage () {
					return this.errorMessage;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.ID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row25Struct other = (row25Struct) obj;
		
						if (this.ID != other.ID)
							return false;
					

		return true;
    }

	public void copyDataTo(row25Struct other) {

		other.ID = this.ID;
	            other.WholesalerID = this.WholesalerID;
	            other.Description = this.Description;
	            other.errorCode = this.errorCode;
	            other.errorMessage = this.errorMessage;
	            
	}

	public void copyKeysDataTo(row25Struct other) {

		other.ID = this.ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IMPORTINGEVMDATA_ImportingEVM.length) {
				if(length < 1024 && commonByteArray_IMPORTINGEVMDATA_ImportingEVM.length == 0) {
   					commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[1024];
				} else {
   					commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IMPORTINGEVMDATA_ImportingEVM, 0, length);
			strReturn = new String(commonByteArray_IMPORTINGEVMDATA_ImportingEVM, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IMPORTINGEVMDATA_ImportingEVM) {

        	try {

        		int length = 0;
		
			        this.ID = dis.readInt();
					
					this.WholesalerID = readString(dis);
					
					this.Description = readString(dis);
					
					this.errorCode = readString(dis);
					
					this.errorMessage = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ID);
					
					// String
				
						writeString(this.WholesalerID,dos);
					
					// String
				
						writeString(this.Description,dos);
					
					// String
				
						writeString(this.errorCode,dos);
					
					// String
				
						writeString(this.errorMessage,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",WholesalerID="+WholesalerID);
		sb.append(",Description="+Description);
		sb.append(",errorCode="+errorCode);
		sb.append(",errorMessage="+errorMessage);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row25Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class AddNewCompanyStruct implements routines.system.IPersistableRow<AddNewCompanyStruct> {
    final static byte[] commonByteArrayLock_IMPORTINGEVMDATA_ImportingEVM = new byte[0];
    static byte[] commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int ID;

				public int getID () {
					return this.ID;
				}
				
			    public String WholesalerID;

				public String getWholesalerID () {
					return this.WholesalerID;
				}
				
			    public String Description;

				public String getDescription () {
					return this.Description;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.ID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final AddNewCompanyStruct other = (AddNewCompanyStruct) obj;
		
						if (this.ID != other.ID)
							return false;
					

		return true;
    }

	public void copyDataTo(AddNewCompanyStruct other) {

		other.ID = this.ID;
	            other.WholesalerID = this.WholesalerID;
	            other.Description = this.Description;
	            
	}

	public void copyKeysDataTo(AddNewCompanyStruct other) {

		other.ID = this.ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IMPORTINGEVMDATA_ImportingEVM.length) {
				if(length < 1024 && commonByteArray_IMPORTINGEVMDATA_ImportingEVM.length == 0) {
   					commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[1024];
				} else {
   					commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IMPORTINGEVMDATA_ImportingEVM, 0, length);
			strReturn = new String(commonByteArray_IMPORTINGEVMDATA_ImportingEVM, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IMPORTINGEVMDATA_ImportingEVM) {

        	try {

        		int length = 0;
		
			        this.ID = dis.readInt();
					
					this.WholesalerID = readString(dis);
					
					this.Description = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ID);
					
					// String
				
						writeString(this.WholesalerID,dos);
					
					// String
				
						writeString(this.Description,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",WholesalerID="+WholesalerID);
		sb.append(",Description="+Description);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(AddNewCompanyStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_IMPORTINGEVMDATA_ImportingEVM = new byte[0];
    static byte[] commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[0];

	
			    public String CompanyName;

				public String getCompanyName () {
					return this.CompanyName;
				}
				
			    public String EVMCustomerNumber;

				public String getEVMCustomerNumber () {
					return this.EVMCustomerNumber;
				}
				
			    public String CurrencyID;

				public String getCurrencyID () {
					return this.CurrencyID;
				}
				
			    public Integer Vertical;

				public Integer getVertical () {
					return this.Vertical;
				}
				
			    public String CustomerAdminName;

				public String getCustomerAdminName () {
					return this.CustomerAdminName;
				}
				
			    public String CustomerAdminPhoneNumber;

				public String getCustomerAdminPhoneNumber () {
					return this.CustomerAdminPhoneNumber;
				}
				
			    public String CustomerAdminEmailAddress;

				public String getCustomerAdminEmailAddress () {
					return this.CustomerAdminEmailAddress;
				}
				
			    public String CustomerAdminAddress1;

				public String getCustomerAdminAddress1 () {
					return this.CustomerAdminAddress1;
				}
				
			    public String CustomerAdminCity;

				public String getCustomerAdminCity () {
					return this.CustomerAdminCity;
				}
				
			    public String CustomerAdminCountry;

				public String getCustomerAdminCountry () {
					return this.CustomerAdminCountry;
				}
				
			    public String CustomerAdminRegion;

				public String getCustomerAdminRegion () {
					return this.CustomerAdminRegion;
				}
				
			    public String CustomerAdminPostalCode;

				public String getCustomerAdminPostalCode () {
					return this.CustomerAdminPostalCode;
				}
				
			    public String Username;

				public String getUsername () {
					return this.Username;
				}
				
			    public String Password;

				public String getPassword () {
					return this.Password;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IMPORTINGEVMDATA_ImportingEVM.length) {
				if(length < 1024 && commonByteArray_IMPORTINGEVMDATA_ImportingEVM.length == 0) {
   					commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[1024];
				} else {
   					commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IMPORTINGEVMDATA_ImportingEVM, 0, length);
			strReturn = new String(commonByteArray_IMPORTINGEVMDATA_ImportingEVM, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IMPORTINGEVMDATA_ImportingEVM) {

        	try {

        		int length = 0;
		
					this.CompanyName = readString(dis);
					
					this.EVMCustomerNumber = readString(dis);
					
					this.CurrencyID = readString(dis);
					
						this.Vertical = readInteger(dis);
					
					this.CustomerAdminName = readString(dis);
					
					this.CustomerAdminPhoneNumber = readString(dis);
					
					this.CustomerAdminEmailAddress = readString(dis);
					
					this.CustomerAdminAddress1 = readString(dis);
					
					this.CustomerAdminCity = readString(dis);
					
					this.CustomerAdminCountry = readString(dis);
					
					this.CustomerAdminRegion = readString(dis);
					
					this.CustomerAdminPostalCode = readString(dis);
					
					this.Username = readString(dis);
					
					this.Password = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CompanyName,dos);
					
					// String
				
						writeString(this.EVMCustomerNumber,dos);
					
					// String
				
						writeString(this.CurrencyID,dos);
					
					// Integer
				
						writeInteger(this.Vertical,dos);
					
					// String
				
						writeString(this.CustomerAdminName,dos);
					
					// String
				
						writeString(this.CustomerAdminPhoneNumber,dos);
					
					// String
				
						writeString(this.CustomerAdminEmailAddress,dos);
					
					// String
				
						writeString(this.CustomerAdminAddress1,dos);
					
					// String
				
						writeString(this.CustomerAdminCity,dos);
					
					// String
				
						writeString(this.CustomerAdminCountry,dos);
					
					// String
				
						writeString(this.CustomerAdminRegion,dos);
					
					// String
				
						writeString(this.CustomerAdminPostalCode,dos);
					
					// String
				
						writeString(this.Username,dos);
					
					// String
				
						writeString(this.Password,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CompanyName="+CompanyName);
		sb.append(",EVMCustomerNumber="+EVMCustomerNumber);
		sb.append(",CurrencyID="+CurrencyID);
		sb.append(",Vertical="+String.valueOf(Vertical));
		sb.append(",CustomerAdminName="+CustomerAdminName);
		sb.append(",CustomerAdminPhoneNumber="+CustomerAdminPhoneNumber);
		sb.append(",CustomerAdminEmailAddress="+CustomerAdminEmailAddress);
		sb.append(",CustomerAdminAddress1="+CustomerAdminAddress1);
		sb.append(",CustomerAdminCity="+CustomerAdminCity);
		sb.append(",CustomerAdminCountry="+CustomerAdminCountry);
		sb.append(",CustomerAdminRegion="+CustomerAdminRegion);
		sb.append(",CustomerAdminPostalCode="+CustomerAdminPostalCode);
		sb.append(",Username="+Username);
		sb.append(",Password="+Password);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_IMPORTINGEVMDATA_ImportingEVM = new byte[0];
    static byte[] commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[0];

	
			    public String CompanyName;

				public String getCompanyName () {
					return this.CompanyName;
				}
				
			    public String EVMCustomerNumber;

				public String getEVMCustomerNumber () {
					return this.EVMCustomerNumber;
				}
				
			    public String CurrencyID;

				public String getCurrencyID () {
					return this.CurrencyID;
				}
				
			    public Integer Vertical;

				public Integer getVertical () {
					return this.Vertical;
				}
				
			    public String CustomerAdminName;

				public String getCustomerAdminName () {
					return this.CustomerAdminName;
				}
				
			    public String CustomerAdminPhoneNumber;

				public String getCustomerAdminPhoneNumber () {
					return this.CustomerAdminPhoneNumber;
				}
				
			    public String CustomerAdminEmailAddress;

				public String getCustomerAdminEmailAddress () {
					return this.CustomerAdminEmailAddress;
				}
				
			    public String CustomerAdminAddress1;

				public String getCustomerAdminAddress1 () {
					return this.CustomerAdminAddress1;
				}
				
			    public String CustomerAdminCity;

				public String getCustomerAdminCity () {
					return this.CustomerAdminCity;
				}
				
			    public String CustomerAdminCountry;

				public String getCustomerAdminCountry () {
					return this.CustomerAdminCountry;
				}
				
			    public String CustomerAdminRegion;

				public String getCustomerAdminRegion () {
					return this.CustomerAdminRegion;
				}
				
			    public String CustomerAdminPostalCode;

				public String getCustomerAdminPostalCode () {
					return this.CustomerAdminPostalCode;
				}
				
			    public String Username;

				public String getUsername () {
					return this.Username;
				}
				
			    public String Password;

				public String getPassword () {
					return this.Password;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IMPORTINGEVMDATA_ImportingEVM.length) {
				if(length < 1024 && commonByteArray_IMPORTINGEVMDATA_ImportingEVM.length == 0) {
   					commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[1024];
				} else {
   					commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IMPORTINGEVMDATA_ImportingEVM, 0, length);
			strReturn = new String(commonByteArray_IMPORTINGEVMDATA_ImportingEVM, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IMPORTINGEVMDATA_ImportingEVM) {

        	try {

        		int length = 0;
		
					this.CompanyName = readString(dis);
					
					this.EVMCustomerNumber = readString(dis);
					
					this.CurrencyID = readString(dis);
					
						this.Vertical = readInteger(dis);
					
					this.CustomerAdminName = readString(dis);
					
					this.CustomerAdminPhoneNumber = readString(dis);
					
					this.CustomerAdminEmailAddress = readString(dis);
					
					this.CustomerAdminAddress1 = readString(dis);
					
					this.CustomerAdminCity = readString(dis);
					
					this.CustomerAdminCountry = readString(dis);
					
					this.CustomerAdminRegion = readString(dis);
					
					this.CustomerAdminPostalCode = readString(dis);
					
					this.Username = readString(dis);
					
					this.Password = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CompanyName,dos);
					
					// String
				
						writeString(this.EVMCustomerNumber,dos);
					
					// String
				
						writeString(this.CurrencyID,dos);
					
					// Integer
				
						writeInteger(this.Vertical,dos);
					
					// String
				
						writeString(this.CustomerAdminName,dos);
					
					// String
				
						writeString(this.CustomerAdminPhoneNumber,dos);
					
					// String
				
						writeString(this.CustomerAdminEmailAddress,dos);
					
					// String
				
						writeString(this.CustomerAdminAddress1,dos);
					
					// String
				
						writeString(this.CustomerAdminCity,dos);
					
					// String
				
						writeString(this.CustomerAdminCountry,dos);
					
					// String
				
						writeString(this.CustomerAdminRegion,dos);
					
					// String
				
						writeString(this.CustomerAdminPostalCode,dos);
					
					// String
				
						writeString(this.Username,dos);
					
					// String
				
						writeString(this.Password,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CompanyName="+CompanyName);
		sb.append(",EVMCustomerNumber="+EVMCustomerNumber);
		sb.append(",CurrencyID="+CurrencyID);
		sb.append(",Vertical="+String.valueOf(Vertical));
		sb.append(",CustomerAdminName="+CustomerAdminName);
		sb.append(",CustomerAdminPhoneNumber="+CustomerAdminPhoneNumber);
		sb.append(",CustomerAdminEmailAddress="+CustomerAdminEmailAddress);
		sb.append(",CustomerAdminAddress1="+CustomerAdminAddress1);
		sb.append(",CustomerAdminCity="+CustomerAdminCity);
		sb.append(",CustomerAdminCountry="+CustomerAdminCountry);
		sb.append(",CustomerAdminRegion="+CustomerAdminRegion);
		sb.append(",CustomerAdminPostalCode="+CustomerAdminPostalCode);
		sb.append(",Username="+Username);
		sb.append(",Password="+Password);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tFileInputDelimited_1Struct implements routines.system.IPersistableRow<after_tFileInputDelimited_1Struct> {
    final static byte[] commonByteArrayLock_IMPORTINGEVMDATA_ImportingEVM = new byte[0];
    static byte[] commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[0];

	
			    public String CompanyName;

				public String getCompanyName () {
					return this.CompanyName;
				}
				
			    public String EVMCustomerNumber;

				public String getEVMCustomerNumber () {
					return this.EVMCustomerNumber;
				}
				
			    public String CurrencyID;

				public String getCurrencyID () {
					return this.CurrencyID;
				}
				
			    public Integer Vertical;

				public Integer getVertical () {
					return this.Vertical;
				}
				
			    public String CustomerAdminName;

				public String getCustomerAdminName () {
					return this.CustomerAdminName;
				}
				
			    public String CustomerAdminPhoneNumber;

				public String getCustomerAdminPhoneNumber () {
					return this.CustomerAdminPhoneNumber;
				}
				
			    public String CustomerAdminEmailAddress;

				public String getCustomerAdminEmailAddress () {
					return this.CustomerAdminEmailAddress;
				}
				
			    public String CustomerAdminAddress1;

				public String getCustomerAdminAddress1 () {
					return this.CustomerAdminAddress1;
				}
				
			    public String CustomerAdminCity;

				public String getCustomerAdminCity () {
					return this.CustomerAdminCity;
				}
				
			    public String CustomerAdminCountry;

				public String getCustomerAdminCountry () {
					return this.CustomerAdminCountry;
				}
				
			    public String CustomerAdminRegion;

				public String getCustomerAdminRegion () {
					return this.CustomerAdminRegion;
				}
				
			    public String CustomerAdminPostalCode;

				public String getCustomerAdminPostalCode () {
					return this.CustomerAdminPostalCode;
				}
				
			    public String Username;

				public String getUsername () {
					return this.Username;
				}
				
			    public String Password;

				public String getPassword () {
					return this.Password;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IMPORTINGEVMDATA_ImportingEVM.length) {
				if(length < 1024 && commonByteArray_IMPORTINGEVMDATA_ImportingEVM.length == 0) {
   					commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[1024];
				} else {
   					commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IMPORTINGEVMDATA_ImportingEVM, 0, length);
			strReturn = new String(commonByteArray_IMPORTINGEVMDATA_ImportingEVM, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IMPORTINGEVMDATA_ImportingEVM) {

        	try {

        		int length = 0;
		
					this.CompanyName = readString(dis);
					
					this.EVMCustomerNumber = readString(dis);
					
					this.CurrencyID = readString(dis);
					
						this.Vertical = readInteger(dis);
					
					this.CustomerAdminName = readString(dis);
					
					this.CustomerAdminPhoneNumber = readString(dis);
					
					this.CustomerAdminEmailAddress = readString(dis);
					
					this.CustomerAdminAddress1 = readString(dis);
					
					this.CustomerAdminCity = readString(dis);
					
					this.CustomerAdminCountry = readString(dis);
					
					this.CustomerAdminRegion = readString(dis);
					
					this.CustomerAdminPostalCode = readString(dis);
					
					this.Username = readString(dis);
					
					this.Password = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CompanyName,dos);
					
					// String
				
						writeString(this.EVMCustomerNumber,dos);
					
					// String
				
						writeString(this.CurrencyID,dos);
					
					// Integer
				
						writeInteger(this.Vertical,dos);
					
					// String
				
						writeString(this.CustomerAdminName,dos);
					
					// String
				
						writeString(this.CustomerAdminPhoneNumber,dos);
					
					// String
				
						writeString(this.CustomerAdminEmailAddress,dos);
					
					// String
				
						writeString(this.CustomerAdminAddress1,dos);
					
					// String
				
						writeString(this.CustomerAdminCity,dos);
					
					// String
				
						writeString(this.CustomerAdminCountry,dos);
					
					// String
				
						writeString(this.CustomerAdminRegion,dos);
					
					// String
				
						writeString(this.CustomerAdminPostalCode,dos);
					
					// String
				
						writeString(this.Username,dos);
					
					// String
				
						writeString(this.Password,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CompanyName="+CompanyName);
		sb.append(",EVMCustomerNumber="+EVMCustomerNumber);
		sb.append(",CurrencyID="+CurrencyID);
		sb.append(",Vertical="+String.valueOf(Vertical));
		sb.append(",CustomerAdminName="+CustomerAdminName);
		sb.append(",CustomerAdminPhoneNumber="+CustomerAdminPhoneNumber);
		sb.append(",CustomerAdminEmailAddress="+CustomerAdminEmailAddress);
		sb.append(",CustomerAdminAddress1="+CustomerAdminAddress1);
		sb.append(",CustomerAdminCity="+CustomerAdminCity);
		sb.append(",CustomerAdminCountry="+CustomerAdminCountry);
		sb.append(",CustomerAdminRegion="+CustomerAdminRegion);
		sb.append(",CustomerAdminPostalCode="+CustomerAdminPostalCode);
		sb.append(",Username="+Username);
		sb.append(",Password="+Password);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tFileInputDelimited_1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_1Process(globalMap);

		row1Struct row1 = new row1Struct();
row1Struct row3 = row1;
AddNewCompanyStruct AddNewCompany = new AddNewCompanyStruct();
row4Struct row4 = new row4Struct();
row25Struct row25 = new row25Struct();







	
	/**
	 * [tLogRow_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_4", false);
		start_Hash.put("tLogRow_4", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_4";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("row4"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tLogRow_4 = 0;
		

	///////////////////////
	
         class Util_tLogRow_4 {

        String[] des_top = { ".", ".", "-", "+" };

        String[] des_head = { "|=", "=|", "-", "+" };

        String[] des_bottom = { "'", "'", "-", "+" };

        String name="";

        java.util.List<String[]> list = new java.util.ArrayList<String[]>();

        int[] colLengths = new int[3];

        public void addRow(String[] row) {

            for (int i = 0; i < 3; i++) {
                if (row[i]!=null) {
                  colLengths[i] = Math.max(colLengths[i], row[i].length());
                }
            }
            list.add(row);
        }

        public void setTableName(String name) {

            this.name = name;
        }

            public StringBuilder format() {
            
                StringBuilder sb = new StringBuilder();
  
            
                    sb.append(print(des_top));
    
                    int totals = 0;
                    for (int i = 0; i < colLengths.length; i++) {
                        totals = totals + colLengths[i];
                    }
    
                    // name
                    sb.append("|");
                    int k = 0;
                    for (k = 0; k < (totals + 2 - name.length()) / 2; k++) {
                        sb.append(' ');
                    }
                    sb.append(name);
                    for (int i = 0; i < totals + 2 - name.length() - k; i++) {
                        sb.append(' ');
                    }
                    sb.append("|\n");

                    // head and rows
                    sb.append(print(des_head));
                    for (int i = 0; i < list.size(); i++) {
    
                        String[] row = list.get(i);
    
                        java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());
                        
                        StringBuilder sbformat = new StringBuilder();                                             
        			        sbformat.append("|%1$-");
        			        sbformat.append(colLengths[0]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%2$-");
        			        sbformat.append(colLengths[1]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%3$-");
        			        sbformat.append(colLengths[2]);
        			        sbformat.append("s");
        			                      
                        sbformat.append("|\n");                    
       
                        formatter.format(sbformat.toString(), (Object[])row);	
                                
                        sb.append(formatter.toString());
                        if (i == 0)
                            sb.append(print(des_head)); // print the head
                    }
    
                    // end
                    sb.append(print(des_bottom));
                    return sb;
                }
            

            private StringBuilder print(String[] fillChars) {
                StringBuilder sb = new StringBuilder();
                //first column
                sb.append(fillChars[0]);                
                    for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);	                

                    for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                
                    //last column
                    for (int i = 0; i < colLengths[2] - fillChars[1].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }         
                sb.append(fillChars[1]);
                sb.append("\n");               
                return sb;
            }
            
            public boolean isTableEmpty(){
            	if (list.size() > 1)
            		return false;
            	return true;
            }
        }
        Util_tLogRow_4 util_tLogRow_4 = new Util_tLogRow_4();
        util_tLogRow_4.setTableName("tLogRow_4");
        util_tLogRow_4.addRow(new String[]{"ID","WholesalerID","Description",});        
 		StringBuilder strBuffer_tLogRow_4 = null;
		int nb_line_tLogRow_4 = 0;
///////////////////////    			



 



/**
 * [tLogRow_4 begin ] stop
 */




	
	/**
	 * [tLogRow_17 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_17", false);
		start_Hash.put("tLogRow_17", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_17";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("row25"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tLogRow_17 = 0;
		

	///////////////////////
	
         class Util_tLogRow_17 {

        String[] des_top = { ".", ".", "-", "+" };

        String[] des_head = { "|=", "=|", "-", "+" };

        String[] des_bottom = { "'", "'", "-", "+" };

        String name="";

        java.util.List<String[]> list = new java.util.ArrayList<String[]>();

        int[] colLengths = new int[5];

        public void addRow(String[] row) {

            for (int i = 0; i < 5; i++) {
                if (row[i]!=null) {
                  colLengths[i] = Math.max(colLengths[i], row[i].length());
                }
            }
            list.add(row);
        }

        public void setTableName(String name) {

            this.name = name;
        }

            public StringBuilder format() {
            
                StringBuilder sb = new StringBuilder();
  
            
                    sb.append(print(des_top));
    
                    int totals = 0;
                    for (int i = 0; i < colLengths.length; i++) {
                        totals = totals + colLengths[i];
                    }
    
                    // name
                    sb.append("|");
                    int k = 0;
                    for (k = 0; k < (totals + 4 - name.length()) / 2; k++) {
                        sb.append(' ');
                    }
                    sb.append(name);
                    for (int i = 0; i < totals + 4 - name.length() - k; i++) {
                        sb.append(' ');
                    }
                    sb.append("|\n");

                    // head and rows
                    sb.append(print(des_head));
                    for (int i = 0; i < list.size(); i++) {
    
                        String[] row = list.get(i);
    
                        java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());
                        
                        StringBuilder sbformat = new StringBuilder();                                             
        			        sbformat.append("|%1$-");
        			        sbformat.append(colLengths[0]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%2$-");
        			        sbformat.append(colLengths[1]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%3$-");
        			        sbformat.append(colLengths[2]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%4$-");
        			        sbformat.append(colLengths[3]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%5$-");
        			        sbformat.append(colLengths[4]);
        			        sbformat.append("s");
        			                      
                        sbformat.append("|\n");                    
       
                        formatter.format(sbformat.toString(), (Object[])row);	
                                
                        sb.append(formatter.toString());
                        if (i == 0)
                            sb.append(print(des_head)); // print the head
                    }
    
                    // end
                    sb.append(print(des_bottom));
                    return sb;
                }
            

            private StringBuilder print(String[] fillChars) {
                StringBuilder sb = new StringBuilder();
                //first column
                sb.append(fillChars[0]);                
                    for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);	                

                    for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                
                    //last column
                    for (int i = 0; i < colLengths[4] - fillChars[1].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }         
                sb.append(fillChars[1]);
                sb.append("\n");               
                return sb;
            }
            
            public boolean isTableEmpty(){
            	if (list.size() > 1)
            		return false;
            	return true;
            }
        }
        Util_tLogRow_17 util_tLogRow_17 = new Util_tLogRow_17();
        util_tLogRow_17.setTableName("tLogRow_17");
        util_tLogRow_17.addRow(new String[]{"ID","WholesalerID","Description","errorCode","errorMessage",});        
 		StringBuilder strBuffer_tLogRow_17 = null;
		int nb_line_tLogRow_17 = 0;
///////////////////////    			



 



/**
 * [tLogRow_17 begin ] stop
 */



	
	/**
	 * [tDBOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_1", false);
		start_Hash.put("tDBOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("AddNewCompany"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tDBOutput_1 = 0;
		



int nb_line_tDBOutput_1 = 0;
int nb_line_update_tDBOutput_1 = 0;
int nb_line_inserted_tDBOutput_1 = 0;
int nb_line_deleted_tDBOutput_1 = 0;
int nb_line_rejected_tDBOutput_1 = 0;

int deletedCount_tDBOutput_1=0;
int updatedCount_tDBOutput_1=0;
int insertedCount_tDBOutput_1=0;
int rejectedCount_tDBOutput_1=0;
String dbschema_tDBOutput_1 = null;
String tableName_tDBOutput_1 = null;
boolean whetherReject_tDBOutput_1 = false;

java.util.Calendar calendar_tDBOutput_1 = java.util.Calendar.getInstance();
long year1_tDBOutput_1 = TalendDate.parseDate("yyyy-MM-dd","0001-01-01").getTime();
long year2_tDBOutput_1 = TalendDate.parseDate("yyyy-MM-dd","1753-01-01").getTime();
long year10000_tDBOutput_1 = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss","9999-12-31 24:00:00").getTime();
long date_tDBOutput_1;

java.util.Calendar calendar_datetimeoffset_tDBOutput_1 = java.util.Calendar.getInstance(java.util.TimeZone.getTimeZone("UTC"));

        int insertKeyCount_tDBOutput_1 = 1;
        if(insertKeyCount_tDBOutput_1 < 1) {
            throw new RuntimeException("For insert if not exist, Schema must have a key");
        }
	
java.sql.Connection conn_tDBOutput_1 = null;
String dbUser_tDBOutput_1 = null;
	dbschema_tDBOutput_1 = (String)globalMap.get("dbschema_tDBConnection_1");
	conn_tDBOutput_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	

if(dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
    tableName_tDBOutput_1 = "Company";
} else {
    tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "].[" + "Company";
}
	int count_tDBOutput_1=0;

        java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement("SELECT COUNT(1) FROM [" + tableName_tDBOutput_1 + "] WHERE [ID] = ?");
        resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);
        String insert_tDBOutput_1 = "INSERT INTO [" + tableName_tDBOutput_1 + "] ([ID],[WholesalerID],[Description]) VALUES (?,?,?)";
        java.sql.PreparedStatement pstmtInsert_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
        resourceMap.put("pstmtInsert_tDBOutput_1", pstmtInsert_tDBOutput_1);
 	boolean isShareIdentity_tDBOutput_1 = globalMap.get("shareIdentitySetting_tDBConnection_1") != null && (Boolean)globalMap.get("shareIdentitySetting_tDBConnection_1") == true;
        java.sql.Statement stmt_tDBOutput_1 = conn_tDBOutput_1.createStatement();
	        if ( !isShareIdentity_tDBOutput_1 ) {
	            stmt_tDBOutput_1.execute("SET IDENTITY_INSERT ["+ tableName_tDBOutput_1 +"] ON");
	        }

 



/**
 * [tDBOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("row3"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct> tHash_Lookup_row8 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct>) 
					globalMap.get( "tHash_Lookup_row8" ))
					;					
					
	
		tHash_Lookup_row8.initGet();
	

row8Struct row8HashKey = new row8Struct();
row8Struct row8Default = new row8Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
AddNewCompanyStruct AddNewCompany_tmp = new AddNewCompanyStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tLogRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_1", false);
		start_Hash.put("tLogRow_1", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("row1"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tLogRow_1 = 0;
		

	///////////////////////
	
         class Util_tLogRow_1 {

        String[] des_top = { ".", ".", "-", "+" };

        String[] des_head = { "|=", "=|", "-", "+" };

        String[] des_bottom = { "'", "'", "-", "+" };

        String name="";

        java.util.List<String[]> list = new java.util.ArrayList<String[]>();

        int[] colLengths = new int[14];

        public void addRow(String[] row) {

            for (int i = 0; i < 14; i++) {
                if (row[i]!=null) {
                  colLengths[i] = Math.max(colLengths[i], row[i].length());
                }
            }
            list.add(row);
        }

        public void setTableName(String name) {

            this.name = name;
        }

            public StringBuilder format() {
            
                StringBuilder sb = new StringBuilder();
  
            
                    sb.append(print(des_top));
    
                    int totals = 0;
                    for (int i = 0; i < colLengths.length; i++) {
                        totals = totals + colLengths[i];
                    }
    
                    // name
                    sb.append("|");
                    int k = 0;
                    for (k = 0; k < (totals + 13 - name.length()) / 2; k++) {
                        sb.append(' ');
                    }
                    sb.append(name);
                    for (int i = 0; i < totals + 13 - name.length() - k; i++) {
                        sb.append(' ');
                    }
                    sb.append("|\n");

                    // head and rows
                    sb.append(print(des_head));
                    for (int i = 0; i < list.size(); i++) {
    
                        String[] row = list.get(i);
    
                        java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());
                        
                        StringBuilder sbformat = new StringBuilder();                                             
        			        sbformat.append("|%1$-");
        			        sbformat.append(colLengths[0]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%2$-");
        			        sbformat.append(colLengths[1]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%3$-");
        			        sbformat.append(colLengths[2]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%4$-");
        			        sbformat.append(colLengths[3]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%5$-");
        			        sbformat.append(colLengths[4]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%6$-");
        			        sbformat.append(colLengths[5]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%7$-");
        			        sbformat.append(colLengths[6]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%8$-");
        			        sbformat.append(colLengths[7]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%9$-");
        			        sbformat.append(colLengths[8]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%10$-");
        			        sbformat.append(colLengths[9]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%11$-");
        			        sbformat.append(colLengths[10]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%12$-");
        			        sbformat.append(colLengths[11]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%13$-");
        			        sbformat.append(colLengths[12]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%14$-");
        			        sbformat.append(colLengths[13]);
        			        sbformat.append("s");
        			                      
                        sbformat.append("|\n");                    
       
                        formatter.format(sbformat.toString(), (Object[])row);	
                                
                        sb.append(formatter.toString());
                        if (i == 0)
                            sb.append(print(des_head)); // print the head
                    }
    
                    // end
                    sb.append(print(des_bottom));
                    return sb;
                }
            

            private StringBuilder print(String[] fillChars) {
                StringBuilder sb = new StringBuilder();
                //first column
                sb.append(fillChars[0]);                
                    for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);	                

                    for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[4] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[5] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[6] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[7] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[8] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[9] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[10] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[11] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[12] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                
                    //last column
                    for (int i = 0; i < colLengths[13] - fillChars[1].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }         
                sb.append(fillChars[1]);
                sb.append("\n");               
                return sb;
            }
            
            public boolean isTableEmpty(){
            	if (list.size() > 1)
            		return false;
            	return true;
            }
        }
        Util_tLogRow_1 util_tLogRow_1 = new Util_tLogRow_1();
        util_tLogRow_1.setTableName("CompanyListLog");
        util_tLogRow_1.addRow(new String[]{"CompanyName","EVMCustomerNumber","CurrencyID","Vertical","CustomerAdminName","CustomerAdminPhoneNumber","CustomerAdminEmailAddress","CustomerAdminAddress1","CustomerAdminCity","CustomerAdminCountry","CustomerAdminRegion","CustomerAdminPostalCode","Username","Password",});        
 		StringBuilder strBuffer_tLogRow_1 = null;
		int nb_line_tLogRow_1 = 0;
///////////////////////    			



 



/**
 * [tLogRow_1 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_1", false);
		start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_1";

	
		int tos_count_tFileInputDelimited_1 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				int limit_tFileInputDelimited_1 = -1;
				try{
					
						Object filename_tFileInputDelimited_1 = context.Customer_File;
						if(filename_tFileInputDelimited_1 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
			if(footer_value_tFileInputDelimited_1 >0 || random_value_tFileInputDelimited_1 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(context.Customer_File, "ISO-8859-15",",","\n",true,1,0,
									limit_tFileInputDelimited_1
								,-1, false);
						} catch(java.lang.Exception e) {
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_1!=null && fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();
						
			    						row1 = null;			
												
									boolean whetherReject_tFileInputDelimited_1 = false;
									row1 = new row1Struct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_1 = 0;
				
					String temp = ""; 
				
					columnIndexWithD_tFileInputDelimited_1 = 0;
					
							row1.CompanyName = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 1;
					
							row1.EVMCustomerNumber = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 2;
					
							row1.CurrencyID = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 3;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.Vertical = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"Vertical", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.Vertical = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 4;
					
							row1.CustomerAdminName = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 5;
					
							row1.CustomerAdminPhoneNumber = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 6;
					
							row1.CustomerAdminEmailAddress = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 7;
					
							row1.CustomerAdminAddress1 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 8;
					
							row1.CustomerAdminCity = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 9;
					
							row1.CustomerAdminCountry = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 10;
					
							row1.CustomerAdminRegion = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 11;
					
							row1.CustomerAdminPostalCode = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 12;
					
							row1.Username = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 13;
					
							row1.Password = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
				
										
										if(rowstate_tFileInputDelimited_1.getException()!=null) {
											throw rowstate_tFileInputDelimited_1.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
			        					whetherReject_tFileInputDelimited_1 = true;
			        					
			                					System.err.println(e.getMessage());
			                					row1 = null;
			                				
			    					}
								

 



/**
 * [tFileInputDelimited_1 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 


	tos_count_tFileInputDelimited_1++;

/**
 * [tFileInputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 process_data_begin ] stop
 */
// Start of branch "row1"
if(row1 != null) { 
			row25 = null;



	
	/**
	 * [tLogRow_1 main ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

			//row1
			//row1


			
				
				if(execStat){
					runStat.updateStatOnConnection("row1"+iterateId,1, 1);
				}
				
				
				
			

		
///////////////////////		
						

				
				String[] row_tLogRow_1 = new String[14];
   				
	    		if(row1.CompanyName != null) { //              
                 row_tLogRow_1[0]=    						    
				                String.valueOf(row1.CompanyName)			
					          ;	
							
	    		} //			
    			   				
	    		if(row1.EVMCustomerNumber != null) { //              
                 row_tLogRow_1[1]=    						    
				                String.valueOf(row1.EVMCustomerNumber)			
					          ;	
							
	    		} //			
    			   				
	    		if(row1.CurrencyID != null) { //              
                 row_tLogRow_1[2]=    						    
				                String.valueOf(row1.CurrencyID)			
					          ;	
							
	    		} //			
    			   				
	    		if(row1.Vertical != null) { //              
                 row_tLogRow_1[3]=    						    
				                String.valueOf(row1.Vertical)			
					          ;	
							
	    		} //			
    			   				
	    		if(row1.CustomerAdminName != null) { //              
                 row_tLogRow_1[4]=    						    
				                String.valueOf(row1.CustomerAdminName)			
					          ;	
							
	    		} //			
    			   				
	    		if(row1.CustomerAdminPhoneNumber != null) { //              
                 row_tLogRow_1[5]=    						    
				                String.valueOf(row1.CustomerAdminPhoneNumber)			
					          ;	
							
	    		} //			
    			   				
	    		if(row1.CustomerAdminEmailAddress != null) { //              
                 row_tLogRow_1[6]=    						    
				                String.valueOf(row1.CustomerAdminEmailAddress)			
					          ;	
							
	    		} //			
    			   				
	    		if(row1.CustomerAdminAddress1 != null) { //              
                 row_tLogRow_1[7]=    						    
				                String.valueOf(row1.CustomerAdminAddress1)			
					          ;	
							
	    		} //			
    			   				
	    		if(row1.CustomerAdminCity != null) { //              
                 row_tLogRow_1[8]=    						    
				                String.valueOf(row1.CustomerAdminCity)			
					          ;	
							
	    		} //			
    			   				
	    		if(row1.CustomerAdminCountry != null) { //              
                 row_tLogRow_1[9]=    						    
				                String.valueOf(row1.CustomerAdminCountry)			
					          ;	
							
	    		} //			
    			   				
	    		if(row1.CustomerAdminRegion != null) { //              
                 row_tLogRow_1[10]=    						    
				                String.valueOf(row1.CustomerAdminRegion)			
					          ;	
							
	    		} //			
    			   				
	    		if(row1.CustomerAdminPostalCode != null) { //              
                 row_tLogRow_1[11]=    						    
				                String.valueOf(row1.CustomerAdminPostalCode)			
					          ;	
							
	    		} //			
    			   				
	    		if(row1.Username != null) { //              
                 row_tLogRow_1[12]=    						    
				                String.valueOf(row1.Username)			
					          ;	
							
	    		} //			
    			   				
	    		if(row1.Password != null) { //              
                 row_tLogRow_1[13]=    						    
				                String.valueOf(row1.Password)			
					          ;	
							
	    		} //			
    			 

				util_tLogRow_1.addRow(row_tLogRow_1);	
				nb_line_tLogRow_1++;
//////

//////                    
                    
///////////////////////    			

 
     row3 = row1;


	tos_count_tLogRow_1++;

/**
 * [tLogRow_1 main ] stop
 */
	
	/**
	 * [tLogRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

			//row3
			//row3


			
				
				if(execStat){
					runStat.updateStatOnConnection("row3"+iterateId,1, 1);
				}
				
				
				
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row8" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow8 = false;
       		  	    	
       		  	    	
 							row8Struct row8ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								

								
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row8.lookup( row8HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row8.hasNext()) { // G_TM_M_090

  								
		  				
	  								
						
									
	
		  								forceLooprow8 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow8 = true;
			           		  	} // G 21
                    		  	
                    		

							row8Struct row8 = null;
                    		  	 
							

								while ((tHash_Lookup_row8 != null && tHash_Lookup_row8.hasNext()) || forceLooprow8) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row8'
									
                    		  	 
							   
                    		  	 
	       		  	    	row8Struct fromLookup_row8 = null;
							row8 = row8Default;
										 
							
								
								if(!forceLooprow8) { // G 46
								
							
								 
							
								
								fromLookup_row8 = tHash_Lookup_row8.next();

							

							if(fromLookup_row8 != null) {
								row8 = fromLookup_row8;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow8 = false;
									 	
							
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

AddNewCompany = null;


// # Output table : 'AddNewCompany'
AddNewCompany_tmp.ID = Numeric.sequence("s1", row8.CompanyID+ 1, 1) ;
AddNewCompany_tmp.WholesalerID = row8.WholesalerID ;
AddNewCompany_tmp.Description = row3.CompanyName ;
AddNewCompany = AddNewCompany_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "AddNewCompany"
if(AddNewCompany != null) { 
			row25 = null;



	
	/**
	 * [tDBOutput_1 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

			//AddNewCompany
			//AddNewCompany


			
				
				if(execStat){
					runStat.updateStatOnConnection("AddNewCompany"+iterateId,1, 1);
				}
				
				
				
			

		



            row4 = null;
            row25 = null;
	        if(isShareIdentity_tDBOutput_1) {
	            stmt_tDBOutput_1.execute("SET IDENTITY_INSERT ["+ tableName_tDBOutput_1 +"] ON");
	        }
        whetherReject_tDBOutput_1 = false;

                pstmt_tDBOutput_1.setInt(1, AddNewCompany.ID);


        java.sql.ResultSet rs_tDBOutput_1 = pstmt_tDBOutput_1.executeQuery();
        int checkCount_tDBOutput_1 = -1;
        while(rs_tDBOutput_1.next()) {
            checkCount_tDBOutput_1 = rs_tDBOutput_1.getInt(1);
        }

        if (checkCount_tDBOutput_1 < 1) {
            try {
                    pstmtInsert_tDBOutput_1.setInt(1, AddNewCompany.ID);

                    if(AddNewCompany.WholesalerID == null) {
pstmtInsert_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(2, AddNewCompany.WholesalerID);
}

                    if(AddNewCompany.Description == null) {
pstmtInsert_tDBOutput_1.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(3, AddNewCompany.Description);
}

                insertedCount_tDBOutput_1 = insertedCount_tDBOutput_1 + pstmtInsert_tDBOutput_1.executeUpdate();
                nb_line_tDBOutput_1++;
            } catch(java.lang.Exception e) {
				whetherReject_tDBOutput_1 = true;
            	nb_line_tDBOutput_1++;
            	
	            row25 = new row25Struct();
                    row25.ID = AddNewCompany.ID;
                    row25.WholesalerID = AddNewCompany.WholesalerID;
                    row25.Description = AddNewCompany.Description;
                	rejectedCount_tDBOutput_1 = rejectedCount_tDBOutput_1 + 1;
                	row25.errorCode = ((java.sql.SQLException)e).getSQLState();
                    row25.errorMessage = e.getMessage() + " - Line: " + tos_count_tDBOutput_1;
                }
            }
            if(!whetherReject_tDBOutput_1) {
                            row4 = new row4Struct();
                                row4.ID = AddNewCompany.ID;
                                row4.WholesalerID = AddNewCompany.WholesalerID;
                                row4.Description = AddNewCompany.Description;
            }
            	//////////batch execute by batch size///////
            	class LimitBytesHelper_tDBOutput_1{
            		public int limitBytePart1(int counter,java.sql.PreparedStatement pstmt_tDBOutput_1) throws Exception {
                try {
						
						for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
							if(countEach_tDBOutput_1 == -2 || countEach_tDBOutput_1 == -3) {
								break;
							}
							counter += countEach_tDBOutput_1;
						}
						
                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_tDBOutput_1 = 0;
					for(int countEach_tDBOutput_1: e.getUpdateCounts()) {
						counter += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}
				
            	    	
                		System.err.println(e.getMessage());
                	
               			 }
    				return counter;
            	}
            	
            	public int limitBytePart2(int counter,java.sql.PreparedStatement pstmt_tDBOutput_1) throws Exception {
                try {
                		
						for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
							if(countEach_tDBOutput_1 == -2 || countEach_tDBOutput_1 == -3) {
								break;
							}
							counter += countEach_tDBOutput_1;
						}
						
                }catch (java.sql.BatchUpdateException e){
                	
                	
					for(int countEach_tDBOutput_1: e.getUpdateCounts()) {
						counter += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}
					
            	    	
                        System.err.println(e.getMessage());
                	
                		}	
                	return counter;	
            	}
            }

    	////////////commit every////////////
    			
		if (isShareIdentity_tDBOutput_1 ) {
        	 stmt_tDBOutput_1.execute("SET IDENTITY_INSERT ["+ tableName_tDBOutput_1 +"] OFF");
        }

 


	tos_count_tDBOutput_1++;

/**
 * [tDBOutput_1 main ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_begin ] stop
 */
// Start of branch "row4"
if(row4 != null) { 



	
	/**
	 * [tLogRow_4 main ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	

			//row4
			//row4


			
				
				if(execStat){
					runStat.updateStatOnConnection("row4"+iterateId,1, 1);
				}
				
				
				
			

		
///////////////////////		
						

				
				String[] row_tLogRow_4 = new String[3];
              
                 row_tLogRow_4[0]=    						    
				                String.valueOf(row4.ID)			
					          ;	
										
    			   				
	    		if(row4.WholesalerID != null) { //              
                 row_tLogRow_4[1]=    						    
				                String.valueOf(row4.WholesalerID)			
					          ;	
							
	    		} //			
    			   				
	    		if(row4.Description != null) { //              
                 row_tLogRow_4[2]=    						    
				                String.valueOf(row4.Description)			
					          ;	
							
	    		} //			
    			 

				util_tLogRow_4.addRow(row_tLogRow_4);	
				nb_line_tLogRow_4++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_4++;

/**
 * [tLogRow_4 main ] stop
 */
	
	/**
	 * [tLogRow_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	

 



/**
 * [tLogRow_4 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	

 



/**
 * [tLogRow_4 process_data_end ] stop
 */

} // End of branch "row4"




// Start of branch "row25"
if(row25 != null) { 



	
	/**
	 * [tLogRow_17 main ] start
	 */

	

	
	
	currentComponent="tLogRow_17";

	

			//row25
			//row25


			
				
				if(execStat){
					runStat.updateStatOnConnection("row25"+iterateId,1, 1);
				}
				
				
				
			

		
///////////////////////		
						

				
				String[] row_tLogRow_17 = new String[5];
              
                 row_tLogRow_17[0]=    						    
				                String.valueOf(row25.ID)			
					          ;	
										
    			   				
	    		if(row25.WholesalerID != null) { //              
                 row_tLogRow_17[1]=    						    
				                String.valueOf(row25.WholesalerID)			
					          ;	
							
	    		} //			
    			   				
	    		if(row25.Description != null) { //              
                 row_tLogRow_17[2]=    						    
				                String.valueOf(row25.Description)			
					          ;	
							
	    		} //			
    			   				
	    		if(row25.errorCode != null) { //              
                 row_tLogRow_17[3]=    						    
				                String.valueOf(row25.errorCode)			
					          ;	
							
	    		} //			
    			   				
	    		if(row25.errorMessage != null) { //              
                 row_tLogRow_17[4]=    						    
				                String.valueOf(row25.errorMessage)			
					          ;	
							
	    		} //			
    			 

				util_tLogRow_17.addRow(row_tLogRow_17);	
				nb_line_tLogRow_17++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_17++;

/**
 * [tLogRow_17 main ] stop
 */
	
	/**
	 * [tLogRow_17 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_17";

	

 



/**
 * [tLogRow_17 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_17 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_17";

	

 



/**
 * [tLogRow_17 process_data_end ] stop
 */

} // End of branch "row25"




	
	/**
	 * [tDBOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_end ] stop
 */

} // End of branch "AddNewCompany"



	
		} // close loop of lookup 'row8' // G_TM_M_043
	
	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tLogRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_end ] stop
 */

} // End of branch "row1"




	
	/**
	 * [tFileInputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	



            }
            }finally{
                if(!((Object)(context.Customer_File) instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_1!=null){
                		fid_tFileInputDelimited_1.close();
                	}
                }
                if(fid_tFileInputDelimited_1!=null){
                	globalMap.put("tFileInputDelimited_1_NB_LINE", fid_tFileInputDelimited_1.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_1", true);
end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());




/**
 * [tFileInputDelimited_1 end ] stop
 */

	
	/**
	 * [tLogRow_1 end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	


//////

                    
                    java.io.PrintStream consoleOut_tLogRow_1 = null;
                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_1 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_1);
                    }
                    
                    consoleOut_tLogRow_1.println(util_tLogRow_1.format().toString());
                    consoleOut_tLogRow_1.flush();
//////
globalMap.put("tLogRow_1_NB_LINE",nb_line_tLogRow_1);

///////////////////////    			

			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("row1"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tLogRow_1", true);
end_Hash.put("tLogRow_1", System.currentTimeMillis());




/**
 * [tLogRow_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row8 != null) {
						tHash_Lookup_row8.endGet();
					}
					globalMap.remove( "tHash_Lookup_row8" );

					
					
				
// ###############################      





			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("row3"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tDBOutput_1 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



		if ( isShareIdentity_tDBOutput_1 ) {
			String setIdentityInsertONSQL_tDBOutput_1 = "SET IDENTITY_INSERT ["+ tableName_tDBOutput_1 +"] ON";
			
        	stmt_tDBOutput_1.execute(setIdentityInsertONSQL_tDBOutput_1);
			
        }
        if(pstmtInsert_tDBOutput_1 != null){
            pstmtInsert_tDBOutput_1.close();
            resourceMap.remove("pstmtInsert_tDBOutput_1");
        }
        if(pstmt_tDBOutput_1 != null) {
            pstmt_tDBOutput_1.close();
            resourceMap.remove("pstmt_tDBOutput_1");
        }
    String setIdentityInsertOFFSQL_tDBOutput_1 = "SET IDENTITY_INSERT ["+ tableName_tDBOutput_1 +"] OFF";
    stmt_tDBOutput_1.execute(setIdentityInsertOFFSQL_tDBOutput_1);
    stmt_tDBOutput_1.close();
    resourceMap.put("statementClosed_tDBOutput_1", true);

	nb_line_deleted_tDBOutput_1=nb_line_deleted_tDBOutput_1+ deletedCount_tDBOutput_1;
	nb_line_update_tDBOutput_1=nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
	nb_line_inserted_tDBOutput_1=nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
	nb_line_rejected_tDBOutput_1=nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;
	
        globalMap.put("tDBOutput_1_NB_LINE",nb_line_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_UPDATED",nb_line_update_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_DELETED",nb_line_deleted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);
    
	

			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("AddNewCompany"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tDBOutput_1", true);
end_Hash.put("tDBOutput_1", System.currentTimeMillis());




/**
 * [tDBOutput_1 end ] stop
 */

	
	/**
	 * [tLogRow_4 end ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	


//////

                    
                    java.io.PrintStream consoleOut_tLogRow_4 = null;
                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_4 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_4 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_4);
                    }
                    
                    consoleOut_tLogRow_4.println(util_tLogRow_4.format().toString());
                    consoleOut_tLogRow_4.flush();
//////
globalMap.put("tLogRow_4_NB_LINE",nb_line_tLogRow_4);

///////////////////////    			

			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("row4"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tLogRow_4", true);
end_Hash.put("tLogRow_4", System.currentTimeMillis());




/**
 * [tLogRow_4 end ] stop
 */




	
	/**
	 * [tLogRow_17 end ] start
	 */

	

	
	
	currentComponent="tLogRow_17";

	


//////

                    
                    java.io.PrintStream consoleOut_tLogRow_17 = null;
                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_17 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_17 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_17);
                    }
                    
                    consoleOut_tLogRow_17.println(util_tLogRow_17.format().toString());
                    consoleOut_tLogRow_17.flush();
//////
globalMap.put("tLogRow_17_NB_LINE",nb_line_tLogRow_17);

///////////////////////    			

			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("row25"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tLogRow_17", true);
end_Hash.put("tLogRow_17", System.currentTimeMillis());




/**
 * [tLogRow_17 end ] stop
 */












				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row8"); 
				     			
				try{
					
	
	/**
	 * [tFileInputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 finally ] stop
 */

	
	/**
	 * [tLogRow_1 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tDBOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



    if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
                if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_1")) != null) {
                    pstmtToClose_tDBOutput_1.close();
                }
    }
 



/**
 * [tDBOutput_1 finally ] stop
 */

	
	/**
	 * [tLogRow_4 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_4";

	

 



/**
 * [tLogRow_4 finally ] stop
 */




	
	/**
	 * [tLogRow_17 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_17";

	

 



/**
 * [tLogRow_17 finally ] stop
 */












				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}
	

public void tSendMail_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSendMail_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tSendMail_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tSendMail_1", false);
		start_Hash.put("tSendMail_1", System.currentTimeMillis());
		
	
	currentComponent="tSendMail_1";

	
		int tos_count_tSendMail_1 = 0;
		

 



/**
 * [tSendMail_1 begin ] stop
 */
	
	/**
	 * [tSendMail_1 main ] start
	 */

	

	
	
	currentComponent="tSendMail_1";

	

 

	String smtpHost_tSendMail_1 = context.Email_host;
        String smtpPort_tSendMail_1 = context.Email_port;
	String from_tSendMail_1 = (context.Email_from);
    String to_tSendMail_1 = (context.Email_to).replace(";",",");
    String cc_tSendMail_1 = (("")==null || "".equals(""))?null:("").replace(";",",");
    String bcc_tSendMail_1 = (("")==null || "".equals(""))?null:("").replace(";",",");
    String subject_tSendMail_1 = ("Talend Error Notification");
    
	java.util.List<java.util.Map<String, String>> headers_tSendMail_1 = new java.util.ArrayList<java.util.Map<String,String>>();
	java.util.List<String> attachments_tSendMail_1 = new java.util.ArrayList<String>();
	java.util.List<String> contentTransferEncoding_tSendMail_1 = new java.util.ArrayList<String>();

	String message_tSendMail_1 = (("Error at process 1") == null || "".equals("Error at process 1")) ? "\"\"" : ("Error at process 1") ;
	java.util.Properties props_tSendMail_1 = System.getProperties();     
	props_tSendMail_1.put("mail.smtp.host", smtpHost_tSendMail_1);
	props_tSendMail_1.put("mail.smtp.port", smtpPort_tSendMail_1);
		props_tSendMail_1.put("mail.mime.encodefilename", "true");  
		props_tSendMail_1.put("mail.smtp.socketFactory.class", "javax.net.ssl.SSLSocketFactory");
		props_tSendMail_1.put("mail.smtp.socketFactory.fallback", "false");
		props_tSendMail_1.put("mail.smtp.socketFactory.port", smtpPort_tSendMail_1);     
	try {
		
		
			props_tSendMail_1.put("mail.smtp.auth", "true");
			javax.mail.Session session_tSendMail_1 = javax.mail.Session.getInstance(props_tSendMail_1, new javax.mail.Authenticator(){         
				protected javax.mail.PasswordAuthentication getPasswordAuthentication() {
				
                
	final String decryptedPassword_tSendMail_1 = context.Email_password; 
				
				
				return new javax.mail.PasswordAuthentication(context.Email_username, decryptedPassword_tSendMail_1); 
				}         
			});   
		
		
		javax.mail.Message msg_tSendMail_1 = new javax.mail.internet.MimeMessage(session_tSendMail_1);
		msg_tSendMail_1.setFrom(new javax.mail.internet.InternetAddress(from_tSendMail_1, null));
		msg_tSendMail_1.setRecipients(javax.mail.Message.RecipientType.TO,javax.mail.internet.InternetAddress.parse(to_tSendMail_1, false));
		if (cc_tSendMail_1 != null) msg_tSendMail_1.setRecipients(javax.mail.Message.RecipientType.CC, javax.mail.internet.InternetAddress.parse(cc_tSendMail_1, false));
		if (bcc_tSendMail_1 != null) msg_tSendMail_1.setRecipients(javax.mail.Message.RecipientType.BCC, javax.mail.internet.InternetAddress.parse(bcc_tSendMail_1, false));
		msg_tSendMail_1.setSubject(subject_tSendMail_1);

		for (int i_tSendMail_1 = 0; i_tSendMail_1 < headers_tSendMail_1.size(); i_tSendMail_1++) {
			java.util.Map<String, String> header_tSendMail_1 = headers_tSendMail_1.get(i_tSendMail_1);
			msg_tSendMail_1.setHeader(header_tSendMail_1.get("KEY"), header_tSendMail_1.get("VALUE"));    
		}  
		msg_tSendMail_1.setSentDate(new Date());
		msg_tSendMail_1.setHeader("X-Priority", "1"); //High->1 Normal->3 Low->5
		javax.mail.Multipart mp_tSendMail_1 = new javax.mail.internet.MimeMultipart();
		javax.mail.internet.MimeBodyPart mbpText_tSendMail_1 = new javax.mail.internet.MimeBodyPart();
		mbpText_tSendMail_1.setText(message_tSendMail_1,"ISO-8859-15", "plain");
		mp_tSendMail_1.addBodyPart(mbpText_tSendMail_1);
  
		javax.mail.internet.MimeBodyPart mbpFile_tSendMail_1 = null;

		for (int i_tSendMail_1 = 0; i_tSendMail_1 < attachments_tSendMail_1.size(); i_tSendMail_1++){
			String filename_tSendMail_1 = attachments_tSendMail_1.get(i_tSendMail_1);
			javax.activation.FileDataSource fds_tSendMail_1 = null;
			java.io.File file_tSendMail_1 = new java.io.File(filename_tSendMail_1);
			
				if (!file_tSendMail_1.exists()){
					continue;
				}
			
    		if (file_tSendMail_1.isDirectory()){
				java.io.File[] subFiles_tSendMail_1 = file_tSendMail_1.listFiles();
				for(java.io.File subFile_tSendMail_1 : subFiles_tSendMail_1){
					if (subFile_tSendMail_1.isFile()){
						fds_tSendMail_1 = new javax.activation.FileDataSource(subFile_tSendMail_1.getAbsolutePath());
						mbpFile_tSendMail_1 = new javax.mail.internet.MimeBodyPart();
						mbpFile_tSendMail_1.setDataHandler(new javax.activation.DataHandler(fds_tSendMail_1));
						mbpFile_tSendMail_1.setFileName(javax.mail.internet.MimeUtility.encodeText(fds_tSendMail_1.getName()));
						if(contentTransferEncoding_tSendMail_1.get(i_tSendMail_1).equalsIgnoreCase("base64")){
							mbpFile_tSendMail_1.setHeader("Content-Transfer-Encoding", "base64");
						}
						mp_tSendMail_1.addBodyPart(mbpFile_tSendMail_1);
					}
				}
    		}else{
				mbpFile_tSendMail_1 = new javax.mail.internet.MimeBodyPart();
				fds_tSendMail_1 = new javax.activation.FileDataSource(filename_tSendMail_1);
				mbpFile_tSendMail_1.setDataHandler(new javax.activation.DataHandler(fds_tSendMail_1)); 
				mbpFile_tSendMail_1.setFileName(javax.mail.internet.MimeUtility.encodeText(fds_tSendMail_1.getName()));
				if(contentTransferEncoding_tSendMail_1.get(i_tSendMail_1).equalsIgnoreCase("base64")){
					mbpFile_tSendMail_1.setHeader("Content-Transfer-Encoding", "base64");
				}
				mp_tSendMail_1.addBodyPart(mbpFile_tSendMail_1);
			}
		}
		// -- set the content --
		msg_tSendMail_1.setContent(mp_tSendMail_1);
		// add handlers for main MIME types
		javax.activation.MailcapCommandMap mc_tSendMail_1 = ( javax.activation.MailcapCommandMap)javax.activation.CommandMap.getDefaultCommandMap();
		mc_tSendMail_1.addMailcap("text/html;; x-java-content-handler=com.sun.mail.handlers.text_html");
		mc_tSendMail_1.addMailcap("text/xml;; x-java-content-handler=com.sun.mail.handlers.text_xml");
		mc_tSendMail_1.addMailcap("text/plain;; x-java-content-handler=com.sun.mail.handlers.text_plain");
		mc_tSendMail_1.addMailcap("multipart/*;; x-java-content-handler=com.sun.mail.handlers.multipart_mixed");
		mc_tSendMail_1.addMailcap("message/rfc822;; x-java-content-handler=com.sun.mail.handlers.message_rfc822");
		javax.activation.CommandMap.setDefaultCommandMap(mc_tSendMail_1);
		// -- Send the message --
		javax.mail.Transport.send(msg_tSendMail_1);
	} catch(java.lang.Exception e){
  		
			throw(e);
		
	}finally{
		props_tSendMail_1.remove("mail.smtp.host");
		props_tSendMail_1.remove("mail.smtp.port");
		
		props_tSendMail_1.remove("mail.mime.encodefilename");
		  
			props_tSendMail_1.remove("mail.smtp.socketFactory.class");
			props_tSendMail_1.remove("mail.smtp.socketFactory.fallback");
			props_tSendMail_1.remove("mail.smtp.socketFactory.port");
		
		props_tSendMail_1.remove("mail.smtp.auth");     
	}

 


	tos_count_tSendMail_1++;

/**
 * [tSendMail_1 main ] stop
 */
	
	/**
	 * [tSendMail_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSendMail_1";

	

 



/**
 * [tSendMail_1 process_data_begin ] stop
 */
	
	/**
	 * [tSendMail_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tSendMail_1";

	

 



/**
 * [tSendMail_1 process_data_end ] stop
 */
	
	/**
	 * [tSendMail_1 end ] start
	 */

	

	
	
	currentComponent="tSendMail_1";

	

 

ok_Hash.put("tSendMail_1", true);
end_Hash.put("tSendMail_1", System.currentTimeMillis());




/**
 * [tSendMail_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSendMail_1 finally ] start
	 */

	

	
	
	currentComponent="tSendMail_1";

	

 



/**
 * [tSendMail_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSendMail_1_SUBPROCESS_STATE", 1);
	}
	


public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
    final static byte[] commonByteArrayLock_IMPORTINGEVMDATA_ImportingEVM = new byte[0];
    static byte[] commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[0];

	
			    public Integer CompanyID;

				public Integer getCompanyID () {
					return this.CompanyID;
				}
				
			    public String WholesalerID;

				public String getWholesalerID () {
					return this.WholesalerID;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IMPORTINGEVMDATA_ImportingEVM.length) {
				if(length < 1024 && commonByteArray_IMPORTINGEVMDATA_ImportingEVM.length == 0) {
   					commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[1024];
				} else {
   					commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IMPORTINGEVMDATA_ImportingEVM, 0, length);
			strReturn = new String(commonByteArray_IMPORTINGEVMDATA_ImportingEVM, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IMPORTINGEVMDATA_ImportingEVM) {

        	try {

        		int length = 0;
		
						this.CompanyID = readInteger(dis);
					
					this.WholesalerID = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.CompanyID,dos);
					
					// String
				
						writeString(this.WholesalerID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CompanyID="+String.valueOf(CompanyID));
		sb.append(",WholesalerID="+WholesalerID);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_IMPORTINGEVMDATA_ImportingEVM = new byte[0];
    static byte[] commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[0];

	
			    public Integer CompanyID;

				public Integer getCompanyID () {
					return this.CompanyID;
				}
				
			    public String WholesalerID;

				public String getWholesalerID () {
					return this.WholesalerID;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IMPORTINGEVMDATA_ImportingEVM.length) {
				if(length < 1024 && commonByteArray_IMPORTINGEVMDATA_ImportingEVM.length == 0) {
   					commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[1024];
				} else {
   					commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IMPORTINGEVMDATA_ImportingEVM, 0, length);
			strReturn = new String(commonByteArray_IMPORTINGEVMDATA_ImportingEVM, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IMPORTINGEVMDATA_ImportingEVM) {

        	try {

        		int length = 0;
		
						this.CompanyID = readInteger(dis);
					
					this.WholesalerID = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.CompanyID,dos);
					
					// String
				
						writeString(this.WholesalerID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CompanyID="+String.valueOf(CompanyID));
		sb.append(",WholesalerID="+WholesalerID);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row6Struct row6 = new row6Struct();
row6Struct row8 = row6;





	
	/**
	 * [tAdvancedHash_row8 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row8", false);
		start_Hash.put("tAdvancedHash_row8", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row8";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("row8"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tAdvancedHash_row8 = 0;
		

			   		// connection name:row8
			   		// source node:tLogRow_2 - inputs:(row6) outputs:(row8,row8) | target node:tAdvancedHash_row8 - inputs:(row8) outputs:()
			   		// linked node: tMap_1 - inputs:(row3,row8) outputs:(AddNewCompany)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row8 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_ROWS;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct> tHash_Lookup_row8 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row8Struct>getLookup(matchingModeEnum_row8);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row8", tHash_Lookup_row8);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row8 begin ] stop
 */



	
	/**
	 * [tLogRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_2", false);
		start_Hash.put("tLogRow_2", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("row6"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tLogRow_2 = 0;
		

	///////////////////////
	
         class Util_tLogRow_2 {

        String[] des_top = { ".", ".", "-", "+" };

        String[] des_head = { "|=", "=|", "-", "+" };

        String[] des_bottom = { "'", "'", "-", "+" };

        String name="";

        java.util.List<String[]> list = new java.util.ArrayList<String[]>();

        int[] colLengths = new int[2];

        public void addRow(String[] row) {

            for (int i = 0; i < 2; i++) {
                if (row[i]!=null) {
                  colLengths[i] = Math.max(colLengths[i], row[i].length());
                }
            }
            list.add(row);
        }

        public void setTableName(String name) {

            this.name = name;
        }

            public StringBuilder format() {
            
                StringBuilder sb = new StringBuilder();
  
            
                    sb.append(print(des_top));
    
                    int totals = 0;
                    for (int i = 0; i < colLengths.length; i++) {
                        totals = totals + colLengths[i];
                    }
    
                    // name
                    sb.append("|");
                    int k = 0;
                    for (k = 0; k < (totals + 1 - name.length()) / 2; k++) {
                        sb.append(' ');
                    }
                    sb.append(name);
                    for (int i = 0; i < totals + 1 - name.length() - k; i++) {
                        sb.append(' ');
                    }
                    sb.append("|\n");

                    // head and rows
                    sb.append(print(des_head));
                    for (int i = 0; i < list.size(); i++) {
    
                        String[] row = list.get(i);
    
                        java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());
                        
                        StringBuilder sbformat = new StringBuilder();                                             
        			        sbformat.append("|%1$-");
        			        sbformat.append(colLengths[0]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%2$-");
        			        sbformat.append(colLengths[1]);
        			        sbformat.append("s");
        			                      
                        sbformat.append("|\n");                    
       
                        formatter.format(sbformat.toString(), (Object[])row);	
                                
                        sb.append(formatter.toString());
                        if (i == 0)
                            sb.append(print(des_head)); // print the head
                    }
    
                    // end
                    sb.append(print(des_bottom));
                    return sb;
                }
            

            private StringBuilder print(String[] fillChars) {
                StringBuilder sb = new StringBuilder();
                //first column
                sb.append(fillChars[0]);                
                    for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);	                

                
                    //last column
                    for (int i = 0; i < colLengths[1] - fillChars[1].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }         
                sb.append(fillChars[1]);
                sb.append("\n");               
                return sb;
            }
            
            public boolean isTableEmpty(){
            	if (list.size() > 1)
            		return false;
            	return true;
            }
        }
        Util_tLogRow_2 util_tLogRow_2 = new Util_tLogRow_2();
        util_tLogRow_2.setTableName("CompanyTableLog");
        util_tLogRow_2.addRow(new String[]{"CompanyID","WholesalerID",});        
 		StringBuilder strBuffer_tLogRow_2 = null;
		int nb_line_tLogRow_2 = 0;
///////////////////////    			



 



/**
 * [tLogRow_2 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";

	
		int tos_count_tDBInput_1 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_1 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_1 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_1  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_1, talendToDBArray_tDBInput_1); 
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
		        conn_tDBInput_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
			String dbschema_tDBInput_1 = (String)globalMap.get("dbschema_tDBConnection_1");
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "SELECT MAX(ID) as CompanyID,  '0000000001' as WholesalerID  FROM dbo.Company ";
			

            	globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);
		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								row6.CompanyID = null;
							} else {
		                          
            row6.CompanyID = rs_tDBInput_1.getInt(1);
            if(rs_tDBInput_1.wasNull()){
                    row6.CompanyID = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								row6.WholesalerID = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(2);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
            		row6.WholesalerID = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row6.WholesalerID = tmpContent_tDBInput_1;
                }
            } else {
                row6.WholesalerID = null;
            }
		                    }
					





 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tLogRow_2 main ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

			//row6
			//row6


			
				
				if(execStat){
					runStat.updateStatOnConnection("row6"+iterateId,1, 1);
				}
				
				
				
			

		
///////////////////////		
						

				
				String[] row_tLogRow_2 = new String[2];
   				
	    		if(row6.CompanyID != null) { //              
                 row_tLogRow_2[0]=    						    
				                String.valueOf(row6.CompanyID)			
					          ;	
							
	    		} //			
    			   				
	    		if(row6.WholesalerID != null) { //              
                 row_tLogRow_2[1]=    						    
				                String.valueOf(row6.WholesalerID)			
					          ;	
							
	    		} //			
    			 

				util_tLogRow_2.addRow(row_tLogRow_2);	
				nb_line_tLogRow_2++;
//////

//////                    
                    
///////////////////////    			

 
     row8 = row6;


	tos_count_tLogRow_2++;

/**
 * [tLogRow_2 main ] stop
 */
	
	/**
	 * [tLogRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row8 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";

	

			//row8
			//row8


			
				
				if(execStat){
					runStat.updateStatOnConnection("row8"+iterateId,1, 1);
				}
				
				
				
			

		


			   
			   

					row8Struct row8_HashRow = new row8Struct();
		   	   	   
				
				row8_HashRow.CompanyID = row8.CompanyID;
				
				row8_HashRow.WholesalerID = row8.WholesalerID;
				
			tHash_Lookup_row8.put(row8_HashRow);
			
            




 


	tos_count_tAdvancedHash_row8++;

/**
 * [tAdvancedHash_row8 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";

	

 



/**
 * [tAdvancedHash_row8 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row8 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";

	

 



/**
 * [tAdvancedHash_row8 process_data_end ] stop
 */



	
	/**
	 * [tLogRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
}
globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);

 

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());




/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tLogRow_2 end ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	


//////

                    
                    java.io.PrintStream consoleOut_tLogRow_2 = null;
                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_2 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_2 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_2);
                    }
                    
                    consoleOut_tLogRow_2.println(util_tLogRow_2.format().toString());
                    consoleOut_tLogRow_2.flush();
//////
globalMap.put("tLogRow_2_NB_LINE",nb_line_tLogRow_2);

///////////////////////    			

			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("row6"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tLogRow_2", true);
end_Hash.put("tLogRow_2", System.currentTimeMillis());




/**
 * [tLogRow_2 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row8 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";

	

tHash_Lookup_row8.endPut();

			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("row8"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tAdvancedHash_row8", true);
end_Hash.put("tAdvancedHash_row8", System.currentTimeMillis());




/**
 * [tAdvancedHash_row8 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tLogRow_2 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row8 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";

	

 



/**
 * [tAdvancedHash_row8 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class row18Struct implements routines.system.IPersistableRow<row18Struct> {
    final static byte[] commonByteArrayLock_IMPORTINGEVMDATA_ImportingEVM = new byte[0];
    static byte[] commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int ID;

				public int getID () {
					return this.ID;
				}
				
			    public String WholesalerID;

				public String getWholesalerID () {
					return this.WholesalerID;
				}
				
			    public int CustomerID;

				public int getCustomerID () {
					return this.CustomerID;
				}
				
			    public String PriCustomerNumber;

				public String getPriCustomerNumber () {
					return this.PriCustomerNumber;
				}
				
			    public String SecCustomerNumber;

				public String getSecCustomerNumber () {
					return this.SecCustomerNumber;
				}
				
			    public String ExternalModeratorNumber;

				public String getExternalModeratorNumber () {
					return this.ExternalModeratorNumber;
				}
				
			    public String ModeratorCode;

				public String getModeratorCode () {
					return this.ModeratorCode;
				}
				
			    public String PassCode;

				public String getPassCode () {
					return this.PassCode;
				}
				
			    public String Description;

				public String getDescription () {
					return this.Description;
				}
				
			    public int DepartmentID;

				public int getDepartmentID () {
					return this.DepartmentID;
				}
				
			    public String ModifiedBy;

				public String getModifiedBy () {
					return this.ModifiedBy;
				}
				
			    public java.util.Date CreatedDate;

				public java.util.Date getCreatedDate () {
					return this.CreatedDate;
				}
				
			    public java.util.Date LastModified;

				public java.util.Date getLastModified () {
					return this.LastModified;
				}
				
			    public Boolean Enabled;

				public Boolean getEnabled () {
					return this.Enabled;
				}
				
			    public Object UniqueModeratorID;

				public Object getUniqueModeratorID () {
					return this.UniqueModeratorID;
				}
				
			    public Integer UserID;

				public Integer getUserID () {
					return this.UserID;
				}
				
			    public String WebMeetingID;

				public String getWebMeetingID () {
					return this.WebMeetingID;
				}
				
			    public Integer omnovia_room_id;

				public Integer getOmnovia_room_id () {
					return this.omnovia_room_id;
				}
				
			    public String seevogh_meeting_url;

				public String getSeevogh_meeting_url () {
					return this.seevogh_meeting_url;
				}
				
			    public String SeeVoghMeetingID;

				public String getSeeVoghMeetingID () {
					return this.SeeVoghMeetingID;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.ID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row18Struct other = (row18Struct) obj;
		
						if (this.ID != other.ID)
							return false;
					

		return true;
    }

	public void copyDataTo(row18Struct other) {

		other.ID = this.ID;
	            other.WholesalerID = this.WholesalerID;
	            other.CustomerID = this.CustomerID;
	            other.PriCustomerNumber = this.PriCustomerNumber;
	            other.SecCustomerNumber = this.SecCustomerNumber;
	            other.ExternalModeratorNumber = this.ExternalModeratorNumber;
	            other.ModeratorCode = this.ModeratorCode;
	            other.PassCode = this.PassCode;
	            other.Description = this.Description;
	            other.DepartmentID = this.DepartmentID;
	            other.ModifiedBy = this.ModifiedBy;
	            other.CreatedDate = this.CreatedDate;
	            other.LastModified = this.LastModified;
	            other.Enabled = this.Enabled;
	            other.UniqueModeratorID = this.UniqueModeratorID;
	            other.UserID = this.UserID;
	            other.WebMeetingID = this.WebMeetingID;
	            other.omnovia_room_id = this.omnovia_room_id;
	            other.seevogh_meeting_url = this.seevogh_meeting_url;
	            other.SeeVoghMeetingID = this.SeeVoghMeetingID;
	            
	}

	public void copyKeysDataTo(row18Struct other) {

		other.ID = this.ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IMPORTINGEVMDATA_ImportingEVM.length) {
				if(length < 1024 && commonByteArray_IMPORTINGEVMDATA_ImportingEVM.length == 0) {
   					commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[1024];
				} else {
   					commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IMPORTINGEVMDATA_ImportingEVM, 0, length);
			strReturn = new String(commonByteArray_IMPORTINGEVMDATA_ImportingEVM, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IMPORTINGEVMDATA_ImportingEVM) {

        	try {

        		int length = 0;
		
			        this.ID = dis.readInt();
					
					this.WholesalerID = readString(dis);
					
			        this.CustomerID = dis.readInt();
					
					this.PriCustomerNumber = readString(dis);
					
					this.SecCustomerNumber = readString(dis);
					
					this.ExternalModeratorNumber = readString(dis);
					
					this.ModeratorCode = readString(dis);
					
					this.PassCode = readString(dis);
					
					this.Description = readString(dis);
					
			        this.DepartmentID = dis.readInt();
					
					this.ModifiedBy = readString(dis);
					
					this.CreatedDate = readDate(dis);
					
					this.LastModified = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Enabled = null;
           				} else {
           			    	this.Enabled = dis.readBoolean();
           				}
					
						this.UniqueModeratorID = (Object) dis.readObject();
					
						this.UserID = readInteger(dis);
					
					this.WebMeetingID = readString(dis);
					
						this.omnovia_room_id = readInteger(dis);
					
					this.seevogh_meeting_url = readString(dis);
					
					this.SeeVoghMeetingID = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ID);
					
					// String
				
						writeString(this.WholesalerID,dos);
					
					// int
				
		            	dos.writeInt(this.CustomerID);
					
					// String
				
						writeString(this.PriCustomerNumber,dos);
					
					// String
				
						writeString(this.SecCustomerNumber,dos);
					
					// String
				
						writeString(this.ExternalModeratorNumber,dos);
					
					// String
				
						writeString(this.ModeratorCode,dos);
					
					// String
				
						writeString(this.PassCode,dos);
					
					// String
				
						writeString(this.Description,dos);
					
					// int
				
		            	dos.writeInt(this.DepartmentID);
					
					// String
				
						writeString(this.ModifiedBy,dos);
					
					// java.util.Date
				
						writeDate(this.CreatedDate,dos);
					
					// java.util.Date
				
						writeDate(this.LastModified,dos);
					
					// Boolean
				
						if(this.Enabled == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.Enabled);
		            	}
					
					// Object
				
       			    	dos.writeObject(this.UniqueModeratorID);
					
					// Integer
				
						writeInteger(this.UserID,dos);
					
					// String
				
						writeString(this.WebMeetingID,dos);
					
					// Integer
				
						writeInteger(this.omnovia_room_id,dos);
					
					// String
				
						writeString(this.seevogh_meeting_url,dos);
					
					// String
				
						writeString(this.SeeVoghMeetingID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",WholesalerID="+WholesalerID);
		sb.append(",CustomerID="+String.valueOf(CustomerID));
		sb.append(",PriCustomerNumber="+PriCustomerNumber);
		sb.append(",SecCustomerNumber="+SecCustomerNumber);
		sb.append(",ExternalModeratorNumber="+ExternalModeratorNumber);
		sb.append(",ModeratorCode="+ModeratorCode);
		sb.append(",PassCode="+PassCode);
		sb.append(",Description="+Description);
		sb.append(",DepartmentID="+String.valueOf(DepartmentID));
		sb.append(",ModifiedBy="+ModifiedBy);
		sb.append(",CreatedDate="+String.valueOf(CreatedDate));
		sb.append(",LastModified="+String.valueOf(LastModified));
		sb.append(",Enabled="+String.valueOf(Enabled));
		sb.append(",UniqueModeratorID="+String.valueOf(UniqueModeratorID));
		sb.append(",UserID="+String.valueOf(UserID));
		sb.append(",WebMeetingID="+WebMeetingID);
		sb.append(",omnovia_room_id="+String.valueOf(omnovia_room_id));
		sb.append(",seevogh_meeting_url="+seevogh_meeting_url);
		sb.append(",SeeVoghMeetingID="+SeeVoghMeetingID);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row18Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row28Struct implements routines.system.IPersistableRow<row28Struct> {
    final static byte[] commonByteArrayLock_IMPORTINGEVMDATA_ImportingEVM = new byte[0];
    static byte[] commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int ID;

				public int getID () {
					return this.ID;
				}
				
			    public String WholesalerID;

				public String getWholesalerID () {
					return this.WholesalerID;
				}
				
			    public int CustomerID;

				public int getCustomerID () {
					return this.CustomerID;
				}
				
			    public String PriCustomerNumber;

				public String getPriCustomerNumber () {
					return this.PriCustomerNumber;
				}
				
			    public String SecCustomerNumber;

				public String getSecCustomerNumber () {
					return this.SecCustomerNumber;
				}
				
			    public String ExternalModeratorNumber;

				public String getExternalModeratorNumber () {
					return this.ExternalModeratorNumber;
				}
				
			    public String ModeratorCode;

				public String getModeratorCode () {
					return this.ModeratorCode;
				}
				
			    public String PassCode;

				public String getPassCode () {
					return this.PassCode;
				}
				
			    public String Description;

				public String getDescription () {
					return this.Description;
				}
				
			    public int DepartmentID;

				public int getDepartmentID () {
					return this.DepartmentID;
				}
				
			    public String ModifiedBy;

				public String getModifiedBy () {
					return this.ModifiedBy;
				}
				
			    public java.util.Date CreatedDate;

				public java.util.Date getCreatedDate () {
					return this.CreatedDate;
				}
				
			    public java.util.Date LastModified;

				public java.util.Date getLastModified () {
					return this.LastModified;
				}
				
			    public Boolean Enabled;

				public Boolean getEnabled () {
					return this.Enabled;
				}
				
			    public Object UniqueModeratorID;

				public Object getUniqueModeratorID () {
					return this.UniqueModeratorID;
				}
				
			    public Integer UserID;

				public Integer getUserID () {
					return this.UserID;
				}
				
			    public String WebMeetingID;

				public String getWebMeetingID () {
					return this.WebMeetingID;
				}
				
			    public Integer omnovia_room_id;

				public Integer getOmnovia_room_id () {
					return this.omnovia_room_id;
				}
				
			    public String seevogh_meeting_url;

				public String getSeevogh_meeting_url () {
					return this.seevogh_meeting_url;
				}
				
			    public String SeeVoghMeetingID;

				public String getSeeVoghMeetingID () {
					return this.SeeVoghMeetingID;
				}
				
			    public String errorCode;

				public String getErrorCode () {
					return this.errorCode;
				}
				
			    public String errorMessage;

				public String getErrorMessage () {
					return this.errorMessage;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.ID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row28Struct other = (row28Struct) obj;
		
						if (this.ID != other.ID)
							return false;
					

		return true;
    }

	public void copyDataTo(row28Struct other) {

		other.ID = this.ID;
	            other.WholesalerID = this.WholesalerID;
	            other.CustomerID = this.CustomerID;
	            other.PriCustomerNumber = this.PriCustomerNumber;
	            other.SecCustomerNumber = this.SecCustomerNumber;
	            other.ExternalModeratorNumber = this.ExternalModeratorNumber;
	            other.ModeratorCode = this.ModeratorCode;
	            other.PassCode = this.PassCode;
	            other.Description = this.Description;
	            other.DepartmentID = this.DepartmentID;
	            other.ModifiedBy = this.ModifiedBy;
	            other.CreatedDate = this.CreatedDate;
	            other.LastModified = this.LastModified;
	            other.Enabled = this.Enabled;
	            other.UniqueModeratorID = this.UniqueModeratorID;
	            other.UserID = this.UserID;
	            other.WebMeetingID = this.WebMeetingID;
	            other.omnovia_room_id = this.omnovia_room_id;
	            other.seevogh_meeting_url = this.seevogh_meeting_url;
	            other.SeeVoghMeetingID = this.SeeVoghMeetingID;
	            other.errorCode = this.errorCode;
	            other.errorMessage = this.errorMessage;
	            
	}

	public void copyKeysDataTo(row28Struct other) {

		other.ID = this.ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IMPORTINGEVMDATA_ImportingEVM.length) {
				if(length < 1024 && commonByteArray_IMPORTINGEVMDATA_ImportingEVM.length == 0) {
   					commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[1024];
				} else {
   					commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IMPORTINGEVMDATA_ImportingEVM, 0, length);
			strReturn = new String(commonByteArray_IMPORTINGEVMDATA_ImportingEVM, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IMPORTINGEVMDATA_ImportingEVM) {

        	try {

        		int length = 0;
		
			        this.ID = dis.readInt();
					
					this.WholesalerID = readString(dis);
					
			        this.CustomerID = dis.readInt();
					
					this.PriCustomerNumber = readString(dis);
					
					this.SecCustomerNumber = readString(dis);
					
					this.ExternalModeratorNumber = readString(dis);
					
					this.ModeratorCode = readString(dis);
					
					this.PassCode = readString(dis);
					
					this.Description = readString(dis);
					
			        this.DepartmentID = dis.readInt();
					
					this.ModifiedBy = readString(dis);
					
					this.CreatedDate = readDate(dis);
					
					this.LastModified = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Enabled = null;
           				} else {
           			    	this.Enabled = dis.readBoolean();
           				}
					
						this.UniqueModeratorID = (Object) dis.readObject();
					
						this.UserID = readInteger(dis);
					
					this.WebMeetingID = readString(dis);
					
						this.omnovia_room_id = readInteger(dis);
					
					this.seevogh_meeting_url = readString(dis);
					
					this.SeeVoghMeetingID = readString(dis);
					
					this.errorCode = readString(dis);
					
					this.errorMessage = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ID);
					
					// String
				
						writeString(this.WholesalerID,dos);
					
					// int
				
		            	dos.writeInt(this.CustomerID);
					
					// String
				
						writeString(this.PriCustomerNumber,dos);
					
					// String
				
						writeString(this.SecCustomerNumber,dos);
					
					// String
				
						writeString(this.ExternalModeratorNumber,dos);
					
					// String
				
						writeString(this.ModeratorCode,dos);
					
					// String
				
						writeString(this.PassCode,dos);
					
					// String
				
						writeString(this.Description,dos);
					
					// int
				
		            	dos.writeInt(this.DepartmentID);
					
					// String
				
						writeString(this.ModifiedBy,dos);
					
					// java.util.Date
				
						writeDate(this.CreatedDate,dos);
					
					// java.util.Date
				
						writeDate(this.LastModified,dos);
					
					// Boolean
				
						if(this.Enabled == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.Enabled);
		            	}
					
					// Object
				
       			    	dos.writeObject(this.UniqueModeratorID);
					
					// Integer
				
						writeInteger(this.UserID,dos);
					
					// String
				
						writeString(this.WebMeetingID,dos);
					
					// Integer
				
						writeInteger(this.omnovia_room_id,dos);
					
					// String
				
						writeString(this.seevogh_meeting_url,dos);
					
					// String
				
						writeString(this.SeeVoghMeetingID,dos);
					
					// String
				
						writeString(this.errorCode,dos);
					
					// String
				
						writeString(this.errorMessage,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",WholesalerID="+WholesalerID);
		sb.append(",CustomerID="+String.valueOf(CustomerID));
		sb.append(",PriCustomerNumber="+PriCustomerNumber);
		sb.append(",SecCustomerNumber="+SecCustomerNumber);
		sb.append(",ExternalModeratorNumber="+ExternalModeratorNumber);
		sb.append(",ModeratorCode="+ModeratorCode);
		sb.append(",PassCode="+PassCode);
		sb.append(",Description="+Description);
		sb.append(",DepartmentID="+String.valueOf(DepartmentID));
		sb.append(",ModifiedBy="+ModifiedBy);
		sb.append(",CreatedDate="+String.valueOf(CreatedDate));
		sb.append(",LastModified="+String.valueOf(LastModified));
		sb.append(",Enabled="+String.valueOf(Enabled));
		sb.append(",UniqueModeratorID="+String.valueOf(UniqueModeratorID));
		sb.append(",UserID="+String.valueOf(UserID));
		sb.append(",WebMeetingID="+WebMeetingID);
		sb.append(",omnovia_room_id="+String.valueOf(omnovia_room_id));
		sb.append(",seevogh_meeting_url="+seevogh_meeting_url);
		sb.append(",SeeVoghMeetingID="+SeeVoghMeetingID);
		sb.append(",errorCode="+errorCode);
		sb.append(",errorMessage="+errorMessage);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row28Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class AddNewModeratorStruct implements routines.system.IPersistableRow<AddNewModeratorStruct> {
    final static byte[] commonByteArrayLock_IMPORTINGEVMDATA_ImportingEVM = new byte[0];
    static byte[] commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int ID;

				public int getID () {
					return this.ID;
				}
				
			    public String WholesalerID;

				public String getWholesalerID () {
					return this.WholesalerID;
				}
				
			    public int CustomerID;

				public int getCustomerID () {
					return this.CustomerID;
				}
				
			    public String PriCustomerNumber;

				public String getPriCustomerNumber () {
					return this.PriCustomerNumber;
				}
				
			    public String SecCustomerNumber;

				public String getSecCustomerNumber () {
					return this.SecCustomerNumber;
				}
				
			    public String ExternalModeratorNumber;

				public String getExternalModeratorNumber () {
					return this.ExternalModeratorNumber;
				}
				
			    public String ModeratorCode;

				public String getModeratorCode () {
					return this.ModeratorCode;
				}
				
			    public String PassCode;

				public String getPassCode () {
					return this.PassCode;
				}
				
			    public String Description;

				public String getDescription () {
					return this.Description;
				}
				
			    public int DepartmentID;

				public int getDepartmentID () {
					return this.DepartmentID;
				}
				
			    public String ModifiedBy;

				public String getModifiedBy () {
					return this.ModifiedBy;
				}
				
			    public java.util.Date CreatedDate;

				public java.util.Date getCreatedDate () {
					return this.CreatedDate;
				}
				
			    public java.util.Date LastModified;

				public java.util.Date getLastModified () {
					return this.LastModified;
				}
				
			    public Boolean Enabled;

				public Boolean getEnabled () {
					return this.Enabled;
				}
				
			    public Object UniqueModeratorID;

				public Object getUniqueModeratorID () {
					return this.UniqueModeratorID;
				}
				
			    public Integer UserID;

				public Integer getUserID () {
					return this.UserID;
				}
				
			    public String WebMeetingID;

				public String getWebMeetingID () {
					return this.WebMeetingID;
				}
				
			    public Integer omnovia_room_id;

				public Integer getOmnovia_room_id () {
					return this.omnovia_room_id;
				}
				
			    public String seevogh_meeting_url;

				public String getSeevogh_meeting_url () {
					return this.seevogh_meeting_url;
				}
				
			    public String SeeVoghMeetingID;

				public String getSeeVoghMeetingID () {
					return this.SeeVoghMeetingID;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.ID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final AddNewModeratorStruct other = (AddNewModeratorStruct) obj;
		
						if (this.ID != other.ID)
							return false;
					

		return true;
    }

	public void copyDataTo(AddNewModeratorStruct other) {

		other.ID = this.ID;
	            other.WholesalerID = this.WholesalerID;
	            other.CustomerID = this.CustomerID;
	            other.PriCustomerNumber = this.PriCustomerNumber;
	            other.SecCustomerNumber = this.SecCustomerNumber;
	            other.ExternalModeratorNumber = this.ExternalModeratorNumber;
	            other.ModeratorCode = this.ModeratorCode;
	            other.PassCode = this.PassCode;
	            other.Description = this.Description;
	            other.DepartmentID = this.DepartmentID;
	            other.ModifiedBy = this.ModifiedBy;
	            other.CreatedDate = this.CreatedDate;
	            other.LastModified = this.LastModified;
	            other.Enabled = this.Enabled;
	            other.UniqueModeratorID = this.UniqueModeratorID;
	            other.UserID = this.UserID;
	            other.WebMeetingID = this.WebMeetingID;
	            other.omnovia_room_id = this.omnovia_room_id;
	            other.seevogh_meeting_url = this.seevogh_meeting_url;
	            other.SeeVoghMeetingID = this.SeeVoghMeetingID;
	            
	}

	public void copyKeysDataTo(AddNewModeratorStruct other) {

		other.ID = this.ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IMPORTINGEVMDATA_ImportingEVM.length) {
				if(length < 1024 && commonByteArray_IMPORTINGEVMDATA_ImportingEVM.length == 0) {
   					commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[1024];
				} else {
   					commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IMPORTINGEVMDATA_ImportingEVM, 0, length);
			strReturn = new String(commonByteArray_IMPORTINGEVMDATA_ImportingEVM, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IMPORTINGEVMDATA_ImportingEVM) {

        	try {

        		int length = 0;
		
			        this.ID = dis.readInt();
					
					this.WholesalerID = readString(dis);
					
			        this.CustomerID = dis.readInt();
					
					this.PriCustomerNumber = readString(dis);
					
					this.SecCustomerNumber = readString(dis);
					
					this.ExternalModeratorNumber = readString(dis);
					
					this.ModeratorCode = readString(dis);
					
					this.PassCode = readString(dis);
					
					this.Description = readString(dis);
					
			        this.DepartmentID = dis.readInt();
					
					this.ModifiedBy = readString(dis);
					
					this.CreatedDate = readDate(dis);
					
					this.LastModified = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Enabled = null;
           				} else {
           			    	this.Enabled = dis.readBoolean();
           				}
					
						this.UniqueModeratorID = (Object) dis.readObject();
					
						this.UserID = readInteger(dis);
					
					this.WebMeetingID = readString(dis);
					
						this.omnovia_room_id = readInteger(dis);
					
					this.seevogh_meeting_url = readString(dis);
					
					this.SeeVoghMeetingID = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ID);
					
					// String
				
						writeString(this.WholesalerID,dos);
					
					// int
				
		            	dos.writeInt(this.CustomerID);
					
					// String
				
						writeString(this.PriCustomerNumber,dos);
					
					// String
				
						writeString(this.SecCustomerNumber,dos);
					
					// String
				
						writeString(this.ExternalModeratorNumber,dos);
					
					// String
				
						writeString(this.ModeratorCode,dos);
					
					// String
				
						writeString(this.PassCode,dos);
					
					// String
				
						writeString(this.Description,dos);
					
					// int
				
		            	dos.writeInt(this.DepartmentID);
					
					// String
				
						writeString(this.ModifiedBy,dos);
					
					// java.util.Date
				
						writeDate(this.CreatedDate,dos);
					
					// java.util.Date
				
						writeDate(this.LastModified,dos);
					
					// Boolean
				
						if(this.Enabled == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.Enabled);
		            	}
					
					// Object
				
       			    	dos.writeObject(this.UniqueModeratorID);
					
					// Integer
				
						writeInteger(this.UserID,dos);
					
					// String
				
						writeString(this.WebMeetingID,dos);
					
					// Integer
				
						writeInteger(this.omnovia_room_id,dos);
					
					// String
				
						writeString(this.seevogh_meeting_url,dos);
					
					// String
				
						writeString(this.SeeVoghMeetingID,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",WholesalerID="+WholesalerID);
		sb.append(",CustomerID="+String.valueOf(CustomerID));
		sb.append(",PriCustomerNumber="+PriCustomerNumber);
		sb.append(",SecCustomerNumber="+SecCustomerNumber);
		sb.append(",ExternalModeratorNumber="+ExternalModeratorNumber);
		sb.append(",ModeratorCode="+ModeratorCode);
		sb.append(",PassCode="+PassCode);
		sb.append(",Description="+Description);
		sb.append(",DepartmentID="+String.valueOf(DepartmentID));
		sb.append(",ModifiedBy="+ModifiedBy);
		sb.append(",CreatedDate="+String.valueOf(CreatedDate));
		sb.append(",LastModified="+String.valueOf(LastModified));
		sb.append(",Enabled="+String.valueOf(Enabled));
		sb.append(",UniqueModeratorID="+String.valueOf(UniqueModeratorID));
		sb.append(",UserID="+String.valueOf(UserID));
		sb.append(",WebMeetingID="+WebMeetingID);
		sb.append(",omnovia_room_id="+String.valueOf(omnovia_room_id));
		sb.append(",seevogh_meeting_url="+seevogh_meeting_url);
		sb.append(",SeeVoghMeetingID="+SeeVoghMeetingID);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(AddNewModeratorStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row16Struct implements routines.system.IPersistableRow<row16Struct> {
    final static byte[] commonByteArrayLock_IMPORTINGEVMDATA_ImportingEVM = new byte[0];
    static byte[] commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[0];

	
			    public String CompanyName;

				public String getCompanyName () {
					return this.CompanyName;
				}
				
			    public String ModeratorCode;

				public String getModeratorCode () {
					return this.ModeratorCode;
				}
				
			    public String ParticipantCode;

				public String getParticipantCode () {
					return this.ParticipantCode;
				}
				
			    public String ModeratorName;

				public String getModeratorName () {
					return this.ModeratorName;
				}
				
			    public String Email;

				public String getEmail () {
					return this.Email;
				}
				
			    public String Password;

				public String getPassword () {
					return this.Password;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IMPORTINGEVMDATA_ImportingEVM.length) {
				if(length < 1024 && commonByteArray_IMPORTINGEVMDATA_ImportingEVM.length == 0) {
   					commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[1024];
				} else {
   					commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IMPORTINGEVMDATA_ImportingEVM, 0, length);
			strReturn = new String(commonByteArray_IMPORTINGEVMDATA_ImportingEVM, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IMPORTINGEVMDATA_ImportingEVM) {

        	try {

        		int length = 0;
		
					this.CompanyName = readString(dis);
					
					this.ModeratorCode = readString(dis);
					
					this.ParticipantCode = readString(dis);
					
					this.ModeratorName = readString(dis);
					
					this.Email = readString(dis);
					
					this.Password = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CompanyName,dos);
					
					// String
				
						writeString(this.ModeratorCode,dos);
					
					// String
				
						writeString(this.ParticipantCode,dos);
					
					// String
				
						writeString(this.ModeratorName,dos);
					
					// String
				
						writeString(this.Email,dos);
					
					// String
				
						writeString(this.Password,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CompanyName="+CompanyName);
		sb.append(",ModeratorCode="+ModeratorCode);
		sb.append(",ParticipantCode="+ParticipantCode);
		sb.append(",ModeratorName="+ModeratorName);
		sb.append(",Email="+Email);
		sb.append(",Password="+Password);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row16Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row14Struct implements routines.system.IPersistableRow<row14Struct> {
    final static byte[] commonByteArrayLock_IMPORTINGEVMDATA_ImportingEVM = new byte[0];
    static byte[] commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[0];

	
			    public String CompanyName;

				public String getCompanyName () {
					return this.CompanyName;
				}
				
			    public String ModeratorCode;

				public String getModeratorCode () {
					return this.ModeratorCode;
				}
				
			    public String ParticipantCode;

				public String getParticipantCode () {
					return this.ParticipantCode;
				}
				
			    public String ModeratorName;

				public String getModeratorName () {
					return this.ModeratorName;
				}
				
			    public String Email;

				public String getEmail () {
					return this.Email;
				}
				
			    public String Password;

				public String getPassword () {
					return this.Password;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IMPORTINGEVMDATA_ImportingEVM.length) {
				if(length < 1024 && commonByteArray_IMPORTINGEVMDATA_ImportingEVM.length == 0) {
   					commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[1024];
				} else {
   					commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IMPORTINGEVMDATA_ImportingEVM, 0, length);
			strReturn = new String(commonByteArray_IMPORTINGEVMDATA_ImportingEVM, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IMPORTINGEVMDATA_ImportingEVM) {

        	try {

        		int length = 0;
		
					this.CompanyName = readString(dis);
					
					this.ModeratorCode = readString(dis);
					
					this.ParticipantCode = readString(dis);
					
					this.ModeratorName = readString(dis);
					
					this.Email = readString(dis);
					
					this.Password = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CompanyName,dos);
					
					// String
				
						writeString(this.ModeratorCode,dos);
					
					// String
				
						writeString(this.ParticipantCode,dos);
					
					// String
				
						writeString(this.ModeratorName,dos);
					
					// String
				
						writeString(this.Email,dos);
					
					// String
				
						writeString(this.Password,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CompanyName="+CompanyName);
		sb.append(",ModeratorCode="+ModeratorCode);
		sb.append(",ParticipantCode="+ParticipantCode);
		sb.append(",ModeratorName="+ModeratorName);
		sb.append(",Email="+Email);
		sb.append(",Password="+Password);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row14Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tFileInputDelimited_3Struct implements routines.system.IPersistableRow<after_tFileInputDelimited_3Struct> {
    final static byte[] commonByteArrayLock_IMPORTINGEVMDATA_ImportingEVM = new byte[0];
    static byte[] commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[0];

	
			    public String CompanyName;

				public String getCompanyName () {
					return this.CompanyName;
				}
				
			    public String ModeratorCode;

				public String getModeratorCode () {
					return this.ModeratorCode;
				}
				
			    public String ParticipantCode;

				public String getParticipantCode () {
					return this.ParticipantCode;
				}
				
			    public String ModeratorName;

				public String getModeratorName () {
					return this.ModeratorName;
				}
				
			    public String Email;

				public String getEmail () {
					return this.Email;
				}
				
			    public String Password;

				public String getPassword () {
					return this.Password;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IMPORTINGEVMDATA_ImportingEVM.length) {
				if(length < 1024 && commonByteArray_IMPORTINGEVMDATA_ImportingEVM.length == 0) {
   					commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[1024];
				} else {
   					commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IMPORTINGEVMDATA_ImportingEVM, 0, length);
			strReturn = new String(commonByteArray_IMPORTINGEVMDATA_ImportingEVM, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IMPORTINGEVMDATA_ImportingEVM) {

        	try {

        		int length = 0;
		
					this.CompanyName = readString(dis);
					
					this.ModeratorCode = readString(dis);
					
					this.ParticipantCode = readString(dis);
					
					this.ModeratorName = readString(dis);
					
					this.Email = readString(dis);
					
					this.Password = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CompanyName,dos);
					
					// String
				
						writeString(this.ModeratorCode,dos);
					
					// String
				
						writeString(this.ParticipantCode,dos);
					
					// String
				
						writeString(this.ModeratorName,dos);
					
					// String
				
						writeString(this.Email,dos);
					
					// String
				
						writeString(this.Password,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CompanyName="+CompanyName);
		sb.append(",ModeratorCode="+ModeratorCode);
		sb.append(",ParticipantCode="+ParticipantCode);
		sb.append(",ModeratorName="+ModeratorName);
		sb.append(",Email="+Email);
		sb.append(",Password="+Password);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tFileInputDelimited_3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_6Process(globalMap);
		tDBInput_3Process(globalMap);
		tDBInput_9Process(globalMap);

		row14Struct row14 = new row14Struct();
row14Struct row16 = row14;
AddNewModeratorStruct AddNewModerator = new AddNewModeratorStruct();
row18Struct row18 = new row18Struct();
row28Struct row28 = new row28Struct();







	
	/**
	 * [tLogRow_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_12", false);
		start_Hash.put("tLogRow_12", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_12";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("row18"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tLogRow_12 = 0;
		

	///////////////////////
	
         class Util_tLogRow_12 {

        String[] des_top = { ".", ".", "-", "+" };

        String[] des_head = { "|=", "=|", "-", "+" };

        String[] des_bottom = { "'", "'", "-", "+" };

        String name="";

        java.util.List<String[]> list = new java.util.ArrayList<String[]>();

        int[] colLengths = new int[20];

        public void addRow(String[] row) {

            for (int i = 0; i < 20; i++) {
                if (row[i]!=null) {
                  colLengths[i] = Math.max(colLengths[i], row[i].length());
                }
            }
            list.add(row);
        }

        public void setTableName(String name) {

            this.name = name;
        }

            public StringBuilder format() {
            
                StringBuilder sb = new StringBuilder();
  
            
                    sb.append(print(des_top));
    
                    int totals = 0;
                    for (int i = 0; i < colLengths.length; i++) {
                        totals = totals + colLengths[i];
                    }
    
                    // name
                    sb.append("|");
                    int k = 0;
                    for (k = 0; k < (totals + 19 - name.length()) / 2; k++) {
                        sb.append(' ');
                    }
                    sb.append(name);
                    for (int i = 0; i < totals + 19 - name.length() - k; i++) {
                        sb.append(' ');
                    }
                    sb.append("|\n");

                    // head and rows
                    sb.append(print(des_head));
                    for (int i = 0; i < list.size(); i++) {
    
                        String[] row = list.get(i);
    
                        java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());
                        
                        StringBuilder sbformat = new StringBuilder();                                             
        			        sbformat.append("|%1$-");
        			        sbformat.append(colLengths[0]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%2$-");
        			        sbformat.append(colLengths[1]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%3$-");
        			        sbformat.append(colLengths[2]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%4$-");
        			        sbformat.append(colLengths[3]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%5$-");
        			        sbformat.append(colLengths[4]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%6$-");
        			        sbformat.append(colLengths[5]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%7$-");
        			        sbformat.append(colLengths[6]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%8$-");
        			        sbformat.append(colLengths[7]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%9$-");
        			        sbformat.append(colLengths[8]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%10$-");
        			        sbformat.append(colLengths[9]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%11$-");
        			        sbformat.append(colLengths[10]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%12$-");
        			        sbformat.append(colLengths[11]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%13$-");
        			        sbformat.append(colLengths[12]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%14$-");
        			        sbformat.append(colLengths[13]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%15$-");
        			        sbformat.append(colLengths[14]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%16$-");
        			        sbformat.append(colLengths[15]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%17$-");
        			        sbformat.append(colLengths[16]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%18$-");
        			        sbformat.append(colLengths[17]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%19$-");
        			        sbformat.append(colLengths[18]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%20$-");
        			        sbformat.append(colLengths[19]);
        			        sbformat.append("s");
        			                      
                        sbformat.append("|\n");                    
       
                        formatter.format(sbformat.toString(), (Object[])row);	
                                
                        sb.append(formatter.toString());
                        if (i == 0)
                            sb.append(print(des_head)); // print the head
                    }
    
                    // end
                    sb.append(print(des_bottom));
                    return sb;
                }
            

            private StringBuilder print(String[] fillChars) {
                StringBuilder sb = new StringBuilder();
                //first column
                sb.append(fillChars[0]);                
                    for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);	                

                    for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[4] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[5] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[6] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[7] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[8] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[9] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[10] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[11] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[12] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[13] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[14] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[15] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[16] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[17] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[18] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                
                    //last column
                    for (int i = 0; i < colLengths[19] - fillChars[1].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }         
                sb.append(fillChars[1]);
                sb.append("\n");               
                return sb;
            }
            
            public boolean isTableEmpty(){
            	if (list.size() > 1)
            		return false;
            	return true;
            }
        }
        Util_tLogRow_12 util_tLogRow_12 = new Util_tLogRow_12();
        util_tLogRow_12.setTableName("tLogRow_12");
        util_tLogRow_12.addRow(new String[]{"ID","WholesalerID","CustomerID","PriCustomerNumber","SecCustomerNumber","ExternalModeratorNumber","ModeratorCode","PassCode","Description","DepartmentID","ModifiedBy","CreatedDate","LastModified","Enabled","UniqueModeratorID","UserID","WebMeetingID","omnovia_room_id","seevogh_meeting_url","SeeVoghMeetingID",});        
 		StringBuilder strBuffer_tLogRow_12 = null;
		int nb_line_tLogRow_12 = 0;
///////////////////////    			



 



/**
 * [tLogRow_12 begin ] stop
 */




	
	/**
	 * [tLogRow_20 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_20", false);
		start_Hash.put("tLogRow_20", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_20";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("row28"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tLogRow_20 = 0;
		

	///////////////////////
	
         class Util_tLogRow_20 {

        String[] des_top = { ".", ".", "-", "+" };

        String[] des_head = { "|=", "=|", "-", "+" };

        String[] des_bottom = { "'", "'", "-", "+" };

        String name="";

        java.util.List<String[]> list = new java.util.ArrayList<String[]>();

        int[] colLengths = new int[22];

        public void addRow(String[] row) {

            for (int i = 0; i < 22; i++) {
                if (row[i]!=null) {
                  colLengths[i] = Math.max(colLengths[i], row[i].length());
                }
            }
            list.add(row);
        }

        public void setTableName(String name) {

            this.name = name;
        }

            public StringBuilder format() {
            
                StringBuilder sb = new StringBuilder();
  
            
                    sb.append(print(des_top));
    
                    int totals = 0;
                    for (int i = 0; i < colLengths.length; i++) {
                        totals = totals + colLengths[i];
                    }
    
                    // name
                    sb.append("|");
                    int k = 0;
                    for (k = 0; k < (totals + 21 - name.length()) / 2; k++) {
                        sb.append(' ');
                    }
                    sb.append(name);
                    for (int i = 0; i < totals + 21 - name.length() - k; i++) {
                        sb.append(' ');
                    }
                    sb.append("|\n");

                    // head and rows
                    sb.append(print(des_head));
                    for (int i = 0; i < list.size(); i++) {
    
                        String[] row = list.get(i);
    
                        java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());
                        
                        StringBuilder sbformat = new StringBuilder();                                             
        			        sbformat.append("|%1$-");
        			        sbformat.append(colLengths[0]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%2$-");
        			        sbformat.append(colLengths[1]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%3$-");
        			        sbformat.append(colLengths[2]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%4$-");
        			        sbformat.append(colLengths[3]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%5$-");
        			        sbformat.append(colLengths[4]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%6$-");
        			        sbformat.append(colLengths[5]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%7$-");
        			        sbformat.append(colLengths[6]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%8$-");
        			        sbformat.append(colLengths[7]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%9$-");
        			        sbformat.append(colLengths[8]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%10$-");
        			        sbformat.append(colLengths[9]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%11$-");
        			        sbformat.append(colLengths[10]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%12$-");
        			        sbformat.append(colLengths[11]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%13$-");
        			        sbformat.append(colLengths[12]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%14$-");
        			        sbformat.append(colLengths[13]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%15$-");
        			        sbformat.append(colLengths[14]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%16$-");
        			        sbformat.append(colLengths[15]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%17$-");
        			        sbformat.append(colLengths[16]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%18$-");
        			        sbformat.append(colLengths[17]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%19$-");
        			        sbformat.append(colLengths[18]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%20$-");
        			        sbformat.append(colLengths[19]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%21$-");
        			        sbformat.append(colLengths[20]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%22$-");
        			        sbformat.append(colLengths[21]);
        			        sbformat.append("s");
        			                      
                        sbformat.append("|\n");                    
       
                        formatter.format(sbformat.toString(), (Object[])row);	
                                
                        sb.append(formatter.toString());
                        if (i == 0)
                            sb.append(print(des_head)); // print the head
                    }
    
                    // end
                    sb.append(print(des_bottom));
                    return sb;
                }
            

            private StringBuilder print(String[] fillChars) {
                StringBuilder sb = new StringBuilder();
                //first column
                sb.append(fillChars[0]);                
                    for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);	                

                    for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[4] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[5] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[6] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[7] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[8] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[9] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[10] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[11] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[12] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[13] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[14] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[15] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[16] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[17] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[18] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[19] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[20] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                
                    //last column
                    for (int i = 0; i < colLengths[21] - fillChars[1].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }         
                sb.append(fillChars[1]);
                sb.append("\n");               
                return sb;
            }
            
            public boolean isTableEmpty(){
            	if (list.size() > 1)
            		return false;
            	return true;
            }
        }
        Util_tLogRow_20 util_tLogRow_20 = new Util_tLogRow_20();
        util_tLogRow_20.setTableName("tLogRow_20");
        util_tLogRow_20.addRow(new String[]{"ID","WholesalerID","CustomerID","PriCustomerNumber","SecCustomerNumber","ExternalModeratorNumber","ModeratorCode","PassCode","Description","DepartmentID","ModifiedBy","CreatedDate","LastModified","Enabled","UniqueModeratorID","UserID","WebMeetingID","omnovia_room_id","seevogh_meeting_url","SeeVoghMeetingID","errorCode","errorMessage",});        
 		StringBuilder strBuffer_tLogRow_20 = null;
		int nb_line_tLogRow_20 = 0;
///////////////////////    			



 



/**
 * [tLogRow_20 begin ] stop
 */



	
	/**
	 * [tDBOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_3", false);
		start_Hash.put("tDBOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_3";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("AddNewModerator"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tDBOutput_3 = 0;
		



int nb_line_tDBOutput_3 = 0;
int nb_line_update_tDBOutput_3 = 0;
int nb_line_inserted_tDBOutput_3 = 0;
int nb_line_deleted_tDBOutput_3 = 0;
int nb_line_rejected_tDBOutput_3 = 0;

int deletedCount_tDBOutput_3=0;
int updatedCount_tDBOutput_3=0;
int insertedCount_tDBOutput_3=0;
int rejectedCount_tDBOutput_3=0;
String dbschema_tDBOutput_3 = null;
String tableName_tDBOutput_3 = null;
boolean whetherReject_tDBOutput_3 = false;

java.util.Calendar calendar_tDBOutput_3 = java.util.Calendar.getInstance();
long year1_tDBOutput_3 = TalendDate.parseDate("yyyy-MM-dd","0001-01-01").getTime();
long year2_tDBOutput_3 = TalendDate.parseDate("yyyy-MM-dd","1753-01-01").getTime();
long year10000_tDBOutput_3 = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss","9999-12-31 24:00:00").getTime();
long date_tDBOutput_3;

java.util.Calendar calendar_datetimeoffset_tDBOutput_3 = java.util.Calendar.getInstance(java.util.TimeZone.getTimeZone("UTC"));

        int insertKeyCount_tDBOutput_3 = 1;
        if(insertKeyCount_tDBOutput_3 < 1) {
            throw new RuntimeException("For insert if not exist, Schema must have a key");
        }
	
java.sql.Connection conn_tDBOutput_3 = null;
String dbUser_tDBOutput_3 = null;
	dbschema_tDBOutput_3 = (String)globalMap.get("dbschema_tDBConnection_1");
	conn_tDBOutput_3 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	

if(dbschema_tDBOutput_3 == null || dbschema_tDBOutput_3.trim().length() == 0) {
    tableName_tDBOutput_3 = "Moderator";
} else {
    tableName_tDBOutput_3 = dbschema_tDBOutput_3 + "].[" + "Moderator";
}
	int count_tDBOutput_3=0;

        java.sql.PreparedStatement pstmt_tDBOutput_3 = conn_tDBOutput_3.prepareStatement("SELECT COUNT(1) FROM [" + tableName_tDBOutput_3 + "] WHERE [ID] = ?");
        resourceMap.put("pstmt_tDBOutput_3", pstmt_tDBOutput_3);
        String insert_tDBOutput_3 = "INSERT INTO [" + tableName_tDBOutput_3 + "] ([ID],[WholesalerID],[CustomerID],[PriCustomerNumber],[SecCustomerNumber],[ExternalModeratorNumber],[ModeratorCode],[PassCode],[Description],[DepartmentID],[ModifiedBy],[CreatedDate],[LastModified],[Enabled],[UniqueModeratorID],[UserID],[WebMeetingID],[omnovia_room_id],[seevogh_meeting_url],[SeeVoghMeetingID]) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
        java.sql.PreparedStatement pstmtInsert_tDBOutput_3 = conn_tDBOutput_3.prepareStatement(insert_tDBOutput_3);
        resourceMap.put("pstmtInsert_tDBOutput_3", pstmtInsert_tDBOutput_3);
 	boolean isShareIdentity_tDBOutput_3 = globalMap.get("shareIdentitySetting_tDBConnection_1") != null && (Boolean)globalMap.get("shareIdentitySetting_tDBConnection_1") == true;
        java.sql.Statement stmt_tDBOutput_3 = conn_tDBOutput_3.createStatement();
	        if ( !isShareIdentity_tDBOutput_3 ) {
	            stmt_tDBOutput_3.execute("SET IDENTITY_INSERT ["+ tableName_tDBOutput_3 +"] ON");
	        }

 



/**
 * [tDBOutput_3 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("row16"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row17Struct> tHash_Lookup_row17 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row17Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row17Struct>) 
					globalMap.get( "tHash_Lookup_row17" ))
					;					
					
	
		tHash_Lookup_row17.initGet();
	

row17Struct row17HashKey = new row17Struct();
row17Struct row17Default = new row17Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row40Struct> tHash_Lookup_row40 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row40Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row40Struct>) 
					globalMap.get( "tHash_Lookup_row40" ))
					;					
					
	

row40Struct row40HashKey = new row40Struct();
row40Struct row40Default = new row40Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) 
					globalMap.get( "tHash_Lookup_row2" ))
					;					
					
	

row2Struct row2HashKey = new row2Struct();
row2Struct row2Default = new row2Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
AddNewModeratorStruct AddNewModerator_tmp = new AddNewModeratorStruct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tLogRow_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_10", false);
		start_Hash.put("tLogRow_10", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_10";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("row14"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tLogRow_10 = 0;
		

	///////////////////////
	
         class Util_tLogRow_10 {

        String[] des_top = { ".", ".", "-", "+" };

        String[] des_head = { "|=", "=|", "-", "+" };

        String[] des_bottom = { "'", "'", "-", "+" };

        String name="";

        java.util.List<String[]> list = new java.util.ArrayList<String[]>();

        int[] colLengths = new int[6];

        public void addRow(String[] row) {

            for (int i = 0; i < 6; i++) {
                if (row[i]!=null) {
                  colLengths[i] = Math.max(colLengths[i], row[i].length());
                }
            }
            list.add(row);
        }

        public void setTableName(String name) {

            this.name = name;
        }

            public StringBuilder format() {
            
                StringBuilder sb = new StringBuilder();
  
            
                    sb.append(print(des_top));
    
                    int totals = 0;
                    for (int i = 0; i < colLengths.length; i++) {
                        totals = totals + colLengths[i];
                    }
    
                    // name
                    sb.append("|");
                    int k = 0;
                    for (k = 0; k < (totals + 5 - name.length()) / 2; k++) {
                        sb.append(' ');
                    }
                    sb.append(name);
                    for (int i = 0; i < totals + 5 - name.length() - k; i++) {
                        sb.append(' ');
                    }
                    sb.append("|\n");

                    // head and rows
                    sb.append(print(des_head));
                    for (int i = 0; i < list.size(); i++) {
    
                        String[] row = list.get(i);
    
                        java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());
                        
                        StringBuilder sbformat = new StringBuilder();                                             
        			        sbformat.append("|%1$-");
        			        sbformat.append(colLengths[0]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%2$-");
        			        sbformat.append(colLengths[1]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%3$-");
        			        sbformat.append(colLengths[2]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%4$-");
        			        sbformat.append(colLengths[3]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%5$-");
        			        sbformat.append(colLengths[4]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%6$-");
        			        sbformat.append(colLengths[5]);
        			        sbformat.append("s");
        			                      
                        sbformat.append("|\n");                    
       
                        formatter.format(sbformat.toString(), (Object[])row);	
                                
                        sb.append(formatter.toString());
                        if (i == 0)
                            sb.append(print(des_head)); // print the head
                    }
    
                    // end
                    sb.append(print(des_bottom));
                    return sb;
                }
            

            private StringBuilder print(String[] fillChars) {
                StringBuilder sb = new StringBuilder();
                //first column
                sb.append(fillChars[0]);                
                    for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);	                

                    for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[4] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                
                    //last column
                    for (int i = 0; i < colLengths[5] - fillChars[1].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }         
                sb.append(fillChars[1]);
                sb.append("\n");               
                return sb;
            }
            
            public boolean isTableEmpty(){
            	if (list.size() > 1)
            		return false;
            	return true;
            }
        }
        Util_tLogRow_10 util_tLogRow_10 = new Util_tLogRow_10();
        util_tLogRow_10.setTableName("ModeratorListLog");
        util_tLogRow_10.addRow(new String[]{"CompanyName","ModeratorCode","ParticipantCode","ModeratorName","Email","Password",});        
 		StringBuilder strBuffer_tLogRow_10 = null;
		int nb_line_tLogRow_10 = 0;
///////////////////////    			



 



/**
 * [tLogRow_10 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_3", false);
		start_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_3";

	
		int tos_count_tFileInputDelimited_3 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_3 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_3 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_3 = null;
				int limit_tFileInputDelimited_3 = -1;
				try{
					
						Object filename_tFileInputDelimited_3 = context.Moderator_File;
						if(filename_tFileInputDelimited_3 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_3 = 0, random_value_tFileInputDelimited_3 = -1;
			if(footer_value_tFileInputDelimited_3 >0 || random_value_tFileInputDelimited_3 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_3 = new org.talend.fileprocess.FileInputDelimited(context.Moderator_File, "ISO-8859-15",",","\n",true,1,0,
									limit_tFileInputDelimited_3
								,-1, false);
						} catch(java.lang.Exception e) {
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_3!=null && fid_tFileInputDelimited_3.nextRecord()) {
						rowstate_tFileInputDelimited_3.reset();
						
			    						row14 = null;			
												
									boolean whetherReject_tFileInputDelimited_3 = false;
									row14 = new row14Struct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_3 = 0;
				
					columnIndexWithD_tFileInputDelimited_3 = 0;
					
							row14.CompanyName = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 1;
					
							row14.ModeratorCode = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 2;
					
							row14.ParticipantCode = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 3;
					
							row14.ModeratorName = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 4;
					
							row14.Email = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 5;
					
							row14.Password = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
				
										
										if(rowstate_tFileInputDelimited_3.getException()!=null) {
											throw rowstate_tFileInputDelimited_3.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
			        					whetherReject_tFileInputDelimited_3 = true;
			        					
			                					System.err.println(e.getMessage());
			                					row14 = null;
			                				
			    					}
								

 



/**
 * [tFileInputDelimited_3 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_3 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_3";

	

 


	tos_count_tFileInputDelimited_3++;

/**
 * [tFileInputDelimited_3 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_3";

	

 



/**
 * [tFileInputDelimited_3 process_data_begin ] stop
 */
// Start of branch "row14"
if(row14 != null) { 
			row28 = null;



	
	/**
	 * [tLogRow_10 main ] start
	 */

	

	
	
	currentComponent="tLogRow_10";

	

			//row14
			//row14


			
				
				if(execStat){
					runStat.updateStatOnConnection("row14"+iterateId,1, 1);
				}
				
				
				
			

		
///////////////////////		
						

				
				String[] row_tLogRow_10 = new String[6];
   				
	    		if(row14.CompanyName != null) { //              
                 row_tLogRow_10[0]=    						    
				                String.valueOf(row14.CompanyName)			
					          ;	
							
	    		} //			
    			   				
	    		if(row14.ModeratorCode != null) { //              
                 row_tLogRow_10[1]=    						    
				                String.valueOf(row14.ModeratorCode)			
					          ;	
							
	    		} //			
    			   				
	    		if(row14.ParticipantCode != null) { //              
                 row_tLogRow_10[2]=    						    
				                String.valueOf(row14.ParticipantCode)			
					          ;	
							
	    		} //			
    			   				
	    		if(row14.ModeratorName != null) { //              
                 row_tLogRow_10[3]=    						    
				                String.valueOf(row14.ModeratorName)			
					          ;	
							
	    		} //			
    			   				
	    		if(row14.Email != null) { //              
                 row_tLogRow_10[4]=    						    
				                String.valueOf(row14.Email)			
					          ;	
							
	    		} //			
    			   				
	    		if(row14.Password != null) { //              
                 row_tLogRow_10[5]=    						    
				                String.valueOf(row14.Password)			
					          ;	
							
	    		} //			
    			 

				util_tLogRow_10.addRow(row_tLogRow_10);	
				nb_line_tLogRow_10++;
//////

//////                    
                    
///////////////////////    			

 
     row16 = row14;


	tos_count_tLogRow_10++;

/**
 * [tLogRow_10 main ] stop
 */
	
	/**
	 * [tLogRow_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_10";

	

 



/**
 * [tLogRow_10 process_data_begin ] stop
 */

	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

			//row16
			//row16


			
				
				if(execStat){
					runStat.updateStatOnConnection("row16"+iterateId,1, 1);
				}
				
				
				
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_3 = false;
		  boolean mainRowRejected_tMap_3 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row17" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow17 = false;
       		  	    	
       		  	    	
 							row17Struct row17ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_3) { // G_TM_M_020

								

								
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row17.lookup( row17HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row17.hasNext()) { // G_TM_M_090

  								
		  				
	  								
						
									
	
		  								forceLooprow17 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow17 = true;
			           		  	} // G 21
                    		  	
                    		

							row17Struct row17 = null;
                    		  	 
							

								while ((tHash_Lookup_row17 != null && tHash_Lookup_row17.hasNext()) || forceLooprow17) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row17'
									
                    		  	 
							   
                    		  	 
	       		  	    	row17Struct fromLookup_row17 = null;
							row17 = row17Default;
										 
							
								
								if(!forceLooprow17) { // G 46
								
							
								 
							
								
								fromLookup_row17 = tHash_Lookup_row17.next();

							

							if(fromLookup_row17 != null) {
								row17 = fromLookup_row17;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow17 = false;
									 	
							
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row40" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow40 = false;
       		  	    	
       		  	    	
 							row40Struct row40ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_3) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_3 = false;
								
                        		    		row40HashKey.CompanyName = row16.CompanyName ;
                        		    		

								
		                        	row40HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row40.lookup( row40HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row40.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_3 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row40 != null && tHash_Lookup_row40.getCount(row40HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row40' and it contains more one result from keys :  row40.CompanyName = '" + row40HashKey.CompanyName + "'");
								} // G 071
							

							row40Struct row40 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row40Struct fromLookup_row40 = null;
							row40 = row40Default;
										 
							
								 
							
							
								if (tHash_Lookup_row40 !=null && tHash_Lookup_row40.hasNext()) { // G 099
								
							
								
								fromLookup_row40 = tHash_Lookup_row40.next();

							
							
								} // G 099
							
							

							if(fromLookup_row40 != null) {
								row40 = fromLookup_row40;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row2" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow2 = false;
       		  	    	
       		  	    	
 							row2Struct row2ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_3) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_3 = false;
								
                        		    		row2HashKey.email = row16.Email ;
                        		    		

								
		                        	row2HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row2.lookup( row2HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row2.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_3 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row2 != null && tHash_Lookup_row2.getCount(row2HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row2' and it contains more one result from keys :  row2.email = '" + row2HashKey.email + "'");
								} // G 071
							

							row2Struct row2 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row2Struct fromLookup_row2 = null;
							row2 = row2Default;
										 
							
								 
							
							
								if (tHash_Lookup_row2 !=null && tHash_Lookup_row2.hasNext()) { // G 099
								
							
								
								fromLookup_row2 = tHash_Lookup_row2.next();

							
							
								} // G 099
							
							

							if(fromLookup_row2 != null) {
								row2 = fromLookup_row2;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

AddNewModerator = null;

if(!rejectedInnerJoin_tMap_3 ) {

// # Output table : 'AddNewModerator'
AddNewModerator_tmp.ID = Numeric.sequence("s6", row17.ModeratorID +1 , 1) ;
AddNewModerator_tmp.WholesalerID = row17.WholesalerID ;
AddNewModerator_tmp.CustomerID = row40.customerid ;
AddNewModerator_tmp.PriCustomerNumber = row40.PriCustomerNumber ;
AddNewModerator_tmp.SecCustomerNumber = Numeric.sequence("s7", Integer.parseInt(row17.SecCustomerNumber), 1).toString() ;
AddNewModerator_tmp.ExternalModeratorNumber = null;
AddNewModerator_tmp.ModeratorCode = row16.ModeratorCode ;
AddNewModerator_tmp.PassCode = row16.ParticipantCode ;
AddNewModerator_tmp.Description = row16.ModeratorName ;
AddNewModerator_tmp.DepartmentID = 0;
AddNewModerator_tmp.ModifiedBy = null;
AddNewModerator_tmp.CreatedDate = row17.CreatedDate ;
AddNewModerator_tmp.LastModified = row17.LastModified ;
AddNewModerator_tmp.Enabled = row17.Enabled ;
AddNewModerator_tmp.UniqueModeratorID = row17.UniqueModeratorID ;
AddNewModerator_tmp.UserID = row2.userid ;
AddNewModerator_tmp.WebMeetingID = null;
AddNewModerator_tmp.omnovia_room_id = null;
AddNewModerator_tmp.seevogh_meeting_url = null;
AddNewModerator_tmp.SeeVoghMeetingID = null;
AddNewModerator = AddNewModerator_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "AddNewModerator"
if(AddNewModerator != null) { 
			row28 = null;



	
	/**
	 * [tDBOutput_3 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	

			//AddNewModerator
			//AddNewModerator


			
				
				if(execStat){
					runStat.updateStatOnConnection("AddNewModerator"+iterateId,1, 1);
				}
				
				
				
			

		



            row18 = null;
            row28 = null;
	        if(isShareIdentity_tDBOutput_3) {
	            stmt_tDBOutput_3.execute("SET IDENTITY_INSERT ["+ tableName_tDBOutput_3 +"] ON");
	        }
        whetherReject_tDBOutput_3 = false;

                pstmt_tDBOutput_3.setInt(1, AddNewModerator.ID);


        java.sql.ResultSet rs_tDBOutput_3 = pstmt_tDBOutput_3.executeQuery();
        int checkCount_tDBOutput_3 = -1;
        while(rs_tDBOutput_3.next()) {
            checkCount_tDBOutput_3 = rs_tDBOutput_3.getInt(1);
        }

        if (checkCount_tDBOutput_3 < 1) {
            try {
                    pstmtInsert_tDBOutput_3.setInt(1, AddNewModerator.ID);

                    if(AddNewModerator.WholesalerID == null) {
pstmtInsert_tDBOutput_3.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_3.setString(2, AddNewModerator.WholesalerID);
}

                    pstmtInsert_tDBOutput_3.setInt(3, AddNewModerator.CustomerID);

                    if(AddNewModerator.PriCustomerNumber == null) {
pstmtInsert_tDBOutput_3.setNull(4, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_3.setString(4, AddNewModerator.PriCustomerNumber);
}

                    if(AddNewModerator.SecCustomerNumber == null) {
pstmtInsert_tDBOutput_3.setNull(5, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_3.setString(5, AddNewModerator.SecCustomerNumber);
}

                    if(AddNewModerator.ExternalModeratorNumber == null) {
pstmtInsert_tDBOutput_3.setNull(6, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_3.setString(6, AddNewModerator.ExternalModeratorNumber);
}

                    if(AddNewModerator.ModeratorCode == null) {
pstmtInsert_tDBOutput_3.setNull(7, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_3.setString(7, AddNewModerator.ModeratorCode);
}

                    if(AddNewModerator.PassCode == null) {
pstmtInsert_tDBOutput_3.setNull(8, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_3.setString(8, AddNewModerator.PassCode);
}

                    if(AddNewModerator.Description == null) {
pstmtInsert_tDBOutput_3.setNull(9, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_3.setString(9, AddNewModerator.Description);
}

                    pstmtInsert_tDBOutput_3.setInt(10, AddNewModerator.DepartmentID);

                    if(AddNewModerator.ModifiedBy == null) {
pstmtInsert_tDBOutput_3.setNull(11, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_3.setString(11, AddNewModerator.ModifiedBy);
}

                    if(AddNewModerator.CreatedDate != null) {
pstmtInsert_tDBOutput_3.setTimestamp(12, new java.sql.Timestamp(AddNewModerator.CreatedDate.getTime()));
} else {
pstmtInsert_tDBOutput_3.setNull(12, java.sql.Types.DATE);
}

                    if(AddNewModerator.LastModified != null) {
pstmtInsert_tDBOutput_3.setTimestamp(13, new java.sql.Timestamp(AddNewModerator.LastModified.getTime()));
} else {
pstmtInsert_tDBOutput_3.setNull(13, java.sql.Types.DATE);
}

                    if(AddNewModerator.Enabled == null) {
pstmtInsert_tDBOutput_3.setNull(14, java.sql.Types.BOOLEAN);
} else {pstmtInsert_tDBOutput_3.setBoolean(14, AddNewModerator.Enabled);
}

                    if(AddNewModerator.UniqueModeratorID == null) {
pstmtInsert_tDBOutput_3.setNull(15, java.sql.Types.OTHER);
} else {pstmtInsert_tDBOutput_3.setObject(15, AddNewModerator.UniqueModeratorID);
}

                    if(AddNewModerator.UserID == null) {
pstmtInsert_tDBOutput_3.setNull(16, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_3.setInt(16, AddNewModerator.UserID);
}

                    if(AddNewModerator.WebMeetingID == null) {
pstmtInsert_tDBOutput_3.setNull(17, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_3.setString(17, AddNewModerator.WebMeetingID);
}

                    if(AddNewModerator.omnovia_room_id == null) {
pstmtInsert_tDBOutput_3.setNull(18, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_3.setInt(18, AddNewModerator.omnovia_room_id);
}

                    if(AddNewModerator.seevogh_meeting_url == null) {
pstmtInsert_tDBOutput_3.setNull(19, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_3.setString(19, AddNewModerator.seevogh_meeting_url);
}

                    if(AddNewModerator.SeeVoghMeetingID == null) {
pstmtInsert_tDBOutput_3.setNull(20, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_3.setString(20, AddNewModerator.SeeVoghMeetingID);
}

                insertedCount_tDBOutput_3 = insertedCount_tDBOutput_3 + pstmtInsert_tDBOutput_3.executeUpdate();
                nb_line_tDBOutput_3++;
            } catch(java.lang.Exception e) {
				whetherReject_tDBOutput_3 = true;
            	nb_line_tDBOutput_3++;
            	
	            row28 = new row28Struct();
                    row28.ID = AddNewModerator.ID;
                    row28.WholesalerID = AddNewModerator.WholesalerID;
                    row28.CustomerID = AddNewModerator.CustomerID;
                    row28.PriCustomerNumber = AddNewModerator.PriCustomerNumber;
                    row28.SecCustomerNumber = AddNewModerator.SecCustomerNumber;
                    row28.ExternalModeratorNumber = AddNewModerator.ExternalModeratorNumber;
                    row28.ModeratorCode = AddNewModerator.ModeratorCode;
                    row28.PassCode = AddNewModerator.PassCode;
                    row28.Description = AddNewModerator.Description;
                    row28.DepartmentID = AddNewModerator.DepartmentID;
                    row28.ModifiedBy = AddNewModerator.ModifiedBy;
                    row28.CreatedDate = AddNewModerator.CreatedDate;
                    row28.LastModified = AddNewModerator.LastModified;
                    row28.Enabled = AddNewModerator.Enabled;
                    row28.UniqueModeratorID = AddNewModerator.UniqueModeratorID;
                    row28.UserID = AddNewModerator.UserID;
                    row28.WebMeetingID = AddNewModerator.WebMeetingID;
                    row28.omnovia_room_id = AddNewModerator.omnovia_room_id;
                    row28.seevogh_meeting_url = AddNewModerator.seevogh_meeting_url;
                    row28.SeeVoghMeetingID = AddNewModerator.SeeVoghMeetingID;
                	rejectedCount_tDBOutput_3 = rejectedCount_tDBOutput_3 + 1;
                	row28.errorCode = ((java.sql.SQLException)e).getSQLState();
                    row28.errorMessage = e.getMessage() + " - Line: " + tos_count_tDBOutput_3;
                }
            }
            if(!whetherReject_tDBOutput_3) {
                            row18 = new row18Struct();
                                row18.ID = AddNewModerator.ID;
                                row18.WholesalerID = AddNewModerator.WholesalerID;
                                row18.CustomerID = AddNewModerator.CustomerID;
                                row18.PriCustomerNumber = AddNewModerator.PriCustomerNumber;
                                row18.SecCustomerNumber = AddNewModerator.SecCustomerNumber;
                                row18.ExternalModeratorNumber = AddNewModerator.ExternalModeratorNumber;
                                row18.ModeratorCode = AddNewModerator.ModeratorCode;
                                row18.PassCode = AddNewModerator.PassCode;
                                row18.Description = AddNewModerator.Description;
                                row18.DepartmentID = AddNewModerator.DepartmentID;
                                row18.ModifiedBy = AddNewModerator.ModifiedBy;
                                row18.CreatedDate = AddNewModerator.CreatedDate;
                                row18.LastModified = AddNewModerator.LastModified;
                                row18.Enabled = AddNewModerator.Enabled;
                                row18.UniqueModeratorID = AddNewModerator.UniqueModeratorID;
                                row18.UserID = AddNewModerator.UserID;
                                row18.WebMeetingID = AddNewModerator.WebMeetingID;
                                row18.omnovia_room_id = AddNewModerator.omnovia_room_id;
                                row18.seevogh_meeting_url = AddNewModerator.seevogh_meeting_url;
                                row18.SeeVoghMeetingID = AddNewModerator.SeeVoghMeetingID;
            }
            	//////////batch execute by batch size///////
            	class LimitBytesHelper_tDBOutput_3{
            		public int limitBytePart1(int counter,java.sql.PreparedStatement pstmt_tDBOutput_3) throws Exception {
                try {
						
						for(int countEach_tDBOutput_3: pstmt_tDBOutput_3.executeBatch()) {
							if(countEach_tDBOutput_3 == -2 || countEach_tDBOutput_3 == -3) {
								break;
							}
							counter += countEach_tDBOutput_3;
						}
						
                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_tDBOutput_3 = 0;
					for(int countEach_tDBOutput_3: e.getUpdateCounts()) {
						counter += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
					}
				
            	    	
                		System.err.println(e.getMessage());
                	
               			 }
    				return counter;
            	}
            	
            	public int limitBytePart2(int counter,java.sql.PreparedStatement pstmt_tDBOutput_3) throws Exception {
                try {
                		
						for(int countEach_tDBOutput_3: pstmt_tDBOutput_3.executeBatch()) {
							if(countEach_tDBOutput_3 == -2 || countEach_tDBOutput_3 == -3) {
								break;
							}
							counter += countEach_tDBOutput_3;
						}
						
                }catch (java.sql.BatchUpdateException e){
                	
                	
					for(int countEach_tDBOutput_3: e.getUpdateCounts()) {
						counter += (countEach_tDBOutput_3 < 0 ? 0 : countEach_tDBOutput_3);
					}
					
            	    	
                        System.err.println(e.getMessage());
                	
                		}	
                	return counter;	
            	}
            }

    	////////////commit every////////////
    			
		if (isShareIdentity_tDBOutput_3 ) {
        	 stmt_tDBOutput_3.execute("SET IDENTITY_INSERT ["+ tableName_tDBOutput_3 +"] OFF");
        }

 


	tos_count_tDBOutput_3++;

/**
 * [tDBOutput_3 main ] stop
 */
	
	/**
	 * [tDBOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	

 



/**
 * [tDBOutput_3 process_data_begin ] stop
 */
// Start of branch "row18"
if(row18 != null) { 



	
	/**
	 * [tLogRow_12 main ] start
	 */

	

	
	
	currentComponent="tLogRow_12";

	

			//row18
			//row18


			
				
				if(execStat){
					runStat.updateStatOnConnection("row18"+iterateId,1, 1);
				}
				
				
				
			

		
///////////////////////		
						

				
				String[] row_tLogRow_12 = new String[20];
              
                 row_tLogRow_12[0]=    						    
				                String.valueOf(row18.ID)			
					          ;	
										
    			   				
	    		if(row18.WholesalerID != null) { //              
                 row_tLogRow_12[1]=    						    
				                String.valueOf(row18.WholesalerID)			
					          ;	
							
	    		} //			
    			              
                 row_tLogRow_12[2]=    						    
				                String.valueOf(row18.CustomerID)			
					          ;	
										
    			   				
	    		if(row18.PriCustomerNumber != null) { //              
                 row_tLogRow_12[3]=    						    
				                String.valueOf(row18.PriCustomerNumber)			
					          ;	
							
	    		} //			
    			   				
	    		if(row18.SecCustomerNumber != null) { //              
                 row_tLogRow_12[4]=    						    
				                String.valueOf(row18.SecCustomerNumber)			
					          ;	
							
	    		} //			
    			   				
	    		if(row18.ExternalModeratorNumber != null) { //              
                 row_tLogRow_12[5]=    						    
				                String.valueOf(row18.ExternalModeratorNumber)			
					          ;	
							
	    		} //			
    			   				
	    		if(row18.ModeratorCode != null) { //              
                 row_tLogRow_12[6]=    						    
				                String.valueOf(row18.ModeratorCode)			
					          ;	
							
	    		} //			
    			   				
	    		if(row18.PassCode != null) { //              
                 row_tLogRow_12[7]=    						    
				                String.valueOf(row18.PassCode)			
					          ;	
							
	    		} //			
    			   				
	    		if(row18.Description != null) { //              
                 row_tLogRow_12[8]=    						    
				                String.valueOf(row18.Description)			
					          ;	
							
	    		} //			
    			              
                 row_tLogRow_12[9]=    						    
				                String.valueOf(row18.DepartmentID)			
					          ;	
										
    			   				
	    		if(row18.ModifiedBy != null) { //              
                 row_tLogRow_12[10]=    						    
				                String.valueOf(row18.ModifiedBy)			
					          ;	
							
	    		} //			
    			   				
	    		if(row18.CreatedDate != null) { //              
                 row_tLogRow_12[11]=    						
								FormatterUtils.format_Date(row18.CreatedDate, "dd-MM-yyyy")
					          ;	
							
	    		} //			
    			   				
	    		if(row18.LastModified != null) { //              
                 row_tLogRow_12[12]=    						
								FormatterUtils.format_Date(row18.LastModified, "dd-MM-yyyy")
					          ;	
							
	    		} //			
    			   				
	    		if(row18.Enabled != null) { //              
                 row_tLogRow_12[13]=    						    
				                String.valueOf(row18.Enabled)			
					          ;	
							
	    		} //			
    			   				
	    		if(row18.UniqueModeratorID != null) { //              
                 row_tLogRow_12[14]=    						    
				                String.valueOf(row18.UniqueModeratorID)			
					          ;	
							
	    		} //			
    			   				
	    		if(row18.UserID != null) { //              
                 row_tLogRow_12[15]=    						    
				                String.valueOf(row18.UserID)			
					          ;	
							
	    		} //			
    			   				
	    		if(row18.WebMeetingID != null) { //              
                 row_tLogRow_12[16]=    						    
				                String.valueOf(row18.WebMeetingID)			
					          ;	
							
	    		} //			
    			   				
	    		if(row18.omnovia_room_id != null) { //              
                 row_tLogRow_12[17]=    						    
				                String.valueOf(row18.omnovia_room_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(row18.seevogh_meeting_url != null) { //              
                 row_tLogRow_12[18]=    						    
				                String.valueOf(row18.seevogh_meeting_url)			
					          ;	
							
	    		} //			
    			   				
	    		if(row18.SeeVoghMeetingID != null) { //              
                 row_tLogRow_12[19]=    						    
				                String.valueOf(row18.SeeVoghMeetingID)			
					          ;	
							
	    		} //			
    			 

				util_tLogRow_12.addRow(row_tLogRow_12);	
				nb_line_tLogRow_12++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_12++;

/**
 * [tLogRow_12 main ] stop
 */
	
	/**
	 * [tLogRow_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_12";

	

 



/**
 * [tLogRow_12 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_12";

	

 



/**
 * [tLogRow_12 process_data_end ] stop
 */

} // End of branch "row18"




// Start of branch "row28"
if(row28 != null) { 



	
	/**
	 * [tLogRow_20 main ] start
	 */

	

	
	
	currentComponent="tLogRow_20";

	

			//row28
			//row28


			
				
				if(execStat){
					runStat.updateStatOnConnection("row28"+iterateId,1, 1);
				}
				
				
				
			

		
///////////////////////		
						

				
				String[] row_tLogRow_20 = new String[22];
              
                 row_tLogRow_20[0]=    						    
				                String.valueOf(row28.ID)			
					          ;	
										
    			   				
	    		if(row28.WholesalerID != null) { //              
                 row_tLogRow_20[1]=    						    
				                String.valueOf(row28.WholesalerID)			
					          ;	
							
	    		} //			
    			              
                 row_tLogRow_20[2]=    						    
				                String.valueOf(row28.CustomerID)			
					          ;	
										
    			   				
	    		if(row28.PriCustomerNumber != null) { //              
                 row_tLogRow_20[3]=    						    
				                String.valueOf(row28.PriCustomerNumber)			
					          ;	
							
	    		} //			
    			   				
	    		if(row28.SecCustomerNumber != null) { //              
                 row_tLogRow_20[4]=    						    
				                String.valueOf(row28.SecCustomerNumber)			
					          ;	
							
	    		} //			
    			   				
	    		if(row28.ExternalModeratorNumber != null) { //              
                 row_tLogRow_20[5]=    						    
				                String.valueOf(row28.ExternalModeratorNumber)			
					          ;	
							
	    		} //			
    			   				
	    		if(row28.ModeratorCode != null) { //              
                 row_tLogRow_20[6]=    						    
				                String.valueOf(row28.ModeratorCode)			
					          ;	
							
	    		} //			
    			   				
	    		if(row28.PassCode != null) { //              
                 row_tLogRow_20[7]=    						    
				                String.valueOf(row28.PassCode)			
					          ;	
							
	    		} //			
    			   				
	    		if(row28.Description != null) { //              
                 row_tLogRow_20[8]=    						    
				                String.valueOf(row28.Description)			
					          ;	
							
	    		} //			
    			              
                 row_tLogRow_20[9]=    						    
				                String.valueOf(row28.DepartmentID)			
					          ;	
										
    			   				
	    		if(row28.ModifiedBy != null) { //              
                 row_tLogRow_20[10]=    						    
				                String.valueOf(row28.ModifiedBy)			
					          ;	
							
	    		} //			
    			   				
	    		if(row28.CreatedDate != null) { //              
                 row_tLogRow_20[11]=    						
								FormatterUtils.format_Date(row28.CreatedDate, "dd-MM-yyyy")
					          ;	
							
	    		} //			
    			   				
	    		if(row28.LastModified != null) { //              
                 row_tLogRow_20[12]=    						
								FormatterUtils.format_Date(row28.LastModified, "dd-MM-yyyy")
					          ;	
							
	    		} //			
    			   				
	    		if(row28.Enabled != null) { //              
                 row_tLogRow_20[13]=    						    
				                String.valueOf(row28.Enabled)			
					          ;	
							
	    		} //			
    			   				
	    		if(row28.UniqueModeratorID != null) { //              
                 row_tLogRow_20[14]=    						    
				                String.valueOf(row28.UniqueModeratorID)			
					          ;	
							
	    		} //			
    			   				
	    		if(row28.UserID != null) { //              
                 row_tLogRow_20[15]=    						    
				                String.valueOf(row28.UserID)			
					          ;	
							
	    		} //			
    			   				
	    		if(row28.WebMeetingID != null) { //              
                 row_tLogRow_20[16]=    						    
				                String.valueOf(row28.WebMeetingID)			
					          ;	
							
	    		} //			
    			   				
	    		if(row28.omnovia_room_id != null) { //              
                 row_tLogRow_20[17]=    						    
				                String.valueOf(row28.omnovia_room_id)			
					          ;	
							
	    		} //			
    			   				
	    		if(row28.seevogh_meeting_url != null) { //              
                 row_tLogRow_20[18]=    						    
				                String.valueOf(row28.seevogh_meeting_url)			
					          ;	
							
	    		} //			
    			   				
	    		if(row28.SeeVoghMeetingID != null) { //              
                 row_tLogRow_20[19]=    						    
				                String.valueOf(row28.SeeVoghMeetingID)			
					          ;	
							
	    		} //			
    			   				
	    		if(row28.errorCode != null) { //              
                 row_tLogRow_20[20]=    						    
				                String.valueOf(row28.errorCode)			
					          ;	
							
	    		} //			
    			   				
	    		if(row28.errorMessage != null) { //              
                 row_tLogRow_20[21]=    						    
				                String.valueOf(row28.errorMessage)			
					          ;	
							
	    		} //			
    			 

				util_tLogRow_20.addRow(row_tLogRow_20);	
				nb_line_tLogRow_20++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_20++;

/**
 * [tLogRow_20 main ] stop
 */
	
	/**
	 * [tLogRow_20 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_20";

	

 



/**
 * [tLogRow_20 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_20 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_20";

	

 



/**
 * [tLogRow_20 process_data_end ] stop
 */

} // End of branch "row28"




	
	/**
	 * [tDBOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	

 



/**
 * [tDBOutput_3 process_data_end ] stop
 */

} // End of branch "AddNewModerator"



	
		} // close loop of lookup 'row17' // G_TM_M_043
	
	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_end ] stop
 */



	
	/**
	 * [tLogRow_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_10";

	

 



/**
 * [tLogRow_10 process_data_end ] stop
 */

} // End of branch "row14"




	
	/**
	 * [tFileInputDelimited_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_3";

	

 



/**
 * [tFileInputDelimited_3 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_3 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_3";

	



            }
            }finally{
                if(!((Object)(context.Moderator_File) instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_3!=null){
                		fid_tFileInputDelimited_3.close();
                	}
                }
                if(fid_tFileInputDelimited_3!=null){
                	globalMap.put("tFileInputDelimited_3_NB_LINE", fid_tFileInputDelimited_3.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_3", true);
end_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());




/**
 * [tFileInputDelimited_3 end ] stop
 */

	
	/**
	 * [tLogRow_10 end ] start
	 */

	

	
	
	currentComponent="tLogRow_10";

	


//////

                    
                    java.io.PrintStream consoleOut_tLogRow_10 = null;
                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_10 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_10 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_10);
                    }
                    
                    consoleOut_tLogRow_10.println(util_tLogRow_10.format().toString());
                    consoleOut_tLogRow_10.flush();
//////
globalMap.put("tLogRow_10_NB_LINE",nb_line_tLogRow_10);

///////////////////////    			

			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("row14"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tLogRow_10", true);
end_Hash.put("tLogRow_10", System.currentTimeMillis());




/**
 * [tLogRow_10 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row17 != null) {
						tHash_Lookup_row17.endGet();
					}
					globalMap.remove( "tHash_Lookup_row17" );

					
					
				
					if(tHash_Lookup_row40 != null) {
						tHash_Lookup_row40.endGet();
					}
					globalMap.remove( "tHash_Lookup_row40" );

					
					
				
					if(tHash_Lookup_row2 != null) {
						tHash_Lookup_row2.endGet();
					}
					globalMap.remove( "tHash_Lookup_row2" );

					
					
				
// ###############################      





			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("row16"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tDBOutput_3 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	



		if ( isShareIdentity_tDBOutput_3 ) {
			String setIdentityInsertONSQL_tDBOutput_3 = "SET IDENTITY_INSERT ["+ tableName_tDBOutput_3 +"] ON";
			
        	stmt_tDBOutput_3.execute(setIdentityInsertONSQL_tDBOutput_3);
			
        }
        if(pstmtInsert_tDBOutput_3 != null){
            pstmtInsert_tDBOutput_3.close();
            resourceMap.remove("pstmtInsert_tDBOutput_3");
        }
        if(pstmt_tDBOutput_3 != null) {
            pstmt_tDBOutput_3.close();
            resourceMap.remove("pstmt_tDBOutput_3");
        }
    String setIdentityInsertOFFSQL_tDBOutput_3 = "SET IDENTITY_INSERT ["+ tableName_tDBOutput_3 +"] OFF";
    stmt_tDBOutput_3.execute(setIdentityInsertOFFSQL_tDBOutput_3);
    stmt_tDBOutput_3.close();
    resourceMap.put("statementClosed_tDBOutput_3", true);

	nb_line_deleted_tDBOutput_3=nb_line_deleted_tDBOutput_3+ deletedCount_tDBOutput_3;
	nb_line_update_tDBOutput_3=nb_line_update_tDBOutput_3 + updatedCount_tDBOutput_3;
	nb_line_inserted_tDBOutput_3=nb_line_inserted_tDBOutput_3 + insertedCount_tDBOutput_3;
	nb_line_rejected_tDBOutput_3=nb_line_rejected_tDBOutput_3 + rejectedCount_tDBOutput_3;
	
        globalMap.put("tDBOutput_3_NB_LINE",nb_line_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_UPDATED",nb_line_update_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_DELETED",nb_line_deleted_tDBOutput_3);
        globalMap.put("tDBOutput_3_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_3);
    
	

			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("AddNewModerator"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tDBOutput_3", true);
end_Hash.put("tDBOutput_3", System.currentTimeMillis());




/**
 * [tDBOutput_3 end ] stop
 */

	
	/**
	 * [tLogRow_12 end ] start
	 */

	

	
	
	currentComponent="tLogRow_12";

	


//////

                    
                    java.io.PrintStream consoleOut_tLogRow_12 = null;
                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_12 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_12 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_12);
                    }
                    
                    consoleOut_tLogRow_12.println(util_tLogRow_12.format().toString());
                    consoleOut_tLogRow_12.flush();
//////
globalMap.put("tLogRow_12_NB_LINE",nb_line_tLogRow_12);

///////////////////////    			

			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("row18"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tLogRow_12", true);
end_Hash.put("tLogRow_12", System.currentTimeMillis());




/**
 * [tLogRow_12 end ] stop
 */




	
	/**
	 * [tLogRow_20 end ] start
	 */

	

	
	
	currentComponent="tLogRow_20";

	


//////

                    
                    java.io.PrintStream consoleOut_tLogRow_20 = null;
                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_20 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_20 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_20);
                    }
                    
                    consoleOut_tLogRow_20.println(util_tLogRow_20.format().toString());
                    consoleOut_tLogRow_20.flush();
//////
globalMap.put("tLogRow_20_NB_LINE",nb_line_tLogRow_20);

///////////////////////    			

			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("row28"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tLogRow_20", true);
end_Hash.put("tLogRow_20", System.currentTimeMillis());




/**
 * [tLogRow_20 end ] stop
 */












				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_3"
					     			globalMap.remove("tHash_Lookup_row40"); 
				     			
					     			//free memory for "tMap_3"
					     			globalMap.remove("tHash_Lookup_row17"); 
				     			
					     			//free memory for "tMap_3"
					     			globalMap.remove("tHash_Lookup_row2"); 
				     			
				try{
					
	
	/**
	 * [tFileInputDelimited_3 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_3";

	

 



/**
 * [tFileInputDelimited_3 finally ] stop
 */

	
	/**
	 * [tLogRow_10 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_10";

	

 



/**
 * [tLogRow_10 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tDBOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_3";

	



    if (resourceMap.get("statementClosed_tDBOutput_3") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_3 = null;
                if ((pstmtToClose_tDBOutput_3 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_3")) != null) {
                    pstmtToClose_tDBOutput_3.close();
                }
    }
 



/**
 * [tDBOutput_3 finally ] stop
 */

	
	/**
	 * [tLogRow_12 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_12";

	

 



/**
 * [tLogRow_12 finally ] stop
 */




	
	/**
	 * [tLogRow_20 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_20";

	

 



/**
 * [tLogRow_20 finally ] stop
 */












				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 1);
	}
	

public void tSendMail_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSendMail_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tSendMail_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tSendMail_5", false);
		start_Hash.put("tSendMail_5", System.currentTimeMillis());
		
	
	currentComponent="tSendMail_5";

	
		int tos_count_tSendMail_5 = 0;
		

 



/**
 * [tSendMail_5 begin ] stop
 */
	
	/**
	 * [tSendMail_5 main ] start
	 */

	

	
	
	currentComponent="tSendMail_5";

	

 

	String smtpHost_tSendMail_5 = context.Email_host;
        String smtpPort_tSendMail_5 = context.Email_port;
	String from_tSendMail_5 = (context.Email_from);
    String to_tSendMail_5 = (context.Email_to).replace(";",",");
    String cc_tSendMail_5 = (("")==null || "".equals(""))?null:("").replace(";",",");
    String bcc_tSendMail_5 = (("")==null || "".equals(""))?null:("").replace(";",",");
    String subject_tSendMail_5 = ("Talend Error Notification");
    
	java.util.List<java.util.Map<String, String>> headers_tSendMail_5 = new java.util.ArrayList<java.util.Map<String,String>>();
	java.util.List<String> attachments_tSendMail_5 = new java.util.ArrayList<String>();
	java.util.List<String> contentTransferEncoding_tSendMail_5 = new java.util.ArrayList<String>();

	String message_tSendMail_5 = (("Error at process 5") == null || "".equals("Error at process 5")) ? "\"\"" : ("Error at process 5") ;
	java.util.Properties props_tSendMail_5 = System.getProperties();     
	props_tSendMail_5.put("mail.smtp.host", smtpHost_tSendMail_5);
	props_tSendMail_5.put("mail.smtp.port", smtpPort_tSendMail_5);
		props_tSendMail_5.put("mail.mime.encodefilename", "true");  
		props_tSendMail_5.put("mail.smtp.socketFactory.class", "javax.net.ssl.SSLSocketFactory");
		props_tSendMail_5.put("mail.smtp.socketFactory.fallback", "false");
		props_tSendMail_5.put("mail.smtp.socketFactory.port", smtpPort_tSendMail_5);     
	try {
		
		
			props_tSendMail_5.put("mail.smtp.auth", "true");
			javax.mail.Session session_tSendMail_5 = javax.mail.Session.getInstance(props_tSendMail_5, new javax.mail.Authenticator(){         
				protected javax.mail.PasswordAuthentication getPasswordAuthentication() {
				
                
	final String decryptedPassword_tSendMail_5 = context.Email_password; 
				
				
				return new javax.mail.PasswordAuthentication(context.Email_username, decryptedPassword_tSendMail_5); 
				}         
			});   
		
		
		javax.mail.Message msg_tSendMail_5 = new javax.mail.internet.MimeMessage(session_tSendMail_5);
		msg_tSendMail_5.setFrom(new javax.mail.internet.InternetAddress(from_tSendMail_5, null));
		msg_tSendMail_5.setRecipients(javax.mail.Message.RecipientType.TO,javax.mail.internet.InternetAddress.parse(to_tSendMail_5, false));
		if (cc_tSendMail_5 != null) msg_tSendMail_5.setRecipients(javax.mail.Message.RecipientType.CC, javax.mail.internet.InternetAddress.parse(cc_tSendMail_5, false));
		if (bcc_tSendMail_5 != null) msg_tSendMail_5.setRecipients(javax.mail.Message.RecipientType.BCC, javax.mail.internet.InternetAddress.parse(bcc_tSendMail_5, false));
		msg_tSendMail_5.setSubject(subject_tSendMail_5);

		for (int i_tSendMail_5 = 0; i_tSendMail_5 < headers_tSendMail_5.size(); i_tSendMail_5++) {
			java.util.Map<String, String> header_tSendMail_5 = headers_tSendMail_5.get(i_tSendMail_5);
			msg_tSendMail_5.setHeader(header_tSendMail_5.get("KEY"), header_tSendMail_5.get("VALUE"));    
		}  
		msg_tSendMail_5.setSentDate(new Date());
		msg_tSendMail_5.setHeader("X-Priority", "1"); //High->1 Normal->3 Low->5
		javax.mail.Multipart mp_tSendMail_5 = new javax.mail.internet.MimeMultipart();
		javax.mail.internet.MimeBodyPart mbpText_tSendMail_5 = new javax.mail.internet.MimeBodyPart();
		mbpText_tSendMail_5.setText(message_tSendMail_5,"ISO-8859-15", "plain");
		mp_tSendMail_5.addBodyPart(mbpText_tSendMail_5);
  
		javax.mail.internet.MimeBodyPart mbpFile_tSendMail_5 = null;

		for (int i_tSendMail_5 = 0; i_tSendMail_5 < attachments_tSendMail_5.size(); i_tSendMail_5++){
			String filename_tSendMail_5 = attachments_tSendMail_5.get(i_tSendMail_5);
			javax.activation.FileDataSource fds_tSendMail_5 = null;
			java.io.File file_tSendMail_5 = new java.io.File(filename_tSendMail_5);
			
				if (!file_tSendMail_5.exists()){
					continue;
				}
			
    		if (file_tSendMail_5.isDirectory()){
				java.io.File[] subFiles_tSendMail_5 = file_tSendMail_5.listFiles();
				for(java.io.File subFile_tSendMail_5 : subFiles_tSendMail_5){
					if (subFile_tSendMail_5.isFile()){
						fds_tSendMail_5 = new javax.activation.FileDataSource(subFile_tSendMail_5.getAbsolutePath());
						mbpFile_tSendMail_5 = new javax.mail.internet.MimeBodyPart();
						mbpFile_tSendMail_5.setDataHandler(new javax.activation.DataHandler(fds_tSendMail_5));
						mbpFile_tSendMail_5.setFileName(javax.mail.internet.MimeUtility.encodeText(fds_tSendMail_5.getName()));
						if(contentTransferEncoding_tSendMail_5.get(i_tSendMail_5).equalsIgnoreCase("base64")){
							mbpFile_tSendMail_5.setHeader("Content-Transfer-Encoding", "base64");
						}
						mp_tSendMail_5.addBodyPart(mbpFile_tSendMail_5);
					}
				}
    		}else{
				mbpFile_tSendMail_5 = new javax.mail.internet.MimeBodyPart();
				fds_tSendMail_5 = new javax.activation.FileDataSource(filename_tSendMail_5);
				mbpFile_tSendMail_5.setDataHandler(new javax.activation.DataHandler(fds_tSendMail_5)); 
				mbpFile_tSendMail_5.setFileName(javax.mail.internet.MimeUtility.encodeText(fds_tSendMail_5.getName()));
				if(contentTransferEncoding_tSendMail_5.get(i_tSendMail_5).equalsIgnoreCase("base64")){
					mbpFile_tSendMail_5.setHeader("Content-Transfer-Encoding", "base64");
				}
				mp_tSendMail_5.addBodyPart(mbpFile_tSendMail_5);
			}
		}
		// -- set the content --
		msg_tSendMail_5.setContent(mp_tSendMail_5);
		// add handlers for main MIME types
		javax.activation.MailcapCommandMap mc_tSendMail_5 = ( javax.activation.MailcapCommandMap)javax.activation.CommandMap.getDefaultCommandMap();
		mc_tSendMail_5.addMailcap("text/html;; x-java-content-handler=com.sun.mail.handlers.text_html");
		mc_tSendMail_5.addMailcap("text/xml;; x-java-content-handler=com.sun.mail.handlers.text_xml");
		mc_tSendMail_5.addMailcap("text/plain;; x-java-content-handler=com.sun.mail.handlers.text_plain");
		mc_tSendMail_5.addMailcap("multipart/*;; x-java-content-handler=com.sun.mail.handlers.multipart_mixed");
		mc_tSendMail_5.addMailcap("message/rfc822;; x-java-content-handler=com.sun.mail.handlers.message_rfc822");
		javax.activation.CommandMap.setDefaultCommandMap(mc_tSendMail_5);
		// -- Send the message --
		javax.mail.Transport.send(msg_tSendMail_5);
	} catch(java.lang.Exception e){
  		
			throw(e);
		
	}finally{
		props_tSendMail_5.remove("mail.smtp.host");
		props_tSendMail_5.remove("mail.smtp.port");
		
		props_tSendMail_5.remove("mail.mime.encodefilename");
		  
			props_tSendMail_5.remove("mail.smtp.socketFactory.class");
			props_tSendMail_5.remove("mail.smtp.socketFactory.fallback");
			props_tSendMail_5.remove("mail.smtp.socketFactory.port");
		
		props_tSendMail_5.remove("mail.smtp.auth");     
	}

 


	tos_count_tSendMail_5++;

/**
 * [tSendMail_5 main ] stop
 */
	
	/**
	 * [tSendMail_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSendMail_5";

	

 



/**
 * [tSendMail_5 process_data_begin ] stop
 */
	
	/**
	 * [tSendMail_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tSendMail_5";

	

 



/**
 * [tSendMail_5 process_data_end ] stop
 */
	
	/**
	 * [tSendMail_5 end ] start
	 */

	

	
	
	currentComponent="tSendMail_5";

	

 

ok_Hash.put("tSendMail_5", true);
end_Hash.put("tSendMail_5", System.currentTimeMillis());




/**
 * [tSendMail_5 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSendMail_5 finally ] start
	 */

	

	
	
	currentComponent="tSendMail_5";

	

 



/**
 * [tSendMail_5 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSendMail_5_SUBPROCESS_STATE", 1);
	}
	


public static class row40Struct implements routines.system.IPersistableComparableLookupRow<row40Struct> {
    final static byte[] commonByteArrayLock_IMPORTINGEVMDATA_ImportingEVM = new byte[0];
    static byte[] commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String CompanyName;

				public String getCompanyName () {
					return this.CompanyName;
				}
				
			    public int customerid;

				public int getCustomerid () {
					return this.customerid;
				}
				
			    public int companyid;

				public int getCompanyid () {
					return this.companyid;
				}
				
			    public String PriCustomerNumber;

				public String getPriCustomerNumber () {
					return this.PriCustomerNumber;
				}
				
			    public String PrimaryContactName;

				public String getPrimaryContactName () {
					return this.PrimaryContactName;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CompanyName == null) ? 0 : this.CompanyName.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row40Struct other = (row40Struct) obj;
		
						if (this.CompanyName == null) {
							if (other.CompanyName != null)
								return false;
						
						} else if (!this.CompanyName.equals(other.CompanyName))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row40Struct other) {

		other.CompanyName = this.CompanyName;
	            other.customerid = this.customerid;
	            other.companyid = this.companyid;
	            other.PriCustomerNumber = this.PriCustomerNumber;
	            other.PrimaryContactName = this.PrimaryContactName;
	            
	}

	public void copyKeysDataTo(row40Struct other) {

		other.CompanyName = this.CompanyName;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IMPORTINGEVMDATA_ImportingEVM.length) {
				if(length < 1024 && commonByteArray_IMPORTINGEVMDATA_ImportingEVM.length == 0) {
   					commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[1024];
				} else {
   					commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IMPORTINGEVMDATA_ImportingEVM, 0, length);
			strReturn = new String(commonByteArray_IMPORTINGEVMDATA_ImportingEVM, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IMPORTINGEVMDATA_ImportingEVM) {

        	try {

        		int length = 0;
		
					this.CompanyName = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CompanyName,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.customerid = dis.readInt();
					
			            this.companyid = dis.readInt();
					
						this.PriCustomerNumber = readString(dis,ois);
					
						this.PrimaryContactName = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.customerid);
					
		            	dos.writeInt(this.companyid);
					
						writeString(this.PriCustomerNumber, dos, oos);
					
						writeString(this.PrimaryContactName, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CompanyName="+CompanyName);
		sb.append(",customerid="+String.valueOf(customerid));
		sb.append(",companyid="+String.valueOf(companyid));
		sb.append(",PriCustomerNumber="+PriCustomerNumber);
		sb.append(",PrimaryContactName="+PrimaryContactName);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row40Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CompanyName, other.CompanyName);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row40Struct row40 = new row40Struct();




	
	/**
	 * [tAdvancedHash_row40 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row40", false);
		start_Hash.put("tAdvancedHash_row40", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row40";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("row40"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tAdvancedHash_row40 = 0;
		

			   		// connection name:row40
			   		// source node:tDBInput_6 - inputs:(after_tFileInputDelimited_3) outputs:(row40,row40) | target node:tAdvancedHash_row40 - inputs:(row40) outputs:()
			   		// linked node: tMap_3 - inputs:(row16,row40,row17,row2) outputs:(AddNewModerator)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row40 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row40Struct> tHash_Lookup_row40 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row40Struct>getLookup(matchingModeEnum_row40);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row40", tHash_Lookup_row40);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row40 begin ] stop
 */



	
	/**
	 * [tDBInput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_6", false);
		start_Hash.put("tDBInput_6", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_6";

	
		int tos_count_tDBInput_6 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_6 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_6 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_6  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_6, talendToDBArray_tDBInput_6); 
		    int nb_line_tDBInput_6 = 0;
		    java.sql.Connection conn_tDBInput_6 = null;
		        conn_tDBInput_6 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
			String dbschema_tDBInput_6 = (String)globalMap.get("dbschema_tDBConnection_1");
		    
			java.sql.Statement stmt_tDBInput_6 = conn_tDBInput_6.createStatement();

		    String dbquery_tDBInput_6 = "SELECT co.Description as CompanyName, c.id as customerid, co.id as companyid, c.PriCustomerNumber as PriCustomerNumber,"
+"\nc.PrimaryContactName as PrimaryContactName from dbo.Customer c inner join dbo.Company co on c.CompanyID = co.id";
			

            	globalMap.put("tDBInput_6_QUERY",dbquery_tDBInput_6);
		    java.sql.ResultSet rs_tDBInput_6 = null;

		    try {
		    	rs_tDBInput_6 = stmt_tDBInput_6.executeQuery(dbquery_tDBInput_6);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_6 = rs_tDBInput_6.getMetaData();
		    	int colQtyInRs_tDBInput_6 = rsmd_tDBInput_6.getColumnCount();

		    String tmpContent_tDBInput_6 = null;
		    
		    
		    while (rs_tDBInput_6.next()) {
		        nb_line_tDBInput_6++;
		        
							if(colQtyInRs_tDBInput_6 < 1) {
								row40.CompanyName = null;
							} else {
	                         		
           		tmpContent_tDBInput_6 = rs_tDBInput_6.getString(1);
            if(tmpContent_tDBInput_6 != null) {
            	if (talendToDBList_tDBInput_6 .contains(rsmd_tDBInput_6.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
            		row40.CompanyName = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
            	} else {
                	row40.CompanyName = tmpContent_tDBInput_6;
                }
            } else {
                row40.CompanyName = null;
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 2) {
								row40.customerid = 0;
							} else {
		                          
            row40.customerid = rs_tDBInput_6.getInt(2);
            if(rs_tDBInput_6.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 3) {
								row40.companyid = 0;
							} else {
		                          
            row40.companyid = rs_tDBInput_6.getInt(3);
            if(rs_tDBInput_6.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 4) {
								row40.PriCustomerNumber = null;
							} else {
	                         		
           		tmpContent_tDBInput_6 = rs_tDBInput_6.getString(4);
            if(tmpContent_tDBInput_6 != null) {
            	if (talendToDBList_tDBInput_6 .contains(rsmd_tDBInput_6.getColumnTypeName(4).toUpperCase(java.util.Locale.ENGLISH))) {
            		row40.PriCustomerNumber = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
            	} else {
                	row40.PriCustomerNumber = tmpContent_tDBInput_6;
                }
            } else {
                row40.PriCustomerNumber = null;
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 5) {
								row40.PrimaryContactName = null;
							} else {
	                         		
           		tmpContent_tDBInput_6 = rs_tDBInput_6.getString(5);
            if(tmpContent_tDBInput_6 != null) {
            	if (talendToDBList_tDBInput_6 .contains(rsmd_tDBInput_6.getColumnTypeName(5).toUpperCase(java.util.Locale.ENGLISH))) {
            		row40.PrimaryContactName = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
            	} else {
                	row40.PrimaryContactName = tmpContent_tDBInput_6;
                }
            } else {
                row40.PrimaryContactName = null;
            }
		                    }
					





 



/**
 * [tDBInput_6 begin ] stop
 */
	
	/**
	 * [tDBInput_6 main ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 


	tos_count_tDBInput_6++;

/**
 * [tDBInput_6 main ] stop
 */
	
	/**
	 * [tDBInput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 



/**
 * [tDBInput_6 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row40 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row40";

	

			//row40
			//row40


			
				
				if(execStat){
					runStat.updateStatOnConnection("row40"+iterateId,1, 1);
				}
				
				
				
			

		


			   
			   

					row40Struct row40_HashRow = new row40Struct();
		   	   	   
				
				row40_HashRow.CompanyName = row40.CompanyName;
				
				row40_HashRow.customerid = row40.customerid;
				
				row40_HashRow.companyid = row40.companyid;
				
				row40_HashRow.PriCustomerNumber = row40.PriCustomerNumber;
				
				row40_HashRow.PrimaryContactName = row40.PrimaryContactName;
				
			tHash_Lookup_row40.put(row40_HashRow);
			
            




 


	tos_count_tAdvancedHash_row40++;

/**
 * [tAdvancedHash_row40 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row40 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row40";

	

 



/**
 * [tAdvancedHash_row40 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row40 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row40";

	

 



/**
 * [tAdvancedHash_row40 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 



/**
 * [tDBInput_6 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_6 end ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

	}
}finally{
	if (rs_tDBInput_6 != null) {
		rs_tDBInput_6.close();
	}
	if (stmt_tDBInput_6 != null) {
		stmt_tDBInput_6.close();
	}
}
globalMap.put("tDBInput_6_NB_LINE",nb_line_tDBInput_6);

 

ok_Hash.put("tDBInput_6", true);
end_Hash.put("tDBInput_6", System.currentTimeMillis());




/**
 * [tDBInput_6 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row40 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row40";

	

tHash_Lookup_row40.endPut();

			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("row40"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tAdvancedHash_row40", true);
end_Hash.put("tAdvancedHash_row40", System.currentTimeMillis());




/**
 * [tAdvancedHash_row40 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_6 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 



/**
 * [tDBInput_6 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row40 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row40";

	

 



/**
 * [tAdvancedHash_row40 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_6_SUBPROCESS_STATE", 1);
	}
	


public static class row17Struct implements routines.system.IPersistableRow<row17Struct> {
    final static byte[] commonByteArrayLock_IMPORTINGEVMDATA_ImportingEVM = new byte[0];
    static byte[] commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[0];

	
			    public Integer ModeratorID;

				public Integer getModeratorID () {
					return this.ModeratorID;
				}
				
			    public boolean Enabled;

				public boolean getEnabled () {
					return this.Enabled;
				}
				
			    public Integer UserID;

				public Integer getUserID () {
					return this.UserID;
				}
				
			    public java.util.Date CreatedDate;

				public java.util.Date getCreatedDate () {
					return this.CreatedDate;
				}
				
			    public java.util.Date LastModified;

				public java.util.Date getLastModified () {
					return this.LastModified;
				}
				
			    public String WholesalerID;

				public String getWholesalerID () {
					return this.WholesalerID;
				}
				
			    public Object UniqueModeratorID;

				public Object getUniqueModeratorID () {
					return this.UniqueModeratorID;
				}
				
			    public String SecCustomerNumber;

				public String getSecCustomerNumber () {
					return this.SecCustomerNumber;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IMPORTINGEVMDATA_ImportingEVM.length) {
				if(length < 1024 && commonByteArray_IMPORTINGEVMDATA_ImportingEVM.length == 0) {
   					commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[1024];
				} else {
   					commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IMPORTINGEVMDATA_ImportingEVM, 0, length);
			strReturn = new String(commonByteArray_IMPORTINGEVMDATA_ImportingEVM, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IMPORTINGEVMDATA_ImportingEVM) {

        	try {

        		int length = 0;
		
						this.ModeratorID = readInteger(dis);
					
			        this.Enabled = dis.readBoolean();
					
						this.UserID = readInteger(dis);
					
					this.CreatedDate = readDate(dis);
					
					this.LastModified = readDate(dis);
					
					this.WholesalerID = readString(dis);
					
						this.UniqueModeratorID = (Object) dis.readObject();
					
					this.SecCustomerNumber = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.ModeratorID,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.Enabled);
					
					// Integer
				
						writeInteger(this.UserID,dos);
					
					// java.util.Date
				
						writeDate(this.CreatedDate,dos);
					
					// java.util.Date
				
						writeDate(this.LastModified,dos);
					
					// String
				
						writeString(this.WholesalerID,dos);
					
					// Object
				
       			    	dos.writeObject(this.UniqueModeratorID);
					
					// String
				
						writeString(this.SecCustomerNumber,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ModeratorID="+String.valueOf(ModeratorID));
		sb.append(",Enabled="+String.valueOf(Enabled));
		sb.append(",UserID="+String.valueOf(UserID));
		sb.append(",CreatedDate="+String.valueOf(CreatedDate));
		sb.append(",LastModified="+String.valueOf(LastModified));
		sb.append(",WholesalerID="+WholesalerID);
		sb.append(",UniqueModeratorID="+String.valueOf(UniqueModeratorID));
		sb.append(",SecCustomerNumber="+SecCustomerNumber);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row17Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row15Struct implements routines.system.IPersistableRow<row15Struct> {
    final static byte[] commonByteArrayLock_IMPORTINGEVMDATA_ImportingEVM = new byte[0];
    static byte[] commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[0];

	
			    public Integer ModeratorID;

				public Integer getModeratorID () {
					return this.ModeratorID;
				}
				
			    public boolean Enabled;

				public boolean getEnabled () {
					return this.Enabled;
				}
				
			    public Integer UserID;

				public Integer getUserID () {
					return this.UserID;
				}
				
			    public java.util.Date CreatedDate;

				public java.util.Date getCreatedDate () {
					return this.CreatedDate;
				}
				
			    public java.util.Date LastModified;

				public java.util.Date getLastModified () {
					return this.LastModified;
				}
				
			    public String WholesalerID;

				public String getWholesalerID () {
					return this.WholesalerID;
				}
				
			    public Object UniqueModeratorID;

				public Object getUniqueModeratorID () {
					return this.UniqueModeratorID;
				}
				
			    public String SecCustomerNumber;

				public String getSecCustomerNumber () {
					return this.SecCustomerNumber;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IMPORTINGEVMDATA_ImportingEVM.length) {
				if(length < 1024 && commonByteArray_IMPORTINGEVMDATA_ImportingEVM.length == 0) {
   					commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[1024];
				} else {
   					commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IMPORTINGEVMDATA_ImportingEVM, 0, length);
			strReturn = new String(commonByteArray_IMPORTINGEVMDATA_ImportingEVM, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IMPORTINGEVMDATA_ImportingEVM) {

        	try {

        		int length = 0;
		
						this.ModeratorID = readInteger(dis);
					
			        this.Enabled = dis.readBoolean();
					
						this.UserID = readInteger(dis);
					
					this.CreatedDate = readDate(dis);
					
					this.LastModified = readDate(dis);
					
					this.WholesalerID = readString(dis);
					
						this.UniqueModeratorID = (Object) dis.readObject();
					
					this.SecCustomerNumber = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.ModeratorID,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.Enabled);
					
					// Integer
				
						writeInteger(this.UserID,dos);
					
					// java.util.Date
				
						writeDate(this.CreatedDate,dos);
					
					// java.util.Date
				
						writeDate(this.LastModified,dos);
					
					// String
				
						writeString(this.WholesalerID,dos);
					
					// Object
				
       			    	dos.writeObject(this.UniqueModeratorID);
					
					// String
				
						writeString(this.SecCustomerNumber,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ModeratorID="+String.valueOf(ModeratorID));
		sb.append(",Enabled="+String.valueOf(Enabled));
		sb.append(",UserID="+String.valueOf(UserID));
		sb.append(",CreatedDate="+String.valueOf(CreatedDate));
		sb.append(",LastModified="+String.valueOf(LastModified));
		sb.append(",WholesalerID="+WholesalerID);
		sb.append(",UniqueModeratorID="+String.valueOf(UniqueModeratorID));
		sb.append(",SecCustomerNumber="+SecCustomerNumber);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row15Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row15Struct row15 = new row15Struct();
row15Struct row17 = row15;





	
	/**
	 * [tAdvancedHash_row17 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row17", false);
		start_Hash.put("tAdvancedHash_row17", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row17";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("row17"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tAdvancedHash_row17 = 0;
		

			   		// connection name:row17
			   		// source node:tLogRow_11 - inputs:(row15) outputs:(row17,row17) | target node:tAdvancedHash_row17 - inputs:(row17) outputs:()
			   		// linked node: tMap_3 - inputs:(row16,row40,row17,row2) outputs:(AddNewModerator)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row17 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_ROWS;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row17Struct> tHash_Lookup_row17 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row17Struct>getLookup(matchingModeEnum_row17);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row17", tHash_Lookup_row17);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row17 begin ] stop
 */



	
	/**
	 * [tLogRow_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_11", false);
		start_Hash.put("tLogRow_11", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_11";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("row15"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tLogRow_11 = 0;
		

	///////////////////////
	
         class Util_tLogRow_11 {

        String[] des_top = { ".", ".", "-", "+" };

        String[] des_head = { "|=", "=|", "-", "+" };

        String[] des_bottom = { "'", "'", "-", "+" };

        String name="";

        java.util.List<String[]> list = new java.util.ArrayList<String[]>();

        int[] colLengths = new int[8];

        public void addRow(String[] row) {

            for (int i = 0; i < 8; i++) {
                if (row[i]!=null) {
                  colLengths[i] = Math.max(colLengths[i], row[i].length());
                }
            }
            list.add(row);
        }

        public void setTableName(String name) {

            this.name = name;
        }

            public StringBuilder format() {
            
                StringBuilder sb = new StringBuilder();
  
            
                    sb.append(print(des_top));
    
                    int totals = 0;
                    for (int i = 0; i < colLengths.length; i++) {
                        totals = totals + colLengths[i];
                    }
    
                    // name
                    sb.append("|");
                    int k = 0;
                    for (k = 0; k < (totals + 7 - name.length()) / 2; k++) {
                        sb.append(' ');
                    }
                    sb.append(name);
                    for (int i = 0; i < totals + 7 - name.length() - k; i++) {
                        sb.append(' ');
                    }
                    sb.append("|\n");

                    // head and rows
                    sb.append(print(des_head));
                    for (int i = 0; i < list.size(); i++) {
    
                        String[] row = list.get(i);
    
                        java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());
                        
                        StringBuilder sbformat = new StringBuilder();                                             
        			        sbformat.append("|%1$-");
        			        sbformat.append(colLengths[0]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%2$-");
        			        sbformat.append(colLengths[1]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%3$-");
        			        sbformat.append(colLengths[2]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%4$-");
        			        sbformat.append(colLengths[3]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%5$-");
        			        sbformat.append(colLengths[4]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%6$-");
        			        sbformat.append(colLengths[5]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%7$-");
        			        sbformat.append(colLengths[6]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%8$-");
        			        sbformat.append(colLengths[7]);
        			        sbformat.append("s");
        			                      
                        sbformat.append("|\n");                    
       
                        formatter.format(sbformat.toString(), (Object[])row);	
                                
                        sb.append(formatter.toString());
                        if (i == 0)
                            sb.append(print(des_head)); // print the head
                    }
    
                    // end
                    sb.append(print(des_bottom));
                    return sb;
                }
            

            private StringBuilder print(String[] fillChars) {
                StringBuilder sb = new StringBuilder();
                //first column
                sb.append(fillChars[0]);                
                    for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);	                

                    for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[4] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[5] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[6] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                
                    //last column
                    for (int i = 0; i < colLengths[7] - fillChars[1].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }         
                sb.append(fillChars[1]);
                sb.append("\n");               
                return sb;
            }
            
            public boolean isTableEmpty(){
            	if (list.size() > 1)
            		return false;
            	return true;
            }
        }
        Util_tLogRow_11 util_tLogRow_11 = new Util_tLogRow_11();
        util_tLogRow_11.setTableName("ModeratorDataLog");
        util_tLogRow_11.addRow(new String[]{"ModeratorID","Enabled","UserID","CreatedDate","LastModified","WholesalerID","UniqueModeratorID","SecCustomerNumber",});        
 		StringBuilder strBuffer_tLogRow_11 = null;
		int nb_line_tLogRow_11 = 0;
///////////////////////    			



 



/**
 * [tLogRow_11 begin ] stop
 */



	
	/**
	 * [tDBInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_3", false);
		start_Hash.put("tDBInput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_3";

	
		int tos_count_tDBInput_3 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_3 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_3 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_3  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_3, talendToDBArray_tDBInput_3); 
		    int nb_line_tDBInput_3 = 0;
		    java.sql.Connection conn_tDBInput_3 = null;
		        conn_tDBInput_3 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
			String dbschema_tDBInput_3 = (String)globalMap.get("dbschema_tDBConnection_1");
		    
			java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();

		    String dbquery_tDBInput_3 = "SELECT MAX(m.ID) as ModeratorID, 1 as Enabled, MAX(u.UserID) as UserID, GETDATE() as CreatedDate,\nGETDATE() as LastMod"
+"ified , '0000000001' as WholesalerID,  NEWID() as UniqueModeratorID,\nMAX (m.SecCustomerNumber) as SecCustomerNumber  FR"
+"OM dbo.Moderator m\nright outer JOIN dbo.[User] u on m.UserID = u.UserID ";
			

            	globalMap.put("tDBInput_3_QUERY",dbquery_tDBInput_3);
		    java.sql.ResultSet rs_tDBInput_3 = null;

		    try {
		    	rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
		    	int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

		    String tmpContent_tDBInput_3 = null;
		    
		    
		    while (rs_tDBInput_3.next()) {
		        nb_line_tDBInput_3++;
		        
							if(colQtyInRs_tDBInput_3 < 1) {
								row15.ModeratorID = null;
							} else {
		                          
            row15.ModeratorID = rs_tDBInput_3.getInt(1);
            if(rs_tDBInput_3.wasNull()){
                    row15.ModeratorID = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 2) {
								row15.Enabled = false;
							} else {
	                         		
            row15.Enabled = rs_tDBInput_3.getBoolean(2);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 3) {
								row15.UserID = null;
							} else {
		                          
            row15.UserID = rs_tDBInput_3.getInt(3);
            if(rs_tDBInput_3.wasNull()){
                    row15.UserID = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 4) {
								row15.CreatedDate = null;
							} else {
										
			row15.CreatedDate = mssqlGTU_tDBInput_3.getDate(rsmd_tDBInput_3, rs_tDBInput_3, 4);
			
		                    }
							if(colQtyInRs_tDBInput_3 < 5) {
								row15.LastModified = null;
							} else {
										
			row15.LastModified = mssqlGTU_tDBInput_3.getDate(rsmd_tDBInput_3, rs_tDBInput_3, 5);
			
		                    }
							if(colQtyInRs_tDBInput_3 < 6) {
								row15.WholesalerID = null;
							} else {
	                         		
           		tmpContent_tDBInput_3 = rs_tDBInput_3.getString(6);
            if(tmpContent_tDBInput_3 != null) {
            	if (talendToDBList_tDBInput_3 .contains(rsmd_tDBInput_3.getColumnTypeName(6).toUpperCase(java.util.Locale.ENGLISH))) {
            		row15.WholesalerID = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
            	} else {
                	row15.WholesalerID = tmpContent_tDBInput_3;
                }
            } else {
                row15.WholesalerID = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 7) {
								row15.UniqueModeratorID = null;
							} else {
		                          
            row15.UniqueModeratorID = rs_tDBInput_3.getObject(7);
            if(rs_tDBInput_3.wasNull()){
                    row15.UniqueModeratorID = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 8) {
								row15.SecCustomerNumber = null;
							} else {
	                         		
           		tmpContent_tDBInput_3 = rs_tDBInput_3.getString(8);
            if(tmpContent_tDBInput_3 != null) {
            	if (talendToDBList_tDBInput_3 .contains(rsmd_tDBInput_3.getColumnTypeName(8).toUpperCase(java.util.Locale.ENGLISH))) {
            		row15.SecCustomerNumber = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
            	} else {
                	row15.SecCustomerNumber = tmpContent_tDBInput_3;
                }
            } else {
                row15.SecCustomerNumber = null;
            }
		                    }
					





 



/**
 * [tDBInput_3 begin ] stop
 */
	
	/**
	 * [tDBInput_3 main ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 


	tos_count_tDBInput_3++;

/**
 * [tDBInput_3 main ] stop
 */
	
	/**
	 * [tDBInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tLogRow_11 main ] start
	 */

	

	
	
	currentComponent="tLogRow_11";

	

			//row15
			//row15


			
				
				if(execStat){
					runStat.updateStatOnConnection("row15"+iterateId,1, 1);
				}
				
				
				
			

		
///////////////////////		
						

				
				String[] row_tLogRow_11 = new String[8];
   				
	    		if(row15.ModeratorID != null) { //              
                 row_tLogRow_11[0]=    						    
				                String.valueOf(row15.ModeratorID)			
					          ;	
							
	    		} //			
    			              
                 row_tLogRow_11[1]=    						    
				                String.valueOf(row15.Enabled)			
					          ;	
										
    			   				
	    		if(row15.UserID != null) { //              
                 row_tLogRow_11[2]=    						    
				                String.valueOf(row15.UserID)			
					          ;	
							
	    		} //			
    			   				
	    		if(row15.CreatedDate != null) { //              
                 row_tLogRow_11[3]=    						
								FormatterUtils.format_Date(row15.CreatedDate, "yyyy-MM-dd HH:mm:ss")
					          ;	
							
	    		} //			
    			   				
	    		if(row15.LastModified != null) { //              
                 row_tLogRow_11[4]=    						
								FormatterUtils.format_Date(row15.LastModified, "yyyy-MM-dd HH:mm:ss")
					          ;	
							
	    		} //			
    			   				
	    		if(row15.WholesalerID != null) { //              
                 row_tLogRow_11[5]=    						    
				                String.valueOf(row15.WholesalerID)			
					          ;	
							
	    		} //			
    			   				
	    		if(row15.UniqueModeratorID != null) { //              
                 row_tLogRow_11[6]=    						    
				                String.valueOf(row15.UniqueModeratorID)			
					          ;	
							
	    		} //			
    			   				
	    		if(row15.SecCustomerNumber != null) { //              
                 row_tLogRow_11[7]=    						    
				                String.valueOf(row15.SecCustomerNumber)			
					          ;	
							
	    		} //			
    			 

				util_tLogRow_11.addRow(row_tLogRow_11);	
				nb_line_tLogRow_11++;
//////

//////                    
                    
///////////////////////    			

 
     row17 = row15;


	tos_count_tLogRow_11++;

/**
 * [tLogRow_11 main ] stop
 */
	
	/**
	 * [tLogRow_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_11";

	

 



/**
 * [tLogRow_11 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row17 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row17";

	

			//row17
			//row17


			
				
				if(execStat){
					runStat.updateStatOnConnection("row17"+iterateId,1, 1);
				}
				
				
				
			

		


			   
			   

					row17Struct row17_HashRow = new row17Struct();
		   	   	   
				
				row17_HashRow.ModeratorID = row17.ModeratorID;
				
				row17_HashRow.Enabled = row17.Enabled;
				
				row17_HashRow.UserID = row17.UserID;
				
				row17_HashRow.CreatedDate = row17.CreatedDate;
				
				row17_HashRow.LastModified = row17.LastModified;
				
				row17_HashRow.WholesalerID = row17.WholesalerID;
				
				row17_HashRow.UniqueModeratorID = row17.UniqueModeratorID;
				
				row17_HashRow.SecCustomerNumber = row17.SecCustomerNumber;
				
			tHash_Lookup_row17.put(row17_HashRow);
			
            




 


	tos_count_tAdvancedHash_row17++;

/**
 * [tAdvancedHash_row17 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row17 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row17";

	

 



/**
 * [tAdvancedHash_row17 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row17 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row17";

	

 



/**
 * [tAdvancedHash_row17 process_data_end ] stop
 */



	
	/**
	 * [tLogRow_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_11";

	

 



/**
 * [tLogRow_11 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_3 end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

	}
}finally{
	if (rs_tDBInput_3 != null) {
		rs_tDBInput_3.close();
	}
	if (stmt_tDBInput_3 != null) {
		stmt_tDBInput_3.close();
	}
}
globalMap.put("tDBInput_3_NB_LINE",nb_line_tDBInput_3);

 

ok_Hash.put("tDBInput_3", true);
end_Hash.put("tDBInput_3", System.currentTimeMillis());




/**
 * [tDBInput_3 end ] stop
 */

	
	/**
	 * [tLogRow_11 end ] start
	 */

	

	
	
	currentComponent="tLogRow_11";

	


//////

                    
                    java.io.PrintStream consoleOut_tLogRow_11 = null;
                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_11 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_11 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_11);
                    }
                    
                    consoleOut_tLogRow_11.println(util_tLogRow_11.format().toString());
                    consoleOut_tLogRow_11.flush();
//////
globalMap.put("tLogRow_11_NB_LINE",nb_line_tLogRow_11);

///////////////////////    			

			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("row15"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tLogRow_11", true);
end_Hash.put("tLogRow_11", System.currentTimeMillis());




/**
 * [tLogRow_11 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row17 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row17";

	

tHash_Lookup_row17.endPut();

			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("row17"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tAdvancedHash_row17", true);
end_Hash.put("tAdvancedHash_row17", System.currentTimeMillis());




/**
 * [tAdvancedHash_row17 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 finally ] stop
 */

	
	/**
	 * [tLogRow_11 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_11";

	

 



/**
 * [tLogRow_11 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row17 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row17";

	

 



/**
 * [tAdvancedHash_row17 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class row2Struct implements routines.system.IPersistableComparableLookupRow<row2Struct> {
    final static byte[] commonByteArrayLock_IMPORTINGEVMDATA_ImportingEVM = new byte[0];
    static byte[] commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int userid;

				public int getUserid () {
					return this.userid;
				}
				
			    public String email;

				public String getEmail () {
					return this.email;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.email == null) ? 0 : this.email.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row2Struct other = (row2Struct) obj;
		
						if (this.email == null) {
							if (other.email != null)
								return false;
						
						} else if (!this.email.equals(other.email))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row2Struct other) {

		other.userid = this.userid;
	            other.email = this.email;
	            
	}

	public void copyKeysDataTo(row2Struct other) {

		other.email = this.email;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IMPORTINGEVMDATA_ImportingEVM.length) {
				if(length < 1024 && commonByteArray_IMPORTINGEVMDATA_ImportingEVM.length == 0) {
   					commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[1024];
				} else {
   					commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IMPORTINGEVMDATA_ImportingEVM, 0, length);
			strReturn = new String(commonByteArray_IMPORTINGEVMDATA_ImportingEVM, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IMPORTINGEVMDATA_ImportingEVM) {

        	try {

        		int length = 0;
		
					this.email = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.email,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.userid = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.userid);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("userid="+String.valueOf(userid));
		sb.append(",email="+email);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.email, other.email);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_9_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();




	
	/**
	 * [tAdvancedHash_row2 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row2", false);
		start_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("row2"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tAdvancedHash_row2 = 0;
		

			   		// connection name:row2
			   		// source node:tDBInput_9 - inputs:(after_tFileInputDelimited_3) outputs:(row2,row2) | target node:tAdvancedHash_row2 - inputs:(row2) outputs:()
			   		// linked node: tMap_3 - inputs:(row16,row40,row17,row2) outputs:(AddNewModerator)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row2 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row2Struct>getLookup(matchingModeEnum_row2);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row2", tHash_Lookup_row2);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row2 begin ] stop
 */



	
	/**
	 * [tDBInput_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_9", false);
		start_Hash.put("tDBInput_9", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_9";

	
		int tos_count_tDBInput_9 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_9 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_9 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_9  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_9, talendToDBArray_tDBInput_9); 
		    int nb_line_tDBInput_9 = 0;
		    java.sql.Connection conn_tDBInput_9 = null;
		        conn_tDBInput_9 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
			String dbschema_tDBInput_9 = (String)globalMap.get("dbschema_tDBConnection_1");
		    
			java.sql.Statement stmt_tDBInput_9 = conn_tDBInput_9.createStatement();

		    String dbquery_tDBInput_9 = "select userid as userid, email  FROM	\"User\" ";
			

            	globalMap.put("tDBInput_9_QUERY",dbquery_tDBInput_9);
		    java.sql.ResultSet rs_tDBInput_9 = null;

		    try {
		    	rs_tDBInput_9 = stmt_tDBInput_9.executeQuery(dbquery_tDBInput_9);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_9 = rs_tDBInput_9.getMetaData();
		    	int colQtyInRs_tDBInput_9 = rsmd_tDBInput_9.getColumnCount();

		    String tmpContent_tDBInput_9 = null;
		    
		    
		    while (rs_tDBInput_9.next()) {
		        nb_line_tDBInput_9++;
		        
							if(colQtyInRs_tDBInput_9 < 1) {
								row2.userid = 0;
							} else {
		                          
            row2.userid = rs_tDBInput_9.getInt(1);
            if(rs_tDBInput_9.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_9 < 2) {
								row2.email = null;
							} else {
	                         		
           		tmpContent_tDBInput_9 = rs_tDBInput_9.getString(2);
            if(tmpContent_tDBInput_9 != null) {
            	if (talendToDBList_tDBInput_9 .contains(rsmd_tDBInput_9.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
            		row2.email = FormatterUtils.formatUnwithE(tmpContent_tDBInput_9);
            	} else {
                	row2.email = tmpContent_tDBInput_9;
                }
            } else {
                row2.email = null;
            }
		                    }
					





 



/**
 * [tDBInput_9 begin ] stop
 */
	
	/**
	 * [tDBInput_9 main ] start
	 */

	

	
	
	currentComponent="tDBInput_9";

	

 


	tos_count_tDBInput_9++;

/**
 * [tDBInput_9 main ] stop
 */
	
	/**
	 * [tDBInput_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_9";

	

 



/**
 * [tDBInput_9 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

			//row2
			//row2


			
				
				if(execStat){
					runStat.updateStatOnConnection("row2"+iterateId,1, 1);
				}
				
				
				
			

		


			   
			   

					row2Struct row2_HashRow = new row2Struct();
		   	   	   
				
				row2_HashRow.userid = row2.userid;
				
				row2_HashRow.email = row2.email;
				
			tHash_Lookup_row2.put(row2_HashRow);
			
            




 


	tos_count_tAdvancedHash_row2++;

/**
 * [tAdvancedHash_row2 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

 



/**
 * [tAdvancedHash_row2 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row2 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

 



/**
 * [tAdvancedHash_row2 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_9";

	

 



/**
 * [tDBInput_9 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_9 end ] start
	 */

	

	
	
	currentComponent="tDBInput_9";

	

	}
}finally{
	if (rs_tDBInput_9 != null) {
		rs_tDBInput_9.close();
	}
	if (stmt_tDBInput_9 != null) {
		stmt_tDBInput_9.close();
	}
}
globalMap.put("tDBInput_9_NB_LINE",nb_line_tDBInput_9);

 

ok_Hash.put("tDBInput_9", true);
end_Hash.put("tDBInput_9", System.currentTimeMillis());




/**
 * [tDBInput_9 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

tHash_Lookup_row2.endPut();

			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("row2"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tAdvancedHash_row2", true);
end_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());




/**
 * [tAdvancedHash_row2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_9 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_9";

	

 



/**
 * [tDBInput_9 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

 



/**
 * [tAdvancedHash_row2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_9_SUBPROCESS_STATE", 1);
	}
	


public static class row23Struct implements routines.system.IPersistableRow<row23Struct> {
    final static byte[] commonByteArrayLock_IMPORTINGEVMDATA_ImportingEVM = new byte[0];
    static byte[] commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int UserID;

				public int getUserID () {
					return this.UserID;
				}
				
			    public String Username;

				public String getUsername () {
					return this.Username;
				}
				
			    public String Password;

				public String getPassword () {
					return this.Password;
				}
				
			    public String DisplayName;

				public String getDisplayName () {
					return this.DisplayName;
				}
				
			    public String Email;

				public String getEmail () {
					return this.Email;
				}
				
			    public String Telephone;

				public String getTelephone () {
					return this.Telephone;
				}
				
			    public boolean Enabled;

				public boolean getEnabled () {
					return this.Enabled;
				}
				
			    public Integer CompanyID;

				public Integer getCompanyID () {
					return this.CompanyID;
				}
				
			    public Integer SalesPersonID;

				public Integer getSalesPersonID () {
					return this.SalesPersonID;
				}
				
			    public Integer RoleID;

				public Integer getRoleID () {
					return this.RoleID;
				}
				
			    public Boolean MustChangePassword;

				public Boolean getMustChangePassword () {
					return this.MustChangePassword;
				}
				
			    public String Address1;

				public String getAddress1 () {
					return this.Address1;
				}
				
			    public String Address2;

				public String getAddress2 () {
					return this.Address2;
				}
				
			    public String City;

				public String getCity () {
					return this.City;
				}
				
			    public String Country;

				public String getCountry () {
					return this.Country;
				}
				
			    public String Region;

				public String getRegion () {
					return this.Region;
				}
				
			    public String PostalCode;

				public String getPostalCode () {
					return this.PostalCode;
				}
				
			    public Integer CharityID;

				public Integer getCharityID () {
					return this.CharityID;
				}
				
			    public String WebMemberID;

				public String getWebMemberID () {
					return this.WebMemberID;
				}
				
			    public Object UserUniqueID;

				public Object getUserUniqueID () {
					return this.UserUniqueID;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.UserID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row23Struct other = (row23Struct) obj;
		
						if (this.UserID != other.UserID)
							return false;
					

		return true;
    }

	public void copyDataTo(row23Struct other) {

		other.UserID = this.UserID;
	            other.Username = this.Username;
	            other.Password = this.Password;
	            other.DisplayName = this.DisplayName;
	            other.Email = this.Email;
	            other.Telephone = this.Telephone;
	            other.Enabled = this.Enabled;
	            other.CompanyID = this.CompanyID;
	            other.SalesPersonID = this.SalesPersonID;
	            other.RoleID = this.RoleID;
	            other.MustChangePassword = this.MustChangePassword;
	            other.Address1 = this.Address1;
	            other.Address2 = this.Address2;
	            other.City = this.City;
	            other.Country = this.Country;
	            other.Region = this.Region;
	            other.PostalCode = this.PostalCode;
	            other.CharityID = this.CharityID;
	            other.WebMemberID = this.WebMemberID;
	            other.UserUniqueID = this.UserUniqueID;
	            
	}

	public void copyKeysDataTo(row23Struct other) {

		other.UserID = this.UserID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IMPORTINGEVMDATA_ImportingEVM.length) {
				if(length < 1024 && commonByteArray_IMPORTINGEVMDATA_ImportingEVM.length == 0) {
   					commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[1024];
				} else {
   					commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IMPORTINGEVMDATA_ImportingEVM, 0, length);
			strReturn = new String(commonByteArray_IMPORTINGEVMDATA_ImportingEVM, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IMPORTINGEVMDATA_ImportingEVM) {

        	try {

        		int length = 0;
		
			        this.UserID = dis.readInt();
					
					this.Username = readString(dis);
					
					this.Password = readString(dis);
					
					this.DisplayName = readString(dis);
					
					this.Email = readString(dis);
					
					this.Telephone = readString(dis);
					
			        this.Enabled = dis.readBoolean();
					
						this.CompanyID = readInteger(dis);
					
						this.SalesPersonID = readInteger(dis);
					
						this.RoleID = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.MustChangePassword = null;
           				} else {
           			    	this.MustChangePassword = dis.readBoolean();
           				}
					
					this.Address1 = readString(dis);
					
					this.Address2 = readString(dis);
					
					this.City = readString(dis);
					
					this.Country = readString(dis);
					
					this.Region = readString(dis);
					
					this.PostalCode = readString(dis);
					
						this.CharityID = readInteger(dis);
					
					this.WebMemberID = readString(dis);
					
						this.UserUniqueID = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.UserID);
					
					// String
				
						writeString(this.Username,dos);
					
					// String
				
						writeString(this.Password,dos);
					
					// String
				
						writeString(this.DisplayName,dos);
					
					// String
				
						writeString(this.Email,dos);
					
					// String
				
						writeString(this.Telephone,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.Enabled);
					
					// Integer
				
						writeInteger(this.CompanyID,dos);
					
					// Integer
				
						writeInteger(this.SalesPersonID,dos);
					
					// Integer
				
						writeInteger(this.RoleID,dos);
					
					// Boolean
				
						if(this.MustChangePassword == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.MustChangePassword);
		            	}
					
					// String
				
						writeString(this.Address1,dos);
					
					// String
				
						writeString(this.Address2,dos);
					
					// String
				
						writeString(this.City,dos);
					
					// String
				
						writeString(this.Country,dos);
					
					// String
				
						writeString(this.Region,dos);
					
					// String
				
						writeString(this.PostalCode,dos);
					
					// Integer
				
						writeInteger(this.CharityID,dos);
					
					// String
				
						writeString(this.WebMemberID,dos);
					
					// Object
				
       			    	dos.writeObject(this.UserUniqueID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("UserID="+String.valueOf(UserID));
		sb.append(",Username="+Username);
		sb.append(",Password="+Password);
		sb.append(",DisplayName="+DisplayName);
		sb.append(",Email="+Email);
		sb.append(",Telephone="+Telephone);
		sb.append(",Enabled="+String.valueOf(Enabled));
		sb.append(",CompanyID="+String.valueOf(CompanyID));
		sb.append(",SalesPersonID="+String.valueOf(SalesPersonID));
		sb.append(",RoleID="+String.valueOf(RoleID));
		sb.append(",MustChangePassword="+String.valueOf(MustChangePassword));
		sb.append(",Address1="+Address1);
		sb.append(",Address2="+Address2);
		sb.append(",City="+City);
		sb.append(",Country="+Country);
		sb.append(",Region="+Region);
		sb.append(",PostalCode="+PostalCode);
		sb.append(",CharityID="+String.valueOf(CharityID));
		sb.append(",WebMemberID="+WebMemberID);
		sb.append(",UserUniqueID="+String.valueOf(UserUniqueID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row23Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.UserID, other.UserID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row27Struct implements routines.system.IPersistableRow<row27Struct> {
    final static byte[] commonByteArrayLock_IMPORTINGEVMDATA_ImportingEVM = new byte[0];
    static byte[] commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int UserID;

				public int getUserID () {
					return this.UserID;
				}
				
			    public String Username;

				public String getUsername () {
					return this.Username;
				}
				
			    public String Password;

				public String getPassword () {
					return this.Password;
				}
				
			    public String DisplayName;

				public String getDisplayName () {
					return this.DisplayName;
				}
				
			    public String Email;

				public String getEmail () {
					return this.Email;
				}
				
			    public String Telephone;

				public String getTelephone () {
					return this.Telephone;
				}
				
			    public boolean Enabled;

				public boolean getEnabled () {
					return this.Enabled;
				}
				
			    public Integer CompanyID;

				public Integer getCompanyID () {
					return this.CompanyID;
				}
				
			    public Integer SalesPersonID;

				public Integer getSalesPersonID () {
					return this.SalesPersonID;
				}
				
			    public Integer RoleID;

				public Integer getRoleID () {
					return this.RoleID;
				}
				
			    public Boolean MustChangePassword;

				public Boolean getMustChangePassword () {
					return this.MustChangePassword;
				}
				
			    public String Address1;

				public String getAddress1 () {
					return this.Address1;
				}
				
			    public String Address2;

				public String getAddress2 () {
					return this.Address2;
				}
				
			    public String City;

				public String getCity () {
					return this.City;
				}
				
			    public String Country;

				public String getCountry () {
					return this.Country;
				}
				
			    public String Region;

				public String getRegion () {
					return this.Region;
				}
				
			    public String PostalCode;

				public String getPostalCode () {
					return this.PostalCode;
				}
				
			    public Integer CharityID;

				public Integer getCharityID () {
					return this.CharityID;
				}
				
			    public String WebMemberID;

				public String getWebMemberID () {
					return this.WebMemberID;
				}
				
			    public Object UserUniqueID;

				public Object getUserUniqueID () {
					return this.UserUniqueID;
				}
				
			    public String errorCode;

				public String getErrorCode () {
					return this.errorCode;
				}
				
			    public String errorMessage;

				public String getErrorMessage () {
					return this.errorMessage;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.UserID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row27Struct other = (row27Struct) obj;
		
						if (this.UserID != other.UserID)
							return false;
					

		return true;
    }

	public void copyDataTo(row27Struct other) {

		other.UserID = this.UserID;
	            other.Username = this.Username;
	            other.Password = this.Password;
	            other.DisplayName = this.DisplayName;
	            other.Email = this.Email;
	            other.Telephone = this.Telephone;
	            other.Enabled = this.Enabled;
	            other.CompanyID = this.CompanyID;
	            other.SalesPersonID = this.SalesPersonID;
	            other.RoleID = this.RoleID;
	            other.MustChangePassword = this.MustChangePassword;
	            other.Address1 = this.Address1;
	            other.Address2 = this.Address2;
	            other.City = this.City;
	            other.Country = this.Country;
	            other.Region = this.Region;
	            other.PostalCode = this.PostalCode;
	            other.CharityID = this.CharityID;
	            other.WebMemberID = this.WebMemberID;
	            other.UserUniqueID = this.UserUniqueID;
	            other.errorCode = this.errorCode;
	            other.errorMessage = this.errorMessage;
	            
	}

	public void copyKeysDataTo(row27Struct other) {

		other.UserID = this.UserID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IMPORTINGEVMDATA_ImportingEVM.length) {
				if(length < 1024 && commonByteArray_IMPORTINGEVMDATA_ImportingEVM.length == 0) {
   					commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[1024];
				} else {
   					commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IMPORTINGEVMDATA_ImportingEVM, 0, length);
			strReturn = new String(commonByteArray_IMPORTINGEVMDATA_ImportingEVM, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IMPORTINGEVMDATA_ImportingEVM) {

        	try {

        		int length = 0;
		
			        this.UserID = dis.readInt();
					
					this.Username = readString(dis);
					
					this.Password = readString(dis);
					
					this.DisplayName = readString(dis);
					
					this.Email = readString(dis);
					
					this.Telephone = readString(dis);
					
			        this.Enabled = dis.readBoolean();
					
						this.CompanyID = readInteger(dis);
					
						this.SalesPersonID = readInteger(dis);
					
						this.RoleID = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.MustChangePassword = null;
           				} else {
           			    	this.MustChangePassword = dis.readBoolean();
           				}
					
					this.Address1 = readString(dis);
					
					this.Address2 = readString(dis);
					
					this.City = readString(dis);
					
					this.Country = readString(dis);
					
					this.Region = readString(dis);
					
					this.PostalCode = readString(dis);
					
						this.CharityID = readInteger(dis);
					
					this.WebMemberID = readString(dis);
					
						this.UserUniqueID = (Object) dis.readObject();
					
					this.errorCode = readString(dis);
					
					this.errorMessage = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.UserID);
					
					// String
				
						writeString(this.Username,dos);
					
					// String
				
						writeString(this.Password,dos);
					
					// String
				
						writeString(this.DisplayName,dos);
					
					// String
				
						writeString(this.Email,dos);
					
					// String
				
						writeString(this.Telephone,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.Enabled);
					
					// Integer
				
						writeInteger(this.CompanyID,dos);
					
					// Integer
				
						writeInteger(this.SalesPersonID,dos);
					
					// Integer
				
						writeInteger(this.RoleID,dos);
					
					// Boolean
				
						if(this.MustChangePassword == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.MustChangePassword);
		            	}
					
					// String
				
						writeString(this.Address1,dos);
					
					// String
				
						writeString(this.Address2,dos);
					
					// String
				
						writeString(this.City,dos);
					
					// String
				
						writeString(this.Country,dos);
					
					// String
				
						writeString(this.Region,dos);
					
					// String
				
						writeString(this.PostalCode,dos);
					
					// Integer
				
						writeInteger(this.CharityID,dos);
					
					// String
				
						writeString(this.WebMemberID,dos);
					
					// Object
				
       			    	dos.writeObject(this.UserUniqueID);
					
					// String
				
						writeString(this.errorCode,dos);
					
					// String
				
						writeString(this.errorMessage,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("UserID="+String.valueOf(UserID));
		sb.append(",Username="+Username);
		sb.append(",Password="+Password);
		sb.append(",DisplayName="+DisplayName);
		sb.append(",Email="+Email);
		sb.append(",Telephone="+Telephone);
		sb.append(",Enabled="+String.valueOf(Enabled));
		sb.append(",CompanyID="+String.valueOf(CompanyID));
		sb.append(",SalesPersonID="+String.valueOf(SalesPersonID));
		sb.append(",RoleID="+String.valueOf(RoleID));
		sb.append(",MustChangePassword="+String.valueOf(MustChangePassword));
		sb.append(",Address1="+Address1);
		sb.append(",Address2="+Address2);
		sb.append(",City="+City);
		sb.append(",Country="+Country);
		sb.append(",Region="+Region);
		sb.append(",PostalCode="+PostalCode);
		sb.append(",CharityID="+String.valueOf(CharityID));
		sb.append(",WebMemberID="+WebMemberID);
		sb.append(",UserUniqueID="+String.valueOf(UserUniqueID));
		sb.append(",errorCode="+errorCode);
		sb.append(",errorMessage="+errorMessage);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row27Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.UserID, other.UserID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class AddNewUserStruct implements routines.system.IPersistableRow<AddNewUserStruct> {
    final static byte[] commonByteArrayLock_IMPORTINGEVMDATA_ImportingEVM = new byte[0];
    static byte[] commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int UserID;

				public int getUserID () {
					return this.UserID;
				}
				
			    public String Username;

				public String getUsername () {
					return this.Username;
				}
				
			    public String Password;

				public String getPassword () {
					return this.Password;
				}
				
			    public String DisplayName;

				public String getDisplayName () {
					return this.DisplayName;
				}
				
			    public String Email;

				public String getEmail () {
					return this.Email;
				}
				
			    public String Telephone;

				public String getTelephone () {
					return this.Telephone;
				}
				
			    public boolean Enabled;

				public boolean getEnabled () {
					return this.Enabled;
				}
				
			    public Integer CompanyID;

				public Integer getCompanyID () {
					return this.CompanyID;
				}
				
			    public Integer SalesPersonID;

				public Integer getSalesPersonID () {
					return this.SalesPersonID;
				}
				
			    public Integer RoleID;

				public Integer getRoleID () {
					return this.RoleID;
				}
				
			    public Boolean MustChangePassword;

				public Boolean getMustChangePassword () {
					return this.MustChangePassword;
				}
				
			    public String Address1;

				public String getAddress1 () {
					return this.Address1;
				}
				
			    public String Address2;

				public String getAddress2 () {
					return this.Address2;
				}
				
			    public String City;

				public String getCity () {
					return this.City;
				}
				
			    public String Country;

				public String getCountry () {
					return this.Country;
				}
				
			    public String Region;

				public String getRegion () {
					return this.Region;
				}
				
			    public String PostalCode;

				public String getPostalCode () {
					return this.PostalCode;
				}
				
			    public Integer CharityID;

				public Integer getCharityID () {
					return this.CharityID;
				}
				
			    public String WebMemberID;

				public String getWebMemberID () {
					return this.WebMemberID;
				}
				
			    public Object UserUniqueID;

				public Object getUserUniqueID () {
					return this.UserUniqueID;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.UserID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final AddNewUserStruct other = (AddNewUserStruct) obj;
		
						if (this.UserID != other.UserID)
							return false;
					

		return true;
    }

	public void copyDataTo(AddNewUserStruct other) {

		other.UserID = this.UserID;
	            other.Username = this.Username;
	            other.Password = this.Password;
	            other.DisplayName = this.DisplayName;
	            other.Email = this.Email;
	            other.Telephone = this.Telephone;
	            other.Enabled = this.Enabled;
	            other.CompanyID = this.CompanyID;
	            other.SalesPersonID = this.SalesPersonID;
	            other.RoleID = this.RoleID;
	            other.MustChangePassword = this.MustChangePassword;
	            other.Address1 = this.Address1;
	            other.Address2 = this.Address2;
	            other.City = this.City;
	            other.Country = this.Country;
	            other.Region = this.Region;
	            other.PostalCode = this.PostalCode;
	            other.CharityID = this.CharityID;
	            other.WebMemberID = this.WebMemberID;
	            other.UserUniqueID = this.UserUniqueID;
	            
	}

	public void copyKeysDataTo(AddNewUserStruct other) {

		other.UserID = this.UserID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IMPORTINGEVMDATA_ImportingEVM.length) {
				if(length < 1024 && commonByteArray_IMPORTINGEVMDATA_ImportingEVM.length == 0) {
   					commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[1024];
				} else {
   					commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IMPORTINGEVMDATA_ImportingEVM, 0, length);
			strReturn = new String(commonByteArray_IMPORTINGEVMDATA_ImportingEVM, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IMPORTINGEVMDATA_ImportingEVM) {

        	try {

        		int length = 0;
		
			        this.UserID = dis.readInt();
					
					this.Username = readString(dis);
					
					this.Password = readString(dis);
					
					this.DisplayName = readString(dis);
					
					this.Email = readString(dis);
					
					this.Telephone = readString(dis);
					
			        this.Enabled = dis.readBoolean();
					
						this.CompanyID = readInteger(dis);
					
						this.SalesPersonID = readInteger(dis);
					
						this.RoleID = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.MustChangePassword = null;
           				} else {
           			    	this.MustChangePassword = dis.readBoolean();
           				}
					
					this.Address1 = readString(dis);
					
					this.Address2 = readString(dis);
					
					this.City = readString(dis);
					
					this.Country = readString(dis);
					
					this.Region = readString(dis);
					
					this.PostalCode = readString(dis);
					
						this.CharityID = readInteger(dis);
					
					this.WebMemberID = readString(dis);
					
						this.UserUniqueID = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.UserID);
					
					// String
				
						writeString(this.Username,dos);
					
					// String
				
						writeString(this.Password,dos);
					
					// String
				
						writeString(this.DisplayName,dos);
					
					// String
				
						writeString(this.Email,dos);
					
					// String
				
						writeString(this.Telephone,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.Enabled);
					
					// Integer
				
						writeInteger(this.CompanyID,dos);
					
					// Integer
				
						writeInteger(this.SalesPersonID,dos);
					
					// Integer
				
						writeInteger(this.RoleID,dos);
					
					// Boolean
				
						if(this.MustChangePassword == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.MustChangePassword);
		            	}
					
					// String
				
						writeString(this.Address1,dos);
					
					// String
				
						writeString(this.Address2,dos);
					
					// String
				
						writeString(this.City,dos);
					
					// String
				
						writeString(this.Country,dos);
					
					// String
				
						writeString(this.Region,dos);
					
					// String
				
						writeString(this.PostalCode,dos);
					
					// Integer
				
						writeInteger(this.CharityID,dos);
					
					// String
				
						writeString(this.WebMemberID,dos);
					
					// Object
				
       			    	dos.writeObject(this.UserUniqueID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("UserID="+String.valueOf(UserID));
		sb.append(",Username="+Username);
		sb.append(",Password="+Password);
		sb.append(",DisplayName="+DisplayName);
		sb.append(",Email="+Email);
		sb.append(",Telephone="+Telephone);
		sb.append(",Enabled="+String.valueOf(Enabled));
		sb.append(",CompanyID="+String.valueOf(CompanyID));
		sb.append(",SalesPersonID="+String.valueOf(SalesPersonID));
		sb.append(",RoleID="+String.valueOf(RoleID));
		sb.append(",MustChangePassword="+String.valueOf(MustChangePassword));
		sb.append(",Address1="+Address1);
		sb.append(",Address2="+Address2);
		sb.append(",City="+City);
		sb.append(",Country="+Country);
		sb.append(",Region="+Region);
		sb.append(",PostalCode="+PostalCode);
		sb.append(",CharityID="+String.valueOf(CharityID));
		sb.append(",WebMemberID="+WebMemberID);
		sb.append(",UserUniqueID="+String.valueOf(UserUniqueID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(AddNewUserStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.UserID, other.UserID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row21Struct implements routines.system.IPersistableRow<row21Struct> {
    final static byte[] commonByteArrayLock_IMPORTINGEVMDATA_ImportingEVM = new byte[0];
    static byte[] commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[0];

	
			    public String CompanyName;

				public String getCompanyName () {
					return this.CompanyName;
				}
				
			    public String EVMCustomerNumber;

				public String getEVMCustomerNumber () {
					return this.EVMCustomerNumber;
				}
				
			    public String CurrencyID;

				public String getCurrencyID () {
					return this.CurrencyID;
				}
				
			    public Integer Vertical;

				public Integer getVertical () {
					return this.Vertical;
				}
				
			    public String CustomerAdminName;

				public String getCustomerAdminName () {
					return this.CustomerAdminName;
				}
				
			    public String CustomerAdminPhoneNumber;

				public String getCustomerAdminPhoneNumber () {
					return this.CustomerAdminPhoneNumber;
				}
				
			    public String CustomerAdminEmailAddress;

				public String getCustomerAdminEmailAddress () {
					return this.CustomerAdminEmailAddress;
				}
				
			    public String CustomerAdminAddress1;

				public String getCustomerAdminAddress1 () {
					return this.CustomerAdminAddress1;
				}
				
			    public String CustomerAdminCity;

				public String getCustomerAdminCity () {
					return this.CustomerAdminCity;
				}
				
			    public String CustomerAdminCountry;

				public String getCustomerAdminCountry () {
					return this.CustomerAdminCountry;
				}
				
			    public String CustomerAdminRegion;

				public String getCustomerAdminRegion () {
					return this.CustomerAdminRegion;
				}
				
			    public String CustomerAdminPostalCode;

				public String getCustomerAdminPostalCode () {
					return this.CustomerAdminPostalCode;
				}
				
			    public String Username;

				public String getUsername () {
					return this.Username;
				}
				
			    public String Password;

				public String getPassword () {
					return this.Password;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IMPORTINGEVMDATA_ImportingEVM.length) {
				if(length < 1024 && commonByteArray_IMPORTINGEVMDATA_ImportingEVM.length == 0) {
   					commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[1024];
				} else {
   					commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IMPORTINGEVMDATA_ImportingEVM, 0, length);
			strReturn = new String(commonByteArray_IMPORTINGEVMDATA_ImportingEVM, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IMPORTINGEVMDATA_ImportingEVM) {

        	try {

        		int length = 0;
		
					this.CompanyName = readString(dis);
					
					this.EVMCustomerNumber = readString(dis);
					
					this.CurrencyID = readString(dis);
					
						this.Vertical = readInteger(dis);
					
					this.CustomerAdminName = readString(dis);
					
					this.CustomerAdminPhoneNumber = readString(dis);
					
					this.CustomerAdminEmailAddress = readString(dis);
					
					this.CustomerAdminAddress1 = readString(dis);
					
					this.CustomerAdminCity = readString(dis);
					
					this.CustomerAdminCountry = readString(dis);
					
					this.CustomerAdminRegion = readString(dis);
					
					this.CustomerAdminPostalCode = readString(dis);
					
					this.Username = readString(dis);
					
					this.Password = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CompanyName,dos);
					
					// String
				
						writeString(this.EVMCustomerNumber,dos);
					
					// String
				
						writeString(this.CurrencyID,dos);
					
					// Integer
				
						writeInteger(this.Vertical,dos);
					
					// String
				
						writeString(this.CustomerAdminName,dos);
					
					// String
				
						writeString(this.CustomerAdminPhoneNumber,dos);
					
					// String
				
						writeString(this.CustomerAdminEmailAddress,dos);
					
					// String
				
						writeString(this.CustomerAdminAddress1,dos);
					
					// String
				
						writeString(this.CustomerAdminCity,dos);
					
					// String
				
						writeString(this.CustomerAdminCountry,dos);
					
					// String
				
						writeString(this.CustomerAdminRegion,dos);
					
					// String
				
						writeString(this.CustomerAdminPostalCode,dos);
					
					// String
				
						writeString(this.Username,dos);
					
					// String
				
						writeString(this.Password,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CompanyName="+CompanyName);
		sb.append(",EVMCustomerNumber="+EVMCustomerNumber);
		sb.append(",CurrencyID="+CurrencyID);
		sb.append(",Vertical="+String.valueOf(Vertical));
		sb.append(",CustomerAdminName="+CustomerAdminName);
		sb.append(",CustomerAdminPhoneNumber="+CustomerAdminPhoneNumber);
		sb.append(",CustomerAdminEmailAddress="+CustomerAdminEmailAddress);
		sb.append(",CustomerAdminAddress1="+CustomerAdminAddress1);
		sb.append(",CustomerAdminCity="+CustomerAdminCity);
		sb.append(",CustomerAdminCountry="+CustomerAdminCountry);
		sb.append(",CustomerAdminRegion="+CustomerAdminRegion);
		sb.append(",CustomerAdminPostalCode="+CustomerAdminPostalCode);
		sb.append(",Username="+Username);
		sb.append(",Password="+Password);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row21Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row19Struct implements routines.system.IPersistableRow<row19Struct> {
    final static byte[] commonByteArrayLock_IMPORTINGEVMDATA_ImportingEVM = new byte[0];
    static byte[] commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[0];

	
			    public String CompanyName;

				public String getCompanyName () {
					return this.CompanyName;
				}
				
			    public String EVMCustomerNumber;

				public String getEVMCustomerNumber () {
					return this.EVMCustomerNumber;
				}
				
			    public String CurrencyID;

				public String getCurrencyID () {
					return this.CurrencyID;
				}
				
			    public Integer Vertical;

				public Integer getVertical () {
					return this.Vertical;
				}
				
			    public String CustomerAdminName;

				public String getCustomerAdminName () {
					return this.CustomerAdminName;
				}
				
			    public String CustomerAdminPhoneNumber;

				public String getCustomerAdminPhoneNumber () {
					return this.CustomerAdminPhoneNumber;
				}
				
			    public String CustomerAdminEmailAddress;

				public String getCustomerAdminEmailAddress () {
					return this.CustomerAdminEmailAddress;
				}
				
			    public String CustomerAdminAddress1;

				public String getCustomerAdminAddress1 () {
					return this.CustomerAdminAddress1;
				}
				
			    public String CustomerAdminCity;

				public String getCustomerAdminCity () {
					return this.CustomerAdminCity;
				}
				
			    public String CustomerAdminCountry;

				public String getCustomerAdminCountry () {
					return this.CustomerAdminCountry;
				}
				
			    public String CustomerAdminRegion;

				public String getCustomerAdminRegion () {
					return this.CustomerAdminRegion;
				}
				
			    public String CustomerAdminPostalCode;

				public String getCustomerAdminPostalCode () {
					return this.CustomerAdminPostalCode;
				}
				
			    public String Username;

				public String getUsername () {
					return this.Username;
				}
				
			    public String Password;

				public String getPassword () {
					return this.Password;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IMPORTINGEVMDATA_ImportingEVM.length) {
				if(length < 1024 && commonByteArray_IMPORTINGEVMDATA_ImportingEVM.length == 0) {
   					commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[1024];
				} else {
   					commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IMPORTINGEVMDATA_ImportingEVM, 0, length);
			strReturn = new String(commonByteArray_IMPORTINGEVMDATA_ImportingEVM, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IMPORTINGEVMDATA_ImportingEVM) {

        	try {

        		int length = 0;
		
					this.CompanyName = readString(dis);
					
					this.EVMCustomerNumber = readString(dis);
					
					this.CurrencyID = readString(dis);
					
						this.Vertical = readInteger(dis);
					
					this.CustomerAdminName = readString(dis);
					
					this.CustomerAdminPhoneNumber = readString(dis);
					
					this.CustomerAdminEmailAddress = readString(dis);
					
					this.CustomerAdminAddress1 = readString(dis);
					
					this.CustomerAdminCity = readString(dis);
					
					this.CustomerAdminCountry = readString(dis);
					
					this.CustomerAdminRegion = readString(dis);
					
					this.CustomerAdminPostalCode = readString(dis);
					
					this.Username = readString(dis);
					
					this.Password = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CompanyName,dos);
					
					// String
				
						writeString(this.EVMCustomerNumber,dos);
					
					// String
				
						writeString(this.CurrencyID,dos);
					
					// Integer
				
						writeInteger(this.Vertical,dos);
					
					// String
				
						writeString(this.CustomerAdminName,dos);
					
					// String
				
						writeString(this.CustomerAdminPhoneNumber,dos);
					
					// String
				
						writeString(this.CustomerAdminEmailAddress,dos);
					
					// String
				
						writeString(this.CustomerAdminAddress1,dos);
					
					// String
				
						writeString(this.CustomerAdminCity,dos);
					
					// String
				
						writeString(this.CustomerAdminCountry,dos);
					
					// String
				
						writeString(this.CustomerAdminRegion,dos);
					
					// String
				
						writeString(this.CustomerAdminPostalCode,dos);
					
					// String
				
						writeString(this.Username,dos);
					
					// String
				
						writeString(this.Password,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CompanyName="+CompanyName);
		sb.append(",EVMCustomerNumber="+EVMCustomerNumber);
		sb.append(",CurrencyID="+CurrencyID);
		sb.append(",Vertical="+String.valueOf(Vertical));
		sb.append(",CustomerAdminName="+CustomerAdminName);
		sb.append(",CustomerAdminPhoneNumber="+CustomerAdminPhoneNumber);
		sb.append(",CustomerAdminEmailAddress="+CustomerAdminEmailAddress);
		sb.append(",CustomerAdminAddress1="+CustomerAdminAddress1);
		sb.append(",CustomerAdminCity="+CustomerAdminCity);
		sb.append(",CustomerAdminCountry="+CustomerAdminCountry);
		sb.append(",CustomerAdminRegion="+CustomerAdminRegion);
		sb.append(",CustomerAdminPostalCode="+CustomerAdminPostalCode);
		sb.append(",Username="+Username);
		sb.append(",Password="+Password);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row19Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tFileInputDelimited_4Struct implements routines.system.IPersistableRow<after_tFileInputDelimited_4Struct> {
    final static byte[] commonByteArrayLock_IMPORTINGEVMDATA_ImportingEVM = new byte[0];
    static byte[] commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[0];

	
			    public String CompanyName;

				public String getCompanyName () {
					return this.CompanyName;
				}
				
			    public String EVMCustomerNumber;

				public String getEVMCustomerNumber () {
					return this.EVMCustomerNumber;
				}
				
			    public String CurrencyID;

				public String getCurrencyID () {
					return this.CurrencyID;
				}
				
			    public Integer Vertical;

				public Integer getVertical () {
					return this.Vertical;
				}
				
			    public String CustomerAdminName;

				public String getCustomerAdminName () {
					return this.CustomerAdminName;
				}
				
			    public String CustomerAdminPhoneNumber;

				public String getCustomerAdminPhoneNumber () {
					return this.CustomerAdminPhoneNumber;
				}
				
			    public String CustomerAdminEmailAddress;

				public String getCustomerAdminEmailAddress () {
					return this.CustomerAdminEmailAddress;
				}
				
			    public String CustomerAdminAddress1;

				public String getCustomerAdminAddress1 () {
					return this.CustomerAdminAddress1;
				}
				
			    public String CustomerAdminCity;

				public String getCustomerAdminCity () {
					return this.CustomerAdminCity;
				}
				
			    public String CustomerAdminCountry;

				public String getCustomerAdminCountry () {
					return this.CustomerAdminCountry;
				}
				
			    public String CustomerAdminRegion;

				public String getCustomerAdminRegion () {
					return this.CustomerAdminRegion;
				}
				
			    public String CustomerAdminPostalCode;

				public String getCustomerAdminPostalCode () {
					return this.CustomerAdminPostalCode;
				}
				
			    public String Username;

				public String getUsername () {
					return this.Username;
				}
				
			    public String Password;

				public String getPassword () {
					return this.Password;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IMPORTINGEVMDATA_ImportingEVM.length) {
				if(length < 1024 && commonByteArray_IMPORTINGEVMDATA_ImportingEVM.length == 0) {
   					commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[1024];
				} else {
   					commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IMPORTINGEVMDATA_ImportingEVM, 0, length);
			strReturn = new String(commonByteArray_IMPORTINGEVMDATA_ImportingEVM, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IMPORTINGEVMDATA_ImportingEVM) {

        	try {

        		int length = 0;
		
					this.CompanyName = readString(dis);
					
					this.EVMCustomerNumber = readString(dis);
					
					this.CurrencyID = readString(dis);
					
						this.Vertical = readInteger(dis);
					
					this.CustomerAdminName = readString(dis);
					
					this.CustomerAdminPhoneNumber = readString(dis);
					
					this.CustomerAdminEmailAddress = readString(dis);
					
					this.CustomerAdminAddress1 = readString(dis);
					
					this.CustomerAdminCity = readString(dis);
					
					this.CustomerAdminCountry = readString(dis);
					
					this.CustomerAdminRegion = readString(dis);
					
					this.CustomerAdminPostalCode = readString(dis);
					
					this.Username = readString(dis);
					
					this.Password = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CompanyName,dos);
					
					// String
				
						writeString(this.EVMCustomerNumber,dos);
					
					// String
				
						writeString(this.CurrencyID,dos);
					
					// Integer
				
						writeInteger(this.Vertical,dos);
					
					// String
				
						writeString(this.CustomerAdminName,dos);
					
					// String
				
						writeString(this.CustomerAdminPhoneNumber,dos);
					
					// String
				
						writeString(this.CustomerAdminEmailAddress,dos);
					
					// String
				
						writeString(this.CustomerAdminAddress1,dos);
					
					// String
				
						writeString(this.CustomerAdminCity,dos);
					
					// String
				
						writeString(this.CustomerAdminCountry,dos);
					
					// String
				
						writeString(this.CustomerAdminRegion,dos);
					
					// String
				
						writeString(this.CustomerAdminPostalCode,dos);
					
					// String
				
						writeString(this.Username,dos);
					
					// String
				
						writeString(this.Password,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CompanyName="+CompanyName);
		sb.append(",EVMCustomerNumber="+EVMCustomerNumber);
		sb.append(",CurrencyID="+CurrencyID);
		sb.append(",Vertical="+String.valueOf(Vertical));
		sb.append(",CustomerAdminName="+CustomerAdminName);
		sb.append(",CustomerAdminPhoneNumber="+CustomerAdminPhoneNumber);
		sb.append(",CustomerAdminEmailAddress="+CustomerAdminEmailAddress);
		sb.append(",CustomerAdminAddress1="+CustomerAdminAddress1);
		sb.append(",CustomerAdminCity="+CustomerAdminCity);
		sb.append(",CustomerAdminCountry="+CustomerAdminCountry);
		sb.append(",CustomerAdminRegion="+CustomerAdminRegion);
		sb.append(",CustomerAdminPostalCode="+CustomerAdminPostalCode);
		sb.append(",Username="+Username);
		sb.append(",Password="+Password);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tFileInputDelimited_4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_4Process(globalMap);

		row19Struct row19 = new row19Struct();
row19Struct row21 = row19;
AddNewUserStruct AddNewUser = new AddNewUserStruct();
row23Struct row23 = new row23Struct();
row27Struct row27 = new row27Struct();







	
	/**
	 * [tLogRow_16 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_16", false);
		start_Hash.put("tLogRow_16", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_16";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("row23"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tLogRow_16 = 0;
		

	///////////////////////
	
         class Util_tLogRow_16 {

        String[] des_top = { ".", ".", "-", "+" };

        String[] des_head = { "|=", "=|", "-", "+" };

        String[] des_bottom = { "'", "'", "-", "+" };

        String name="";

        java.util.List<String[]> list = new java.util.ArrayList<String[]>();

        int[] colLengths = new int[20];

        public void addRow(String[] row) {

            for (int i = 0; i < 20; i++) {
                if (row[i]!=null) {
                  colLengths[i] = Math.max(colLengths[i], row[i].length());
                }
            }
            list.add(row);
        }

        public void setTableName(String name) {

            this.name = name;
        }

            public StringBuilder format() {
            
                StringBuilder sb = new StringBuilder();
  
            
                    sb.append(print(des_top));
    
                    int totals = 0;
                    for (int i = 0; i < colLengths.length; i++) {
                        totals = totals + colLengths[i];
                    }
    
                    // name
                    sb.append("|");
                    int k = 0;
                    for (k = 0; k < (totals + 19 - name.length()) / 2; k++) {
                        sb.append(' ');
                    }
                    sb.append(name);
                    for (int i = 0; i < totals + 19 - name.length() - k; i++) {
                        sb.append(' ');
                    }
                    sb.append("|\n");

                    // head and rows
                    sb.append(print(des_head));
                    for (int i = 0; i < list.size(); i++) {
    
                        String[] row = list.get(i);
    
                        java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());
                        
                        StringBuilder sbformat = new StringBuilder();                                             
        			        sbformat.append("|%1$-");
        			        sbformat.append(colLengths[0]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%2$-");
        			        sbformat.append(colLengths[1]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%3$-");
        			        sbformat.append(colLengths[2]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%4$-");
        			        sbformat.append(colLengths[3]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%5$-");
        			        sbformat.append(colLengths[4]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%6$-");
        			        sbformat.append(colLengths[5]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%7$-");
        			        sbformat.append(colLengths[6]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%8$-");
        			        sbformat.append(colLengths[7]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%9$-");
        			        sbformat.append(colLengths[8]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%10$-");
        			        sbformat.append(colLengths[9]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%11$-");
        			        sbformat.append(colLengths[10]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%12$-");
        			        sbformat.append(colLengths[11]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%13$-");
        			        sbformat.append(colLengths[12]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%14$-");
        			        sbformat.append(colLengths[13]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%15$-");
        			        sbformat.append(colLengths[14]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%16$-");
        			        sbformat.append(colLengths[15]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%17$-");
        			        sbformat.append(colLengths[16]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%18$-");
        			        sbformat.append(colLengths[17]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%19$-");
        			        sbformat.append(colLengths[18]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%20$-");
        			        sbformat.append(colLengths[19]);
        			        sbformat.append("s");
        			                      
                        sbformat.append("|\n");                    
       
                        formatter.format(sbformat.toString(), (Object[])row);	
                                
                        sb.append(formatter.toString());
                        if (i == 0)
                            sb.append(print(des_head)); // print the head
                    }
    
                    // end
                    sb.append(print(des_bottom));
                    return sb;
                }
            

            private StringBuilder print(String[] fillChars) {
                StringBuilder sb = new StringBuilder();
                //first column
                sb.append(fillChars[0]);                
                    for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);	                

                    for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[4] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[5] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[6] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[7] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[8] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[9] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[10] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[11] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[12] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[13] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[14] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[15] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[16] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[17] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[18] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                
                    //last column
                    for (int i = 0; i < colLengths[19] - fillChars[1].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }         
                sb.append(fillChars[1]);
                sb.append("\n");               
                return sb;
            }
            
            public boolean isTableEmpty(){
            	if (list.size() > 1)
            		return false;
            	return true;
            }
        }
        Util_tLogRow_16 util_tLogRow_16 = new Util_tLogRow_16();
        util_tLogRow_16.setTableName("tLogRow_16");
        util_tLogRow_16.addRow(new String[]{"UserID","Username","Password","DisplayName","Email","Telephone","Enabled","CompanyID","SalesPersonID","RoleID","MustChangePassword","Address1","Address2","City","Country","Region","PostalCode","CharityID","WebMemberID","UserUniqueID",});        
 		StringBuilder strBuffer_tLogRow_16 = null;
		int nb_line_tLogRow_16 = 0;
///////////////////////    			



 



/**
 * [tLogRow_16 begin ] stop
 */




	
	/**
	 * [tLogRow_18 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_18", false);
		start_Hash.put("tLogRow_18", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_18";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("row27"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tLogRow_18 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_18 = "|";
		java.io.PrintStream consoleOut_tLogRow_18 = null;	

 		StringBuilder strBuffer_tLogRow_18 = null;
		int nb_line_tLogRow_18 = 0;
///////////////////////    			



 



/**
 * [tLogRow_18 begin ] stop
 */



	
	/**
	 * [tDBOutput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_4", false);
		start_Hash.put("tDBOutput_4", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_4";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("AddNewUser"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tDBOutput_4 = 0;
		



int nb_line_tDBOutput_4 = 0;
int nb_line_update_tDBOutput_4 = 0;
int nb_line_inserted_tDBOutput_4 = 0;
int nb_line_deleted_tDBOutput_4 = 0;
int nb_line_rejected_tDBOutput_4 = 0;

int deletedCount_tDBOutput_4=0;
int updatedCount_tDBOutput_4=0;
int insertedCount_tDBOutput_4=0;
int rejectedCount_tDBOutput_4=0;
String dbschema_tDBOutput_4 = null;
String tableName_tDBOutput_4 = null;
boolean whetherReject_tDBOutput_4 = false;

java.util.Calendar calendar_tDBOutput_4 = java.util.Calendar.getInstance();
long year1_tDBOutput_4 = TalendDate.parseDate("yyyy-MM-dd","0001-01-01").getTime();
long year2_tDBOutput_4 = TalendDate.parseDate("yyyy-MM-dd","1753-01-01").getTime();
long year10000_tDBOutput_4 = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss","9999-12-31 24:00:00").getTime();
long date_tDBOutput_4;

java.util.Calendar calendar_datetimeoffset_tDBOutput_4 = java.util.Calendar.getInstance(java.util.TimeZone.getTimeZone("UTC"));

        int insertKeyCount_tDBOutput_4 = 1;
        if(insertKeyCount_tDBOutput_4 < 1) {
            throw new RuntimeException("For insert if not exist, Schema must have a key");
        }
	
java.sql.Connection conn_tDBOutput_4 = null;
String dbUser_tDBOutput_4 = null;
	dbschema_tDBOutput_4 = (String)globalMap.get("dbschema_tDBConnection_1");
	conn_tDBOutput_4 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	

if(dbschema_tDBOutput_4 == null || dbschema_tDBOutput_4.trim().length() == 0) {
    tableName_tDBOutput_4 = "User";
} else {
    tableName_tDBOutput_4 = dbschema_tDBOutput_4 + "].[" + "User";
}
	int count_tDBOutput_4=0;

        java.sql.PreparedStatement pstmt_tDBOutput_4 = conn_tDBOutput_4.prepareStatement("SELECT COUNT(1) FROM [" + tableName_tDBOutput_4 + "] WHERE [UserID] = ?");
        resourceMap.put("pstmt_tDBOutput_4", pstmt_tDBOutput_4);
        String insert_tDBOutput_4 = "INSERT INTO [" + tableName_tDBOutput_4 + "] ([UserID],[Username],[Password],[DisplayName],[Email],[Telephone],[Enabled],[CompanyID],[SalesPersonID],[RoleID],[MustChangePassword],[Address1],[Address2],[City],[Country],[Region],[PostalCode],[CharityID],[WebMemberID],[UserUniqueID]) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
        java.sql.PreparedStatement pstmtInsert_tDBOutput_4 = conn_tDBOutput_4.prepareStatement(insert_tDBOutput_4);
        resourceMap.put("pstmtInsert_tDBOutput_4", pstmtInsert_tDBOutput_4);
 	boolean isShareIdentity_tDBOutput_4 = globalMap.get("shareIdentitySetting_tDBConnection_1") != null && (Boolean)globalMap.get("shareIdentitySetting_tDBConnection_1") == true;
        java.sql.Statement stmt_tDBOutput_4 = conn_tDBOutput_4.createStatement();
	        if ( !isShareIdentity_tDBOutput_4 ) {
	            stmt_tDBOutput_4.execute("SET IDENTITY_INSERT ["+ tableName_tDBOutput_4 +"] ON");
	        }

 



/**
 * [tDBOutput_4 begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("row21"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tMap_4 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row22Struct> tHash_Lookup_row22 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row22Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row22Struct>) 
					globalMap.get( "tHash_Lookup_row22" ))
					;					
					
	
		tHash_Lookup_row22.initGet();
	

row22Struct row22HashKey = new row22Struct();
row22Struct row22Default = new row22Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
AddNewUserStruct AddNewUser_tmp = new AddNewUserStruct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tLogRow_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_13", false);
		start_Hash.put("tLogRow_13", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_13";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("row19"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tLogRow_13 = 0;
		

	///////////////////////
	
         class Util_tLogRow_13 {

        String[] des_top = { ".", ".", "-", "+" };

        String[] des_head = { "|=", "=|", "-", "+" };

        String[] des_bottom = { "'", "'", "-", "+" };

        String name="";

        java.util.List<String[]> list = new java.util.ArrayList<String[]>();

        int[] colLengths = new int[14];

        public void addRow(String[] row) {

            for (int i = 0; i < 14; i++) {
                if (row[i]!=null) {
                  colLengths[i] = Math.max(colLengths[i], row[i].length());
                }
            }
            list.add(row);
        }

        public void setTableName(String name) {

            this.name = name;
        }

            public StringBuilder format() {
            
                StringBuilder sb = new StringBuilder();
  
            
                    sb.append(print(des_top));
    
                    int totals = 0;
                    for (int i = 0; i < colLengths.length; i++) {
                        totals = totals + colLengths[i];
                    }
    
                    // name
                    sb.append("|");
                    int k = 0;
                    for (k = 0; k < (totals + 13 - name.length()) / 2; k++) {
                        sb.append(' ');
                    }
                    sb.append(name);
                    for (int i = 0; i < totals + 13 - name.length() - k; i++) {
                        sb.append(' ');
                    }
                    sb.append("|\n");

                    // head and rows
                    sb.append(print(des_head));
                    for (int i = 0; i < list.size(); i++) {
    
                        String[] row = list.get(i);
    
                        java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());
                        
                        StringBuilder sbformat = new StringBuilder();                                             
        			        sbformat.append("|%1$-");
        			        sbformat.append(colLengths[0]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%2$-");
        			        sbformat.append(colLengths[1]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%3$-");
        			        sbformat.append(colLengths[2]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%4$-");
        			        sbformat.append(colLengths[3]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%5$-");
        			        sbformat.append(colLengths[4]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%6$-");
        			        sbformat.append(colLengths[5]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%7$-");
        			        sbformat.append(colLengths[6]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%8$-");
        			        sbformat.append(colLengths[7]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%9$-");
        			        sbformat.append(colLengths[8]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%10$-");
        			        sbformat.append(colLengths[9]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%11$-");
        			        sbformat.append(colLengths[10]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%12$-");
        			        sbformat.append(colLengths[11]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%13$-");
        			        sbformat.append(colLengths[12]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%14$-");
        			        sbformat.append(colLengths[13]);
        			        sbformat.append("s");
        			                      
                        sbformat.append("|\n");                    
       
                        formatter.format(sbformat.toString(), (Object[])row);	
                                
                        sb.append(formatter.toString());
                        if (i == 0)
                            sb.append(print(des_head)); // print the head
                    }
    
                    // end
                    sb.append(print(des_bottom));
                    return sb;
                }
            

            private StringBuilder print(String[] fillChars) {
                StringBuilder sb = new StringBuilder();
                //first column
                sb.append(fillChars[0]);                
                    for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);	                

                    for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[4] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[5] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[6] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[7] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[8] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[9] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[10] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[11] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[12] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                
                    //last column
                    for (int i = 0; i < colLengths[13] - fillChars[1].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }         
                sb.append(fillChars[1]);
                sb.append("\n");               
                return sb;
            }
            
            public boolean isTableEmpty(){
            	if (list.size() > 1)
            		return false;
            	return true;
            }
        }
        Util_tLogRow_13 util_tLogRow_13 = new Util_tLogRow_13();
        util_tLogRow_13.setTableName("AdminUserLog");
        util_tLogRow_13.addRow(new String[]{"CompanyName","EVMCustomerNumber","CurrencyID","Vertical","CustomerAdminName","CustomerAdminPhoneNumber","CustomerAdminEmailAddress","CustomerAdminAddress1","CustomerAdminCity","CustomerAdminCountry","CustomerAdminRegion","CustomerAdminPostalCode","Username","Password",});        
 		StringBuilder strBuffer_tLogRow_13 = null;
		int nb_line_tLogRow_13 = 0;
///////////////////////    			



 



/**
 * [tLogRow_13 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_4", false);
		start_Hash.put("tFileInputDelimited_4", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_4";

	
		int tos_count_tFileInputDelimited_4 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_4 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_4 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_4 = null;
				int limit_tFileInputDelimited_4 = -1;
				try{
					
						Object filename_tFileInputDelimited_4 = context.Customer_File;
						if(filename_tFileInputDelimited_4 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_4 = 0, random_value_tFileInputDelimited_4 = -1;
			if(footer_value_tFileInputDelimited_4 >0 || random_value_tFileInputDelimited_4 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_4 = new org.talend.fileprocess.FileInputDelimited(context.Customer_File, "ISO-8859-15",",","\n",true,1,0,
									limit_tFileInputDelimited_4
								,-1, false);
						} catch(java.lang.Exception e) {
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_4!=null && fid_tFileInputDelimited_4.nextRecord()) {
						rowstate_tFileInputDelimited_4.reset();
						
			    						row19 = null;			
												
									boolean whetherReject_tFileInputDelimited_4 = false;
									row19 = new row19Struct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_4 = 0;
				
					String temp = ""; 
				
					columnIndexWithD_tFileInputDelimited_4 = 0;
					
							row19.CompanyName = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
						
				
					columnIndexWithD_tFileInputDelimited_4 = 1;
					
							row19.EVMCustomerNumber = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
						
				
					columnIndexWithD_tFileInputDelimited_4 = 2;
					
							row19.CurrencyID = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
						
				
					columnIndexWithD_tFileInputDelimited_4 = 3;
					
						temp = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
						if(temp.length() > 0) {
							
								try {
								
    								row19.Vertical = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_4) {
									rowstate_tFileInputDelimited_4.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"Vertical", "row19", temp, ex_tFileInputDelimited_4), ex_tFileInputDelimited_4));
								}
    							
						} else {						
							
								
									row19.Vertical = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_4 = 4;
					
							row19.CustomerAdminName = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
						
				
					columnIndexWithD_tFileInputDelimited_4 = 5;
					
							row19.CustomerAdminPhoneNumber = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
						
				
					columnIndexWithD_tFileInputDelimited_4 = 6;
					
							row19.CustomerAdminEmailAddress = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
						
				
					columnIndexWithD_tFileInputDelimited_4 = 7;
					
							row19.CustomerAdminAddress1 = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
						
				
					columnIndexWithD_tFileInputDelimited_4 = 8;
					
							row19.CustomerAdminCity = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
						
				
					columnIndexWithD_tFileInputDelimited_4 = 9;
					
							row19.CustomerAdminCountry = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
						
				
					columnIndexWithD_tFileInputDelimited_4 = 10;
					
							row19.CustomerAdminRegion = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
						
				
					columnIndexWithD_tFileInputDelimited_4 = 11;
					
							row19.CustomerAdminPostalCode = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
						
				
					columnIndexWithD_tFileInputDelimited_4 = 12;
					
							row19.Username = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
						
				
					columnIndexWithD_tFileInputDelimited_4 = 13;
					
							row19.Password = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
						
				
				
										
										if(rowstate_tFileInputDelimited_4.getException()!=null) {
											throw rowstate_tFileInputDelimited_4.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
			        					whetherReject_tFileInputDelimited_4 = true;
			        					
			                					System.err.println(e.getMessage());
			                					row19 = null;
			                				
			    					}
								

 



/**
 * [tFileInputDelimited_4 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_4 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_4";

	

 


	tos_count_tFileInputDelimited_4++;

/**
 * [tFileInputDelimited_4 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_4";

	

 



/**
 * [tFileInputDelimited_4 process_data_begin ] stop
 */
// Start of branch "row19"
if(row19 != null) { 
			row27 = null;



	
	/**
	 * [tLogRow_13 main ] start
	 */

	

	
	
	currentComponent="tLogRow_13";

	

			//row19
			//row19


			
				
				if(execStat){
					runStat.updateStatOnConnection("row19"+iterateId,1, 1);
				}
				
				
				
			

		
///////////////////////		
						

				
				String[] row_tLogRow_13 = new String[14];
   				
	    		if(row19.CompanyName != null) { //              
                 row_tLogRow_13[0]=    						    
				                String.valueOf(row19.CompanyName)			
					          ;	
							
	    		} //			
    			   				
	    		if(row19.EVMCustomerNumber != null) { //              
                 row_tLogRow_13[1]=    						    
				                String.valueOf(row19.EVMCustomerNumber)			
					          ;	
							
	    		} //			
    			   				
	    		if(row19.CurrencyID != null) { //              
                 row_tLogRow_13[2]=    						    
				                String.valueOf(row19.CurrencyID)			
					          ;	
							
	    		} //			
    			   				
	    		if(row19.Vertical != null) { //              
                 row_tLogRow_13[3]=    						    
				                String.valueOf(row19.Vertical)			
					          ;	
							
	    		} //			
    			   				
	    		if(row19.CustomerAdminName != null) { //              
                 row_tLogRow_13[4]=    						    
				                String.valueOf(row19.CustomerAdminName)			
					          ;	
							
	    		} //			
    			   				
	    		if(row19.CustomerAdminPhoneNumber != null) { //              
                 row_tLogRow_13[5]=    						    
				                String.valueOf(row19.CustomerAdminPhoneNumber)			
					          ;	
							
	    		} //			
    			   				
	    		if(row19.CustomerAdminEmailAddress != null) { //              
                 row_tLogRow_13[6]=    						    
				                String.valueOf(row19.CustomerAdminEmailAddress)			
					          ;	
							
	    		} //			
    			   				
	    		if(row19.CustomerAdminAddress1 != null) { //              
                 row_tLogRow_13[7]=    						    
				                String.valueOf(row19.CustomerAdminAddress1)			
					          ;	
							
	    		} //			
    			   				
	    		if(row19.CustomerAdminCity != null) { //              
                 row_tLogRow_13[8]=    						    
				                String.valueOf(row19.CustomerAdminCity)			
					          ;	
							
	    		} //			
    			   				
	    		if(row19.CustomerAdminCountry != null) { //              
                 row_tLogRow_13[9]=    						    
				                String.valueOf(row19.CustomerAdminCountry)			
					          ;	
							
	    		} //			
    			   				
	    		if(row19.CustomerAdminRegion != null) { //              
                 row_tLogRow_13[10]=    						    
				                String.valueOf(row19.CustomerAdminRegion)			
					          ;	
							
	    		} //			
    			   				
	    		if(row19.CustomerAdminPostalCode != null) { //              
                 row_tLogRow_13[11]=    						    
				                String.valueOf(row19.CustomerAdminPostalCode)			
					          ;	
							
	    		} //			
    			   				
	    		if(row19.Username != null) { //              
                 row_tLogRow_13[12]=    						    
				                String.valueOf(row19.Username)			
					          ;	
							
	    		} //			
    			   				
	    		if(row19.Password != null) { //              
                 row_tLogRow_13[13]=    						    
				                String.valueOf(row19.Password)			
					          ;	
							
	    		} //			
    			 

				util_tLogRow_13.addRow(row_tLogRow_13);	
				nb_line_tLogRow_13++;
//////

//////                    
                    
///////////////////////    			

 
     row21 = row19;


	tos_count_tLogRow_13++;

/**
 * [tLogRow_13 main ] stop
 */
	
	/**
	 * [tLogRow_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_13";

	

 



/**
 * [tLogRow_13 process_data_begin ] stop
 */

	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

			//row21
			//row21


			
				
				if(execStat){
					runStat.updateStatOnConnection("row21"+iterateId,1, 1);
				}
				
				
				
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_4 = false;
		  boolean mainRowRejected_tMap_4 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row22" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow22 = false;
       		  	    	
       		  	    	
 							row22Struct row22ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_4) { // G_TM_M_020

								

								
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row22.lookup( row22HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row22.hasNext()) { // G_TM_M_090

  								
		  				
	  								
						
									
	
		  								forceLooprow22 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow22 = true;
			           		  	} // G 21
                    		  	
                    		

							row22Struct row22 = null;
                    		  	 
							

								while ((tHash_Lookup_row22 != null && tHash_Lookup_row22.hasNext()) || forceLooprow22) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row22'
									
                    		  	 
							   
                    		  	 
	       		  	    	row22Struct fromLookup_row22 = null;
							row22 = row22Default;
										 
							
								
								if(!forceLooprow22) { // G 46
								
							
								 
							
								
								fromLookup_row22 = tHash_Lookup_row22.next();

							

							if(fromLookup_row22 != null) {
								row22 = fromLookup_row22;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow22 = false;
									 	
							
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

AddNewUser = null;


// # Output table : 'AddNewUser'
AddNewUser_tmp.UserID = Numeric.sequence("s2", row22.UserID+1, 1) ;
AddNewUser_tmp.Username = row21.Username ;
AddNewUser_tmp.Password = row21.Password ;
AddNewUser_tmp.DisplayName = row21.CustomerAdminName ;
AddNewUser_tmp.Email = row21.CustomerAdminEmailAddress ;
AddNewUser_tmp.Telephone = row21.CustomerAdminPhoneNumber ;
AddNewUser_tmp.Enabled = row22.Enabled;
AddNewUser_tmp.CompanyID = null;
AddNewUser_tmp.SalesPersonID = null;
AddNewUser_tmp.RoleID = row22.RoleID ;
AddNewUser_tmp.MustChangePassword = row22.MustChangePassword;
AddNewUser_tmp.Address1 = row21.CustomerAdminAddress1 ;
AddNewUser_tmp.Address2 = null;
AddNewUser_tmp.City = row21.CustomerAdminCity ;
AddNewUser_tmp.Country = row21.CustomerAdminCountry ;
AddNewUser_tmp.Region = row21.CustomerAdminRegion ;
AddNewUser_tmp.PostalCode = row21.CustomerAdminPostalCode ;
AddNewUser_tmp.CharityID = null;
AddNewUser_tmp.WebMemberID = null;
AddNewUser_tmp.UserUniqueID = row22.UserUniqueID ;
AddNewUser = AddNewUser_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "AddNewUser"
if(AddNewUser != null) { 
			row27 = null;



	
	/**
	 * [tDBOutput_4 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	

			//AddNewUser
			//AddNewUser


			
				
				if(execStat){
					runStat.updateStatOnConnection("AddNewUser"+iterateId,1, 1);
				}
				
				
				
			

		



            row23 = null;
            row27 = null;
	        if(isShareIdentity_tDBOutput_4) {
	            stmt_tDBOutput_4.execute("SET IDENTITY_INSERT ["+ tableName_tDBOutput_4 +"] ON");
	        }
        whetherReject_tDBOutput_4 = false;

                pstmt_tDBOutput_4.setInt(1, AddNewUser.UserID);


        java.sql.ResultSet rs_tDBOutput_4 = pstmt_tDBOutput_4.executeQuery();
        int checkCount_tDBOutput_4 = -1;
        while(rs_tDBOutput_4.next()) {
            checkCount_tDBOutput_4 = rs_tDBOutput_4.getInt(1);
        }

        if (checkCount_tDBOutput_4 < 1) {
            try {
                    pstmtInsert_tDBOutput_4.setInt(1, AddNewUser.UserID);

                    if(AddNewUser.Username == null) {
pstmtInsert_tDBOutput_4.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_4.setString(2, AddNewUser.Username);
}

                    if(AddNewUser.Password == null) {
pstmtInsert_tDBOutput_4.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_4.setString(3, AddNewUser.Password);
}

                    if(AddNewUser.DisplayName == null) {
pstmtInsert_tDBOutput_4.setNull(4, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_4.setString(4, AddNewUser.DisplayName);
}

                    if(AddNewUser.Email == null) {
pstmtInsert_tDBOutput_4.setNull(5, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_4.setString(5, AddNewUser.Email);
}

                    if(AddNewUser.Telephone == null) {
pstmtInsert_tDBOutput_4.setNull(6, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_4.setString(6, AddNewUser.Telephone);
}

                    pstmtInsert_tDBOutput_4.setBoolean(7, AddNewUser.Enabled);

                    if(AddNewUser.CompanyID == null) {
pstmtInsert_tDBOutput_4.setNull(8, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_4.setInt(8, AddNewUser.CompanyID);
}

                    if(AddNewUser.SalesPersonID == null) {
pstmtInsert_tDBOutput_4.setNull(9, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_4.setInt(9, AddNewUser.SalesPersonID);
}

                    if(AddNewUser.RoleID == null) {
pstmtInsert_tDBOutput_4.setNull(10, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_4.setInt(10, AddNewUser.RoleID);
}

                    if(AddNewUser.MustChangePassword == null) {
pstmtInsert_tDBOutput_4.setNull(11, java.sql.Types.BOOLEAN);
} else {pstmtInsert_tDBOutput_4.setBoolean(11, AddNewUser.MustChangePassword);
}

                    if(AddNewUser.Address1 == null) {
pstmtInsert_tDBOutput_4.setNull(12, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_4.setString(12, AddNewUser.Address1);
}

                    if(AddNewUser.Address2 == null) {
pstmtInsert_tDBOutput_4.setNull(13, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_4.setString(13, AddNewUser.Address2);
}

                    if(AddNewUser.City == null) {
pstmtInsert_tDBOutput_4.setNull(14, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_4.setString(14, AddNewUser.City);
}

                    if(AddNewUser.Country == null) {
pstmtInsert_tDBOutput_4.setNull(15, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_4.setString(15, AddNewUser.Country);
}

                    if(AddNewUser.Region == null) {
pstmtInsert_tDBOutput_4.setNull(16, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_4.setString(16, AddNewUser.Region);
}

                    if(AddNewUser.PostalCode == null) {
pstmtInsert_tDBOutput_4.setNull(17, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_4.setString(17, AddNewUser.PostalCode);
}

                    if(AddNewUser.CharityID == null) {
pstmtInsert_tDBOutput_4.setNull(18, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_4.setInt(18, AddNewUser.CharityID);
}

                    if(AddNewUser.WebMemberID == null) {
pstmtInsert_tDBOutput_4.setNull(19, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_4.setString(19, AddNewUser.WebMemberID);
}

                    if(AddNewUser.UserUniqueID == null) {
pstmtInsert_tDBOutput_4.setNull(20, java.sql.Types.OTHER);
} else {pstmtInsert_tDBOutput_4.setObject(20, AddNewUser.UserUniqueID);
}

                insertedCount_tDBOutput_4 = insertedCount_tDBOutput_4 + pstmtInsert_tDBOutput_4.executeUpdate();
                nb_line_tDBOutput_4++;
            } catch(java.lang.Exception e) {
				whetherReject_tDBOutput_4 = true;
            	nb_line_tDBOutput_4++;
            	
	            row27 = new row27Struct();
                    row27.UserID = AddNewUser.UserID;
                    row27.Username = AddNewUser.Username;
                    row27.Password = AddNewUser.Password;
                    row27.DisplayName = AddNewUser.DisplayName;
                    row27.Email = AddNewUser.Email;
                    row27.Telephone = AddNewUser.Telephone;
                    row27.Enabled = AddNewUser.Enabled;
                    row27.CompanyID = AddNewUser.CompanyID;
                    row27.SalesPersonID = AddNewUser.SalesPersonID;
                    row27.RoleID = AddNewUser.RoleID;
                    row27.MustChangePassword = AddNewUser.MustChangePassword;
                    row27.Address1 = AddNewUser.Address1;
                    row27.Address2 = AddNewUser.Address2;
                    row27.City = AddNewUser.City;
                    row27.Country = AddNewUser.Country;
                    row27.Region = AddNewUser.Region;
                    row27.PostalCode = AddNewUser.PostalCode;
                    row27.CharityID = AddNewUser.CharityID;
                    row27.WebMemberID = AddNewUser.WebMemberID;
                    row27.UserUniqueID = AddNewUser.UserUniqueID;
                	rejectedCount_tDBOutput_4 = rejectedCount_tDBOutput_4 + 1;
                	row27.errorCode = ((java.sql.SQLException)e).getSQLState();
                    row27.errorMessage = e.getMessage() + " - Line: " + tos_count_tDBOutput_4;
                }
            }
            if(!whetherReject_tDBOutput_4) {
                            row23 = new row23Struct();
                                row23.UserID = AddNewUser.UserID;
                                row23.Username = AddNewUser.Username;
                                row23.Password = AddNewUser.Password;
                                row23.DisplayName = AddNewUser.DisplayName;
                                row23.Email = AddNewUser.Email;
                                row23.Telephone = AddNewUser.Telephone;
                                row23.Enabled = AddNewUser.Enabled;
                                row23.CompanyID = AddNewUser.CompanyID;
                                row23.SalesPersonID = AddNewUser.SalesPersonID;
                                row23.RoleID = AddNewUser.RoleID;
                                row23.MustChangePassword = AddNewUser.MustChangePassword;
                                row23.Address1 = AddNewUser.Address1;
                                row23.Address2 = AddNewUser.Address2;
                                row23.City = AddNewUser.City;
                                row23.Country = AddNewUser.Country;
                                row23.Region = AddNewUser.Region;
                                row23.PostalCode = AddNewUser.PostalCode;
                                row23.CharityID = AddNewUser.CharityID;
                                row23.WebMemberID = AddNewUser.WebMemberID;
                                row23.UserUniqueID = AddNewUser.UserUniqueID;
            }
            	//////////batch execute by batch size///////
            	class LimitBytesHelper_tDBOutput_4{
            		public int limitBytePart1(int counter,java.sql.PreparedStatement pstmt_tDBOutput_4) throws Exception {
                try {
						
						for(int countEach_tDBOutput_4: pstmt_tDBOutput_4.executeBatch()) {
							if(countEach_tDBOutput_4 == -2 || countEach_tDBOutput_4 == -3) {
								break;
							}
							counter += countEach_tDBOutput_4;
						}
						
                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_tDBOutput_4 = 0;
					for(int countEach_tDBOutput_4: e.getUpdateCounts()) {
						counter += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
					}
				
            	    	
                		System.err.println(e.getMessage());
                	
               			 }
    				return counter;
            	}
            	
            	public int limitBytePart2(int counter,java.sql.PreparedStatement pstmt_tDBOutput_4) throws Exception {
                try {
                		
						for(int countEach_tDBOutput_4: pstmt_tDBOutput_4.executeBatch()) {
							if(countEach_tDBOutput_4 == -2 || countEach_tDBOutput_4 == -3) {
								break;
							}
							counter += countEach_tDBOutput_4;
						}
						
                }catch (java.sql.BatchUpdateException e){
                	
                	
					for(int countEach_tDBOutput_4: e.getUpdateCounts()) {
						counter += (countEach_tDBOutput_4 < 0 ? 0 : countEach_tDBOutput_4);
					}
					
            	    	
                        System.err.println(e.getMessage());
                	
                		}	
                	return counter;	
            	}
            }

    	////////////commit every////////////
    			
		if (isShareIdentity_tDBOutput_4 ) {
        	 stmt_tDBOutput_4.execute("SET IDENTITY_INSERT ["+ tableName_tDBOutput_4 +"] OFF");
        }

 


	tos_count_tDBOutput_4++;

/**
 * [tDBOutput_4 main ] stop
 */
	
	/**
	 * [tDBOutput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	

 



/**
 * [tDBOutput_4 process_data_begin ] stop
 */
// Start of branch "row23"
if(row23 != null) { 



	
	/**
	 * [tLogRow_16 main ] start
	 */

	

	
	
	currentComponent="tLogRow_16";

	

			//row23
			//row23


			
				
				if(execStat){
					runStat.updateStatOnConnection("row23"+iterateId,1, 1);
				}
				
				
				
			

		
///////////////////////		
						

				
				String[] row_tLogRow_16 = new String[20];
              
                 row_tLogRow_16[0]=    						    
				                String.valueOf(row23.UserID)			
					          ;	
										
    			   				
	    		if(row23.Username != null) { //              
                 row_tLogRow_16[1]=    						    
				                String.valueOf(row23.Username)			
					          ;	
							
	    		} //			
    			   				
	    		if(row23.Password != null) { //              
                 row_tLogRow_16[2]=    						    
				                String.valueOf(row23.Password)			
					          ;	
							
	    		} //			
    			   				
	    		if(row23.DisplayName != null) { //              
                 row_tLogRow_16[3]=    						    
				                String.valueOf(row23.DisplayName)			
					          ;	
							
	    		} //			
    			   				
	    		if(row23.Email != null) { //              
                 row_tLogRow_16[4]=    						    
				                String.valueOf(row23.Email)			
					          ;	
							
	    		} //			
    			   				
	    		if(row23.Telephone != null) { //              
                 row_tLogRow_16[5]=    						    
				                String.valueOf(row23.Telephone)			
					          ;	
							
	    		} //			
    			              
                 row_tLogRow_16[6]=    						    
				                String.valueOf(row23.Enabled)			
					          ;	
										
    			   				
	    		if(row23.CompanyID != null) { //              
                 row_tLogRow_16[7]=    						    
				                String.valueOf(row23.CompanyID)			
					          ;	
							
	    		} //			
    			   				
	    		if(row23.SalesPersonID != null) { //              
                 row_tLogRow_16[8]=    						    
				                String.valueOf(row23.SalesPersonID)			
					          ;	
							
	    		} //			
    			   				
	    		if(row23.RoleID != null) { //              
                 row_tLogRow_16[9]=    						    
				                String.valueOf(row23.RoleID)			
					          ;	
							
	    		} //			
    			   				
	    		if(row23.MustChangePassword != null) { //              
                 row_tLogRow_16[10]=    						    
				                String.valueOf(row23.MustChangePassword)			
					          ;	
							
	    		} //			
    			   				
	    		if(row23.Address1 != null) { //              
                 row_tLogRow_16[11]=    						    
				                String.valueOf(row23.Address1)			
					          ;	
							
	    		} //			
    			   				
	    		if(row23.Address2 != null) { //              
                 row_tLogRow_16[12]=    						    
				                String.valueOf(row23.Address2)			
					          ;	
							
	    		} //			
    			   				
	    		if(row23.City != null) { //              
                 row_tLogRow_16[13]=    						    
				                String.valueOf(row23.City)			
					          ;	
							
	    		} //			
    			   				
	    		if(row23.Country != null) { //              
                 row_tLogRow_16[14]=    						    
				                String.valueOf(row23.Country)			
					          ;	
							
	    		} //			
    			   				
	    		if(row23.Region != null) { //              
                 row_tLogRow_16[15]=    						    
				                String.valueOf(row23.Region)			
					          ;	
							
	    		} //			
    			   				
	    		if(row23.PostalCode != null) { //              
                 row_tLogRow_16[16]=    						    
				                String.valueOf(row23.PostalCode)			
					          ;	
							
	    		} //			
    			   				
	    		if(row23.CharityID != null) { //              
                 row_tLogRow_16[17]=    						    
				                String.valueOf(row23.CharityID)			
					          ;	
							
	    		} //			
    			   				
	    		if(row23.WebMemberID != null) { //              
                 row_tLogRow_16[18]=    						    
				                String.valueOf(row23.WebMemberID)			
					          ;	
							
	    		} //			
    			   				
	    		if(row23.UserUniqueID != null) { //              
                 row_tLogRow_16[19]=    						    
				                String.valueOf(row23.UserUniqueID)			
					          ;	
							
	    		} //			
    			 

				util_tLogRow_16.addRow(row_tLogRow_16);	
				nb_line_tLogRow_16++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_16++;

/**
 * [tLogRow_16 main ] stop
 */
	
	/**
	 * [tLogRow_16 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_16";

	

 



/**
 * [tLogRow_16 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_16 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_16";

	

 



/**
 * [tLogRow_16 process_data_end ] stop
 */

} // End of branch "row23"




// Start of branch "row27"
if(row27 != null) { 



	
	/**
	 * [tLogRow_18 main ] start
	 */

	

	
	
	currentComponent="tLogRow_18";

	

			//row27
			//row27


			
				
				if(execStat){
					runStat.updateStatOnConnection("row27"+iterateId,1, 1);
				}
				
				
				
			

		
///////////////////////		
						



				strBuffer_tLogRow_18 = new StringBuilder();




              
                    							
       
				strBuffer_tLogRow_18.append(
				                String.valueOf(row27.UserID)							
				);


							  			

    			strBuffer_tLogRow_18.append("|");
    			


   				
	    		if(row27.Username != null) { //              
                    							
       
				strBuffer_tLogRow_18.append(
				                String.valueOf(row27.Username)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_18.append("|");
    			


   				
	    		if(row27.Password != null) { //              
                    							
       
				strBuffer_tLogRow_18.append(
				                String.valueOf(row27.Password)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_18.append("|");
    			


   				
	    		if(row27.DisplayName != null) { //              
                    							
       
				strBuffer_tLogRow_18.append(
				                String.valueOf(row27.DisplayName)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_18.append("|");
    			


   				
	    		if(row27.Email != null) { //              
                    							
       
				strBuffer_tLogRow_18.append(
				                String.valueOf(row27.Email)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_18.append("|");
    			


   				
	    		if(row27.Telephone != null) { //              
                    							
       
				strBuffer_tLogRow_18.append(
				                String.valueOf(row27.Telephone)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_18.append("|");
    			


              
                    							
       
				strBuffer_tLogRow_18.append(
				                String.valueOf(row27.Enabled)							
				);


							  			

    			strBuffer_tLogRow_18.append("|");
    			


   				
	    		if(row27.CompanyID != null) { //              
                    							
       
				strBuffer_tLogRow_18.append(
				                String.valueOf(row27.CompanyID)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_18.append("|");
    			


   				
	    		if(row27.SalesPersonID != null) { //              
                    							
       
				strBuffer_tLogRow_18.append(
				                String.valueOf(row27.SalesPersonID)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_18.append("|");
    			


   				
	    		if(row27.RoleID != null) { //              
                    							
       
				strBuffer_tLogRow_18.append(
				                String.valueOf(row27.RoleID)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_18.append("|");
    			


   				
	    		if(row27.MustChangePassword != null) { //              
                    							
       
				strBuffer_tLogRow_18.append(
				                String.valueOf(row27.MustChangePassword)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_18.append("|");
    			


   				
	    		if(row27.Address1 != null) { //              
                    							
       
				strBuffer_tLogRow_18.append(
				                String.valueOf(row27.Address1)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_18.append("|");
    			


   				
	    		if(row27.Address2 != null) { //              
                    							
       
				strBuffer_tLogRow_18.append(
				                String.valueOf(row27.Address2)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_18.append("|");
    			


   				
	    		if(row27.City != null) { //              
                    							
       
				strBuffer_tLogRow_18.append(
				                String.valueOf(row27.City)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_18.append("|");
    			


   				
	    		if(row27.Country != null) { //              
                    							
       
				strBuffer_tLogRow_18.append(
				                String.valueOf(row27.Country)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_18.append("|");
    			


   				
	    		if(row27.Region != null) { //              
                    							
       
				strBuffer_tLogRow_18.append(
				                String.valueOf(row27.Region)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_18.append("|");
    			


   				
	    		if(row27.PostalCode != null) { //              
                    							
       
				strBuffer_tLogRow_18.append(
				                String.valueOf(row27.PostalCode)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_18.append("|");
    			


   				
	    		if(row27.CharityID != null) { //              
                    							
       
				strBuffer_tLogRow_18.append(
				                String.valueOf(row27.CharityID)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_18.append("|");
    			


   				
	    		if(row27.WebMemberID != null) { //              
                    							
       
				strBuffer_tLogRow_18.append(
				                String.valueOf(row27.WebMemberID)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_18.append("|");
    			


   				
	    		if(row27.UserUniqueID != null) { //              
                    							
       
				strBuffer_tLogRow_18.append(
				                String.valueOf(row27.UserUniqueID)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_18.append("|");
    			


   				
	    		if(row27.errorCode != null) { //              
                    							
       
				strBuffer_tLogRow_18.append(
				                String.valueOf(row27.errorCode)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_18.append("|");
    			


   				
	    		if(row27.errorMessage != null) { //              
                    							
       
				strBuffer_tLogRow_18.append(
				                String.valueOf(row27.errorMessage)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_18 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_18 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_18);
                    }
                    consoleOut_tLogRow_18.println(strBuffer_tLogRow_18.toString());
                    consoleOut_tLogRow_18.flush();
                    nb_line_tLogRow_18++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_18++;

/**
 * [tLogRow_18 main ] stop
 */
	
	/**
	 * [tLogRow_18 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_18";

	

 



/**
 * [tLogRow_18 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_18 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_18";

	

 



/**
 * [tLogRow_18 process_data_end ] stop
 */

} // End of branch "row27"




	
	/**
	 * [tDBOutput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	

 



/**
 * [tDBOutput_4 process_data_end ] stop
 */

} // End of branch "AddNewUser"



	
		} // close loop of lookup 'row22' // G_TM_M_043
	
	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_end ] stop
 */



	
	/**
	 * [tLogRow_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_13";

	

 



/**
 * [tLogRow_13 process_data_end ] stop
 */

} // End of branch "row19"




	
	/**
	 * [tFileInputDelimited_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_4";

	

 



/**
 * [tFileInputDelimited_4 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_4 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_4";

	



            }
            }finally{
                if(!((Object)(context.Customer_File) instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_4!=null){
                		fid_tFileInputDelimited_4.close();
                	}
                }
                if(fid_tFileInputDelimited_4!=null){
                	globalMap.put("tFileInputDelimited_4_NB_LINE", fid_tFileInputDelimited_4.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_4", true);
end_Hash.put("tFileInputDelimited_4", System.currentTimeMillis());




/**
 * [tFileInputDelimited_4 end ] stop
 */

	
	/**
	 * [tLogRow_13 end ] start
	 */

	

	
	
	currentComponent="tLogRow_13";

	


//////

                    
                    java.io.PrintStream consoleOut_tLogRow_13 = null;
                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_13 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_13 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_13);
                    }
                    
                    consoleOut_tLogRow_13.println(util_tLogRow_13.format().toString());
                    consoleOut_tLogRow_13.flush();
//////
globalMap.put("tLogRow_13_NB_LINE",nb_line_tLogRow_13);

///////////////////////    			

			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("row19"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tLogRow_13", true);
end_Hash.put("tLogRow_13", System.currentTimeMillis());




/**
 * [tLogRow_13 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row22 != null) {
						tHash_Lookup_row22.endGet();
					}
					globalMap.remove( "tHash_Lookup_row22" );

					
					
				
// ###############################      





			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("row21"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tDBOutput_4 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	



		if ( isShareIdentity_tDBOutput_4 ) {
			String setIdentityInsertONSQL_tDBOutput_4 = "SET IDENTITY_INSERT ["+ tableName_tDBOutput_4 +"] ON";
			
        	stmt_tDBOutput_4.execute(setIdentityInsertONSQL_tDBOutput_4);
			
        }
        if(pstmtInsert_tDBOutput_4 != null){
            pstmtInsert_tDBOutput_4.close();
            resourceMap.remove("pstmtInsert_tDBOutput_4");
        }
        if(pstmt_tDBOutput_4 != null) {
            pstmt_tDBOutput_4.close();
            resourceMap.remove("pstmt_tDBOutput_4");
        }
    String setIdentityInsertOFFSQL_tDBOutput_4 = "SET IDENTITY_INSERT ["+ tableName_tDBOutput_4 +"] OFF";
    stmt_tDBOutput_4.execute(setIdentityInsertOFFSQL_tDBOutput_4);
    stmt_tDBOutput_4.close();
    resourceMap.put("statementClosed_tDBOutput_4", true);

	nb_line_deleted_tDBOutput_4=nb_line_deleted_tDBOutput_4+ deletedCount_tDBOutput_4;
	nb_line_update_tDBOutput_4=nb_line_update_tDBOutput_4 + updatedCount_tDBOutput_4;
	nb_line_inserted_tDBOutput_4=nb_line_inserted_tDBOutput_4 + insertedCount_tDBOutput_4;
	nb_line_rejected_tDBOutput_4=nb_line_rejected_tDBOutput_4 + rejectedCount_tDBOutput_4;
	
        globalMap.put("tDBOutput_4_NB_LINE",nb_line_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_UPDATED",nb_line_update_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_DELETED",nb_line_deleted_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_4);
    
	

			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("AddNewUser"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tDBOutput_4", true);
end_Hash.put("tDBOutput_4", System.currentTimeMillis());




/**
 * [tDBOutput_4 end ] stop
 */

	
	/**
	 * [tLogRow_16 end ] start
	 */

	

	
	
	currentComponent="tLogRow_16";

	


//////

                    
                    java.io.PrintStream consoleOut_tLogRow_16 = null;
                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_16 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_16 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_16);
                    }
                    
                    consoleOut_tLogRow_16.println(util_tLogRow_16.format().toString());
                    consoleOut_tLogRow_16.flush();
//////
globalMap.put("tLogRow_16_NB_LINE",nb_line_tLogRow_16);

///////////////////////    			

			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("row23"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tLogRow_16", true);
end_Hash.put("tLogRow_16", System.currentTimeMillis());




/**
 * [tLogRow_16 end ] stop
 */




	
	/**
	 * [tLogRow_18 end ] start
	 */

	

	
	
	currentComponent="tLogRow_18";

	


//////
//////
globalMap.put("tLogRow_18_NB_LINE",nb_line_tLogRow_18);

///////////////////////    			

			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("row27"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tLogRow_18", true);
end_Hash.put("tLogRow_18", System.currentTimeMillis());




/**
 * [tLogRow_18 end ] stop
 */












				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_4"
					     			globalMap.remove("tHash_Lookup_row22"); 
				     			
				try{
					
	
	/**
	 * [tFileInputDelimited_4 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_4";

	

 



/**
 * [tFileInputDelimited_4 finally ] stop
 */

	
	/**
	 * [tLogRow_13 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_13";

	

 



/**
 * [tLogRow_13 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tDBOutput_4 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	



    if (resourceMap.get("statementClosed_tDBOutput_4") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_4 = null;
                if ((pstmtToClose_tDBOutput_4 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_4")) != null) {
                    pstmtToClose_tDBOutput_4.close();
                }
    }
 



/**
 * [tDBOutput_4 finally ] stop
 */

	
	/**
	 * [tLogRow_16 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_16";

	

 



/**
 * [tLogRow_16 finally ] stop
 */




	
	/**
	 * [tLogRow_18 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_18";

	

 



/**
 * [tLogRow_18 finally ] stop
 */












				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_4_SUBPROCESS_STATE", 1);
	}
	

public void tSendMail_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSendMail_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tSendMail_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tSendMail_2", false);
		start_Hash.put("tSendMail_2", System.currentTimeMillis());
		
	
	currentComponent="tSendMail_2";

	
		int tos_count_tSendMail_2 = 0;
		

 



/**
 * [tSendMail_2 begin ] stop
 */
	
	/**
	 * [tSendMail_2 main ] start
	 */

	

	
	
	currentComponent="tSendMail_2";

	

 

	String smtpHost_tSendMail_2 = context.Email_host;
        String smtpPort_tSendMail_2 = context.Email_port;
	String from_tSendMail_2 = (context.Email_from);
    String to_tSendMail_2 = (context.Email_to).replace(";",",");
    String cc_tSendMail_2 = (("")==null || "".equals(""))?null:("").replace(";",",");
    String bcc_tSendMail_2 = (("")==null || "".equals(""))?null:("").replace(";",",");
    String subject_tSendMail_2 = ("Talend Error Notification");
    
	java.util.List<java.util.Map<String, String>> headers_tSendMail_2 = new java.util.ArrayList<java.util.Map<String,String>>();
	java.util.List<String> attachments_tSendMail_2 = new java.util.ArrayList<String>();
	java.util.List<String> contentTransferEncoding_tSendMail_2 = new java.util.ArrayList<String>();

	String message_tSendMail_2 = (("Error at process 2") == null || "".equals("Error at process 2")) ? "\"\"" : ("Error at process 2") ;
	java.util.Properties props_tSendMail_2 = System.getProperties();     
	props_tSendMail_2.put("mail.smtp.host", smtpHost_tSendMail_2);
	props_tSendMail_2.put("mail.smtp.port", smtpPort_tSendMail_2);
		props_tSendMail_2.put("mail.mime.encodefilename", "true");  
		props_tSendMail_2.put("mail.smtp.socketFactory.class", "javax.net.ssl.SSLSocketFactory");
		props_tSendMail_2.put("mail.smtp.socketFactory.fallback", "false");
		props_tSendMail_2.put("mail.smtp.socketFactory.port", smtpPort_tSendMail_2);     
	try {
		
		
			props_tSendMail_2.put("mail.smtp.auth", "true");
			javax.mail.Session session_tSendMail_2 = javax.mail.Session.getInstance(props_tSendMail_2, new javax.mail.Authenticator(){         
				protected javax.mail.PasswordAuthentication getPasswordAuthentication() {
				
                
	final String decryptedPassword_tSendMail_2 = context.Email_password; 
				
				
				return new javax.mail.PasswordAuthentication(context.Email_username, decryptedPassword_tSendMail_2); 
				}         
			});   
		
		
		javax.mail.Message msg_tSendMail_2 = new javax.mail.internet.MimeMessage(session_tSendMail_2);
		msg_tSendMail_2.setFrom(new javax.mail.internet.InternetAddress(from_tSendMail_2, null));
		msg_tSendMail_2.setRecipients(javax.mail.Message.RecipientType.TO,javax.mail.internet.InternetAddress.parse(to_tSendMail_2, false));
		if (cc_tSendMail_2 != null) msg_tSendMail_2.setRecipients(javax.mail.Message.RecipientType.CC, javax.mail.internet.InternetAddress.parse(cc_tSendMail_2, false));
		if (bcc_tSendMail_2 != null) msg_tSendMail_2.setRecipients(javax.mail.Message.RecipientType.BCC, javax.mail.internet.InternetAddress.parse(bcc_tSendMail_2, false));
		msg_tSendMail_2.setSubject(subject_tSendMail_2);

		for (int i_tSendMail_2 = 0; i_tSendMail_2 < headers_tSendMail_2.size(); i_tSendMail_2++) {
			java.util.Map<String, String> header_tSendMail_2 = headers_tSendMail_2.get(i_tSendMail_2);
			msg_tSendMail_2.setHeader(header_tSendMail_2.get("KEY"), header_tSendMail_2.get("VALUE"));    
		}  
		msg_tSendMail_2.setSentDate(new Date());
		msg_tSendMail_2.setHeader("X-Priority", "1"); //High->1 Normal->3 Low->5
		javax.mail.Multipart mp_tSendMail_2 = new javax.mail.internet.MimeMultipart();
		javax.mail.internet.MimeBodyPart mbpText_tSendMail_2 = new javax.mail.internet.MimeBodyPart();
		mbpText_tSendMail_2.setText(message_tSendMail_2,"ISO-8859-15", "plain");
		mp_tSendMail_2.addBodyPart(mbpText_tSendMail_2);
  
		javax.mail.internet.MimeBodyPart mbpFile_tSendMail_2 = null;

		for (int i_tSendMail_2 = 0; i_tSendMail_2 < attachments_tSendMail_2.size(); i_tSendMail_2++){
			String filename_tSendMail_2 = attachments_tSendMail_2.get(i_tSendMail_2);
			javax.activation.FileDataSource fds_tSendMail_2 = null;
			java.io.File file_tSendMail_2 = new java.io.File(filename_tSendMail_2);
			
				if (!file_tSendMail_2.exists()){
					continue;
				}
			
    		if (file_tSendMail_2.isDirectory()){
				java.io.File[] subFiles_tSendMail_2 = file_tSendMail_2.listFiles();
				for(java.io.File subFile_tSendMail_2 : subFiles_tSendMail_2){
					if (subFile_tSendMail_2.isFile()){
						fds_tSendMail_2 = new javax.activation.FileDataSource(subFile_tSendMail_2.getAbsolutePath());
						mbpFile_tSendMail_2 = new javax.mail.internet.MimeBodyPart();
						mbpFile_tSendMail_2.setDataHandler(new javax.activation.DataHandler(fds_tSendMail_2));
						mbpFile_tSendMail_2.setFileName(javax.mail.internet.MimeUtility.encodeText(fds_tSendMail_2.getName()));
						if(contentTransferEncoding_tSendMail_2.get(i_tSendMail_2).equalsIgnoreCase("base64")){
							mbpFile_tSendMail_2.setHeader("Content-Transfer-Encoding", "base64");
						}
						mp_tSendMail_2.addBodyPart(mbpFile_tSendMail_2);
					}
				}
    		}else{
				mbpFile_tSendMail_2 = new javax.mail.internet.MimeBodyPart();
				fds_tSendMail_2 = new javax.activation.FileDataSource(filename_tSendMail_2);
				mbpFile_tSendMail_2.setDataHandler(new javax.activation.DataHandler(fds_tSendMail_2)); 
				mbpFile_tSendMail_2.setFileName(javax.mail.internet.MimeUtility.encodeText(fds_tSendMail_2.getName()));
				if(contentTransferEncoding_tSendMail_2.get(i_tSendMail_2).equalsIgnoreCase("base64")){
					mbpFile_tSendMail_2.setHeader("Content-Transfer-Encoding", "base64");
				}
				mp_tSendMail_2.addBodyPart(mbpFile_tSendMail_2);
			}
		}
		// -- set the content --
		msg_tSendMail_2.setContent(mp_tSendMail_2);
		// add handlers for main MIME types
		javax.activation.MailcapCommandMap mc_tSendMail_2 = ( javax.activation.MailcapCommandMap)javax.activation.CommandMap.getDefaultCommandMap();
		mc_tSendMail_2.addMailcap("text/html;; x-java-content-handler=com.sun.mail.handlers.text_html");
		mc_tSendMail_2.addMailcap("text/xml;; x-java-content-handler=com.sun.mail.handlers.text_xml");
		mc_tSendMail_2.addMailcap("text/plain;; x-java-content-handler=com.sun.mail.handlers.text_plain");
		mc_tSendMail_2.addMailcap("multipart/*;; x-java-content-handler=com.sun.mail.handlers.multipart_mixed");
		mc_tSendMail_2.addMailcap("message/rfc822;; x-java-content-handler=com.sun.mail.handlers.message_rfc822");
		javax.activation.CommandMap.setDefaultCommandMap(mc_tSendMail_2);
		// -- Send the message --
		javax.mail.Transport.send(msg_tSendMail_2);
	} catch(java.lang.Exception e){
  		
			throw(e);
		
	}finally{
		props_tSendMail_2.remove("mail.smtp.host");
		props_tSendMail_2.remove("mail.smtp.port");
		
		props_tSendMail_2.remove("mail.mime.encodefilename");
		  
			props_tSendMail_2.remove("mail.smtp.socketFactory.class");
			props_tSendMail_2.remove("mail.smtp.socketFactory.fallback");
			props_tSendMail_2.remove("mail.smtp.socketFactory.port");
		
		props_tSendMail_2.remove("mail.smtp.auth");     
	}

 


	tos_count_tSendMail_2++;

/**
 * [tSendMail_2 main ] stop
 */
	
	/**
	 * [tSendMail_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSendMail_2";

	

 



/**
 * [tSendMail_2 process_data_begin ] stop
 */
	
	/**
	 * [tSendMail_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tSendMail_2";

	

 



/**
 * [tSendMail_2 process_data_end ] stop
 */
	
	/**
	 * [tSendMail_2 end ] start
	 */

	

	
	
	currentComponent="tSendMail_2";

	

 

ok_Hash.put("tSendMail_2", true);
end_Hash.put("tSendMail_2", System.currentTimeMillis());




/**
 * [tSendMail_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSendMail_2 finally ] start
	 */

	

	
	
	currentComponent="tSendMail_2";

	

 



/**
 * [tSendMail_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSendMail_2_SUBPROCESS_STATE", 1);
	}
	


public static class row22Struct implements routines.system.IPersistableRow<row22Struct> {
    final static byte[] commonByteArrayLock_IMPORTINGEVMDATA_ImportingEVM = new byte[0];
    static byte[] commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[0];

	
			    public Integer UserID;

				public Integer getUserID () {
					return this.UserID;
				}
				
			    public boolean Enabled;

				public boolean getEnabled () {
					return this.Enabled;
				}
				
			    public Object UserUniqueID;

				public Object getUserUniqueID () {
					return this.UserUniqueID;
				}
				
			    public int RoleID;

				public int getRoleID () {
					return this.RoleID;
				}
				
			    public boolean MustChangePassword;

				public boolean getMustChangePassword () {
					return this.MustChangePassword;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IMPORTINGEVMDATA_ImportingEVM) {

        	try {

        		int length = 0;
		
						this.UserID = readInteger(dis);
					
			        this.Enabled = dis.readBoolean();
					
						this.UserUniqueID = (Object) dis.readObject();
					
			        this.RoleID = dis.readInt();
					
			        this.MustChangePassword = dis.readBoolean();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.UserID,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.Enabled);
					
					// Object
				
       			    	dos.writeObject(this.UserUniqueID);
					
					// int
				
		            	dos.writeInt(this.RoleID);
					
					// boolean
				
		            	dos.writeBoolean(this.MustChangePassword);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("UserID="+String.valueOf(UserID));
		sb.append(",Enabled="+String.valueOf(Enabled));
		sb.append(",UserUniqueID="+String.valueOf(UserUniqueID));
		sb.append(",RoleID="+String.valueOf(RoleID));
		sb.append(",MustChangePassword="+String.valueOf(MustChangePassword));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row22Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row20Struct implements routines.system.IPersistableRow<row20Struct> {
    final static byte[] commonByteArrayLock_IMPORTINGEVMDATA_ImportingEVM = new byte[0];
    static byte[] commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[0];

	
			    public Integer UserID;

				public Integer getUserID () {
					return this.UserID;
				}
				
			    public boolean Enabled;

				public boolean getEnabled () {
					return this.Enabled;
				}
				
			    public Object UserUniqueID;

				public Object getUserUniqueID () {
					return this.UserUniqueID;
				}
				
			    public int RoleID;

				public int getRoleID () {
					return this.RoleID;
				}
				
			    public boolean MustChangePassword;

				public boolean getMustChangePassword () {
					return this.MustChangePassword;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IMPORTINGEVMDATA_ImportingEVM) {

        	try {

        		int length = 0;
		
						this.UserID = readInteger(dis);
					
			        this.Enabled = dis.readBoolean();
					
						this.UserUniqueID = (Object) dis.readObject();
					
			        this.RoleID = dis.readInt();
					
			        this.MustChangePassword = dis.readBoolean();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.UserID,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.Enabled);
					
					// Object
				
       			    	dos.writeObject(this.UserUniqueID);
					
					// int
				
		            	dos.writeInt(this.RoleID);
					
					// boolean
				
		            	dos.writeBoolean(this.MustChangePassword);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("UserID="+String.valueOf(UserID));
		sb.append(",Enabled="+String.valueOf(Enabled));
		sb.append(",UserUniqueID="+String.valueOf(UserUniqueID));
		sb.append(",RoleID="+String.valueOf(RoleID));
		sb.append(",MustChangePassword="+String.valueOf(MustChangePassword));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row20Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row20Struct row20 = new row20Struct();
row20Struct row22 = row20;





	
	/**
	 * [tAdvancedHash_row22 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row22", false);
		start_Hash.put("tAdvancedHash_row22", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row22";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("row22"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tAdvancedHash_row22 = 0;
		

			   		// connection name:row22
			   		// source node:tLogRow_14 - inputs:(row20) outputs:(row22,row22) | target node:tAdvancedHash_row22 - inputs:(row22) outputs:()
			   		// linked node: tMap_4 - inputs:(row21,row22) outputs:(AddNewUser)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row22 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_ROWS;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row22Struct> tHash_Lookup_row22 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row22Struct>getLookup(matchingModeEnum_row22);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row22", tHash_Lookup_row22);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row22 begin ] stop
 */



	
	/**
	 * [tLogRow_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_14", false);
		start_Hash.put("tLogRow_14", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_14";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("row20"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tLogRow_14 = 0;
		

	///////////////////////
	
         class Util_tLogRow_14 {

        String[] des_top = { ".", ".", "-", "+" };

        String[] des_head = { "|=", "=|", "-", "+" };

        String[] des_bottom = { "'", "'", "-", "+" };

        String name="";

        java.util.List<String[]> list = new java.util.ArrayList<String[]>();

        int[] colLengths = new int[5];

        public void addRow(String[] row) {

            for (int i = 0; i < 5; i++) {
                if (row[i]!=null) {
                  colLengths[i] = Math.max(colLengths[i], row[i].length());
                }
            }
            list.add(row);
        }

        public void setTableName(String name) {

            this.name = name;
        }

            public StringBuilder format() {
            
                StringBuilder sb = new StringBuilder();
  
            
                    sb.append(print(des_top));
    
                    int totals = 0;
                    for (int i = 0; i < colLengths.length; i++) {
                        totals = totals + colLengths[i];
                    }
    
                    // name
                    sb.append("|");
                    int k = 0;
                    for (k = 0; k < (totals + 4 - name.length()) / 2; k++) {
                        sb.append(' ');
                    }
                    sb.append(name);
                    for (int i = 0; i < totals + 4 - name.length() - k; i++) {
                        sb.append(' ');
                    }
                    sb.append("|\n");

                    // head and rows
                    sb.append(print(des_head));
                    for (int i = 0; i < list.size(); i++) {
    
                        String[] row = list.get(i);
    
                        java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());
                        
                        StringBuilder sbformat = new StringBuilder();                                             
        			        sbformat.append("|%1$-");
        			        sbformat.append(colLengths[0]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%2$-");
        			        sbformat.append(colLengths[1]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%3$-");
        			        sbformat.append(colLengths[2]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%4$-");
        			        sbformat.append(colLengths[3]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%5$-");
        			        sbformat.append(colLengths[4]);
        			        sbformat.append("s");
        			                      
                        sbformat.append("|\n");                    
       
                        formatter.format(sbformat.toString(), (Object[])row);	
                                
                        sb.append(formatter.toString());
                        if (i == 0)
                            sb.append(print(des_head)); // print the head
                    }
    
                    // end
                    sb.append(print(des_bottom));
                    return sb;
                }
            

            private StringBuilder print(String[] fillChars) {
                StringBuilder sb = new StringBuilder();
                //first column
                sb.append(fillChars[0]);                
                    for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);	                

                    for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                
                    //last column
                    for (int i = 0; i < colLengths[4] - fillChars[1].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }         
                sb.append(fillChars[1]);
                sb.append("\n");               
                return sb;
            }
            
            public boolean isTableEmpty(){
            	if (list.size() > 1)
            		return false;
            	return true;
            }
        }
        Util_tLogRow_14 util_tLogRow_14 = new Util_tLogRow_14();
        util_tLogRow_14.setTableName("UserTableLog");
        util_tLogRow_14.addRow(new String[]{"UserID","Enabled","UserUniqueID","RoleID","MustChangePassword",});        
 		StringBuilder strBuffer_tLogRow_14 = null;
		int nb_line_tLogRow_14 = 0;
///////////////////////    			



 



/**
 * [tLogRow_14 begin ] stop
 */



	
	/**
	 * [tDBInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_4", false);
		start_Hash.put("tDBInput_4", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_4";

	
		int tos_count_tDBInput_4 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_4 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_4 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_4  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_4, talendToDBArray_tDBInput_4); 
		    int nb_line_tDBInput_4 = 0;
		    java.sql.Connection conn_tDBInput_4 = null;
		        conn_tDBInput_4 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
			String dbschema_tDBInput_4 = (String)globalMap.get("dbschema_tDBConnection_1");
		    
			java.sql.Statement stmt_tDBInput_4 = conn_tDBInput_4.createStatement();

		    String dbquery_tDBInput_4 = "SELECT MAX(UserID) as UserID, 1 as Enabled,\nNEWID() as UserUniqueID, 3 as RoleID, 0 as MustChangePassword FROM	\"User"
+"\"";
			

            	globalMap.put("tDBInput_4_QUERY",dbquery_tDBInput_4);
		    java.sql.ResultSet rs_tDBInput_4 = null;

		    try {
		    	rs_tDBInput_4 = stmt_tDBInput_4.executeQuery(dbquery_tDBInput_4);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_4 = rs_tDBInput_4.getMetaData();
		    	int colQtyInRs_tDBInput_4 = rsmd_tDBInput_4.getColumnCount();

		    String tmpContent_tDBInput_4 = null;
		    
		    
		    while (rs_tDBInput_4.next()) {
		        nb_line_tDBInput_4++;
		        
							if(colQtyInRs_tDBInput_4 < 1) {
								row20.UserID = null;
							} else {
		                          
            row20.UserID = rs_tDBInput_4.getInt(1);
            if(rs_tDBInput_4.wasNull()){
                    row20.UserID = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 2) {
								row20.Enabled = false;
							} else {
	                         		
            row20.Enabled = rs_tDBInput_4.getBoolean(2);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 3) {
								row20.UserUniqueID = null;
							} else {
		                          
            row20.UserUniqueID = rs_tDBInput_4.getObject(3);
            if(rs_tDBInput_4.wasNull()){
                    row20.UserUniqueID = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 4) {
								row20.RoleID = 0;
							} else {
		                          
            row20.RoleID = rs_tDBInput_4.getInt(4);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 5) {
								row20.MustChangePassword = false;
							} else {
	                         		
            row20.MustChangePassword = rs_tDBInput_4.getBoolean(5);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
					





 



/**
 * [tDBInput_4 begin ] stop
 */
	
	/**
	 * [tDBInput_4 main ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 


	tos_count_tDBInput_4++;

/**
 * [tDBInput_4 main ] stop
 */
	
	/**
	 * [tDBInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tLogRow_14 main ] start
	 */

	

	
	
	currentComponent="tLogRow_14";

	

			//row20
			//row20


			
				
				if(execStat){
					runStat.updateStatOnConnection("row20"+iterateId,1, 1);
				}
				
				
				
			

		
///////////////////////		
						

				
				String[] row_tLogRow_14 = new String[5];
   				
	    		if(row20.UserID != null) { //              
                 row_tLogRow_14[0]=    						    
				                String.valueOf(row20.UserID)			
					          ;	
							
	    		} //			
    			              
                 row_tLogRow_14[1]=    						    
				                String.valueOf(row20.Enabled)			
					          ;	
										
    			   				
	    		if(row20.UserUniqueID != null) { //              
                 row_tLogRow_14[2]=    						    
				                String.valueOf(row20.UserUniqueID)			
					          ;	
							
	    		} //			
    			              
                 row_tLogRow_14[3]=    						    
				                String.valueOf(row20.RoleID)			
					          ;	
										
    			              
                 row_tLogRow_14[4]=    						    
				                String.valueOf(row20.MustChangePassword)			
					          ;	
										
    			 

				util_tLogRow_14.addRow(row_tLogRow_14);	
				nb_line_tLogRow_14++;
//////

//////                    
                    
///////////////////////    			

 
     row22 = row20;


	tos_count_tLogRow_14++;

/**
 * [tLogRow_14 main ] stop
 */
	
	/**
	 * [tLogRow_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_14";

	

 



/**
 * [tLogRow_14 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row22 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row22";

	

			//row22
			//row22


			
				
				if(execStat){
					runStat.updateStatOnConnection("row22"+iterateId,1, 1);
				}
				
				
				
			

		


			   
			   

					row22Struct row22_HashRow = new row22Struct();
		   	   	   
				
				row22_HashRow.UserID = row22.UserID;
				
				row22_HashRow.Enabled = row22.Enabled;
				
				row22_HashRow.UserUniqueID = row22.UserUniqueID;
				
				row22_HashRow.RoleID = row22.RoleID;
				
				row22_HashRow.MustChangePassword = row22.MustChangePassword;
				
			tHash_Lookup_row22.put(row22_HashRow);
			
            




 


	tos_count_tAdvancedHash_row22++;

/**
 * [tAdvancedHash_row22 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row22 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row22";

	

 



/**
 * [tAdvancedHash_row22 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row22 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row22";

	

 



/**
 * [tAdvancedHash_row22 process_data_end ] stop
 */



	
	/**
	 * [tLogRow_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_14";

	

 



/**
 * [tLogRow_14 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_4 end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

	}
}finally{
	if (rs_tDBInput_4 != null) {
		rs_tDBInput_4.close();
	}
	if (stmt_tDBInput_4 != null) {
		stmt_tDBInput_4.close();
	}
}
globalMap.put("tDBInput_4_NB_LINE",nb_line_tDBInput_4);

 

ok_Hash.put("tDBInput_4", true);
end_Hash.put("tDBInput_4", System.currentTimeMillis());




/**
 * [tDBInput_4 end ] stop
 */

	
	/**
	 * [tLogRow_14 end ] start
	 */

	

	
	
	currentComponent="tLogRow_14";

	


//////

                    
                    java.io.PrintStream consoleOut_tLogRow_14 = null;
                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_14 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_14 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_14);
                    }
                    
                    consoleOut_tLogRow_14.println(util_tLogRow_14.format().toString());
                    consoleOut_tLogRow_14.flush();
//////
globalMap.put("tLogRow_14_NB_LINE",nb_line_tLogRow_14);

///////////////////////    			

			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("row20"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tLogRow_14", true);
end_Hash.put("tLogRow_14", System.currentTimeMillis());




/**
 * [tLogRow_14 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row22 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row22";

	

tHash_Lookup_row22.endPut();

			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("row22"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tAdvancedHash_row22", true);
end_Hash.put("tAdvancedHash_row22", System.currentTimeMillis());




/**
 * [tAdvancedHash_row22 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_4 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 finally ] stop
 */

	
	/**
	 * [tLogRow_14 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_14";

	

 



/**
 * [tLogRow_14 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row22 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row22";

	

 



/**
 * [tAdvancedHash_row22 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 1);
	}
	


public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
    final static byte[] commonByteArrayLock_IMPORTINGEVMDATA_ImportingEVM = new byte[0];
    static byte[] commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int ID;

				public int getID () {
					return this.ID;
				}
				
			    public String WholesalerID;

				public String getWholesalerID () {
					return this.WholesalerID;
				}
				
			    public String PriCustomerNumber;

				public String getPriCustomerNumber () {
					return this.PriCustomerNumber;
				}
				
			    public String Description;

				public String getDescription () {
					return this.Description;
				}
				
			    public String ExternalCustomerNumber;

				public String getExternalCustomerNumber () {
					return this.ExternalCustomerNumber;
				}
				
			    public String PrimaryContactName;

				public String getPrimaryContactName () {
					return this.PrimaryContactName;
				}
				
			    public String PrimaryContactPhoneNumber;

				public String getPrimaryContactPhoneNumber () {
					return this.PrimaryContactPhoneNumber;
				}
				
			    public String PrimaryContactEmailAddress;

				public String getPrimaryContactEmailAddress () {
					return this.PrimaryContactEmailAddress;
				}
				
			    public String PrimaryContactAddress1;

				public String getPrimaryContactAddress1 () {
					return this.PrimaryContactAddress1;
				}
				
			    public String PrimaryContactAddress2;

				public String getPrimaryContactAddress2 () {
					return this.PrimaryContactAddress2;
				}
				
			    public String PrimaryContactCity;

				public String getPrimaryContactCity () {
					return this.PrimaryContactCity;
				}
				
			    public String PrimaryContactCountry;

				public String getPrimaryContactCountry () {
					return this.PrimaryContactCountry;
				}
				
			    public String PrimaryContactRegion;

				public String getPrimaryContactRegion () {
					return this.PrimaryContactRegion;
				}
				
			    public String PrimaryContactPostalCode;

				public String getPrimaryContactPostalCode () {
					return this.PrimaryContactPostalCode;
				}
				
			    public String PrimaryContactFaxNumber;

				public String getPrimaryContactFaxNumber () {
					return this.PrimaryContactFaxNumber;
				}
				
			    public String BillingContactName;

				public String getBillingContactName () {
					return this.BillingContactName;
				}
				
			    public String BillingContactPhoneNumber;

				public String getBillingContactPhoneNumber () {
					return this.BillingContactPhoneNumber;
				}
				
			    public String BillingContactEmailAddress;

				public String getBillingContactEmailAddress () {
					return this.BillingContactEmailAddress;
				}
				
			    public String BillingContactAddress1;

				public String getBillingContactAddress1 () {
					return this.BillingContactAddress1;
				}
				
			    public String BillingContactAddress2;

				public String getBillingContactAddress2 () {
					return this.BillingContactAddress2;
				}
				
			    public String BillingContactCity;

				public String getBillingContactCity () {
					return this.BillingContactCity;
				}
				
			    public String BillingContactCountry;

				public String getBillingContactCountry () {
					return this.BillingContactCountry;
				}
				
			    public String BillingContactRegion;

				public String getBillingContactRegion () {
					return this.BillingContactRegion;
				}
				
			    public String BillingContactPostalCode;

				public String getBillingContactPostalCode () {
					return this.BillingContactPostalCode;
				}
				
			    public String BillingContactFaxNumber;

				public String getBillingContactFaxNumber () {
					return this.BillingContactFaxNumber;
				}
				
			    public String WebsiteURL;

				public String getWebsiteURL () {
					return this.WebsiteURL;
				}
				
			    public int SalesPersonID;

				public int getSalesPersonID () {
					return this.SalesPersonID;
				}
				
			    public int VerticalID;

				public int getVerticalID () {
					return this.VerticalID;
				}
				
			    public int CompanyID;

				public int getCompanyID () {
					return this.CompanyID;
				}
				
			    public String CurrencyID;

				public String getCurrencyID () {
					return this.CurrencyID;
				}
				
			    public int BillingPeriodCutoff;

				public int getBillingPeriodCutoff () {
					return this.BillingPeriodCutoff;
				}
				
			    public int TaxableID;

				public int getTaxableID () {
					return this.TaxableID;
				}
				
			    public String CreditCardNameOnCard;

				public String getCreditCardNameOnCard () {
					return this.CreditCardNameOnCard;
				}
				
			    public String CreditCardNumber;

				public String getCreditCardNumber () {
					return this.CreditCardNumber;
				}
				
			    public String CreditCardExp;

				public String getCreditCardExp () {
					return this.CreditCardExp;
				}
				
			    public String CreditCardVerCode;

				public String getCreditCardVerCode () {
					return this.CreditCardVerCode;
				}
				
			    public String CreditCardTypeName;

				public String getCreditCardTypeName () {
					return this.CreditCardTypeName;
				}
				
			    public java.util.Date CreatedDate;

				public java.util.Date getCreatedDate () {
					return this.CreatedDate;
				}
				
			    public java.util.Date LastModified;

				public java.util.Date getLastModified () {
					return this.LastModified;
				}
				
			    public Object UniqueCustomerID;

				public Object getUniqueCustomerID () {
					return this.UniqueCustomerID;
				}
				
			    public Boolean Enabled;

				public Boolean getEnabled () {
					return this.Enabled;
				}
				
			    public Integer UserID;

				public Integer getUserID () {
					return this.UserID;
				}
				
			    public String WebGroupID;

				public String getWebGroupID () {
					return this.WebGroupID;
				}
				
			    public int AccountManagerID;

				public int getAccountManagerID () {
					return this.AccountManagerID;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.ID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row9Struct other = (row9Struct) obj;
		
						if (this.ID != other.ID)
							return false;
					

		return true;
    }

	public void copyDataTo(row9Struct other) {

		other.ID = this.ID;
	            other.WholesalerID = this.WholesalerID;
	            other.PriCustomerNumber = this.PriCustomerNumber;
	            other.Description = this.Description;
	            other.ExternalCustomerNumber = this.ExternalCustomerNumber;
	            other.PrimaryContactName = this.PrimaryContactName;
	            other.PrimaryContactPhoneNumber = this.PrimaryContactPhoneNumber;
	            other.PrimaryContactEmailAddress = this.PrimaryContactEmailAddress;
	            other.PrimaryContactAddress1 = this.PrimaryContactAddress1;
	            other.PrimaryContactAddress2 = this.PrimaryContactAddress2;
	            other.PrimaryContactCity = this.PrimaryContactCity;
	            other.PrimaryContactCountry = this.PrimaryContactCountry;
	            other.PrimaryContactRegion = this.PrimaryContactRegion;
	            other.PrimaryContactPostalCode = this.PrimaryContactPostalCode;
	            other.PrimaryContactFaxNumber = this.PrimaryContactFaxNumber;
	            other.BillingContactName = this.BillingContactName;
	            other.BillingContactPhoneNumber = this.BillingContactPhoneNumber;
	            other.BillingContactEmailAddress = this.BillingContactEmailAddress;
	            other.BillingContactAddress1 = this.BillingContactAddress1;
	            other.BillingContactAddress2 = this.BillingContactAddress2;
	            other.BillingContactCity = this.BillingContactCity;
	            other.BillingContactCountry = this.BillingContactCountry;
	            other.BillingContactRegion = this.BillingContactRegion;
	            other.BillingContactPostalCode = this.BillingContactPostalCode;
	            other.BillingContactFaxNumber = this.BillingContactFaxNumber;
	            other.WebsiteURL = this.WebsiteURL;
	            other.SalesPersonID = this.SalesPersonID;
	            other.VerticalID = this.VerticalID;
	            other.CompanyID = this.CompanyID;
	            other.CurrencyID = this.CurrencyID;
	            other.BillingPeriodCutoff = this.BillingPeriodCutoff;
	            other.TaxableID = this.TaxableID;
	            other.CreditCardNameOnCard = this.CreditCardNameOnCard;
	            other.CreditCardNumber = this.CreditCardNumber;
	            other.CreditCardExp = this.CreditCardExp;
	            other.CreditCardVerCode = this.CreditCardVerCode;
	            other.CreditCardTypeName = this.CreditCardTypeName;
	            other.CreatedDate = this.CreatedDate;
	            other.LastModified = this.LastModified;
	            other.UniqueCustomerID = this.UniqueCustomerID;
	            other.Enabled = this.Enabled;
	            other.UserID = this.UserID;
	            other.WebGroupID = this.WebGroupID;
	            other.AccountManagerID = this.AccountManagerID;
	            
	}

	public void copyKeysDataTo(row9Struct other) {

		other.ID = this.ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IMPORTINGEVMDATA_ImportingEVM.length) {
				if(length < 1024 && commonByteArray_IMPORTINGEVMDATA_ImportingEVM.length == 0) {
   					commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[1024];
				} else {
   					commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IMPORTINGEVMDATA_ImportingEVM, 0, length);
			strReturn = new String(commonByteArray_IMPORTINGEVMDATA_ImportingEVM, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IMPORTINGEVMDATA_ImportingEVM) {

        	try {

        		int length = 0;
		
			        this.ID = dis.readInt();
					
					this.WholesalerID = readString(dis);
					
					this.PriCustomerNumber = readString(dis);
					
					this.Description = readString(dis);
					
					this.ExternalCustomerNumber = readString(dis);
					
					this.PrimaryContactName = readString(dis);
					
					this.PrimaryContactPhoneNumber = readString(dis);
					
					this.PrimaryContactEmailAddress = readString(dis);
					
					this.PrimaryContactAddress1 = readString(dis);
					
					this.PrimaryContactAddress2 = readString(dis);
					
					this.PrimaryContactCity = readString(dis);
					
					this.PrimaryContactCountry = readString(dis);
					
					this.PrimaryContactRegion = readString(dis);
					
					this.PrimaryContactPostalCode = readString(dis);
					
					this.PrimaryContactFaxNumber = readString(dis);
					
					this.BillingContactName = readString(dis);
					
					this.BillingContactPhoneNumber = readString(dis);
					
					this.BillingContactEmailAddress = readString(dis);
					
					this.BillingContactAddress1 = readString(dis);
					
					this.BillingContactAddress2 = readString(dis);
					
					this.BillingContactCity = readString(dis);
					
					this.BillingContactCountry = readString(dis);
					
					this.BillingContactRegion = readString(dis);
					
					this.BillingContactPostalCode = readString(dis);
					
					this.BillingContactFaxNumber = readString(dis);
					
					this.WebsiteURL = readString(dis);
					
			        this.SalesPersonID = dis.readInt();
					
			        this.VerticalID = dis.readInt();
					
			        this.CompanyID = dis.readInt();
					
					this.CurrencyID = readString(dis);
					
			        this.BillingPeriodCutoff = dis.readInt();
					
			        this.TaxableID = dis.readInt();
					
					this.CreditCardNameOnCard = readString(dis);
					
					this.CreditCardNumber = readString(dis);
					
					this.CreditCardExp = readString(dis);
					
					this.CreditCardVerCode = readString(dis);
					
					this.CreditCardTypeName = readString(dis);
					
					this.CreatedDate = readDate(dis);
					
					this.LastModified = readDate(dis);
					
						this.UniqueCustomerID = (Object) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Enabled = null;
           				} else {
           			    	this.Enabled = dis.readBoolean();
           				}
					
						this.UserID = readInteger(dis);
					
					this.WebGroupID = readString(dis);
					
			        this.AccountManagerID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ID);
					
					// String
				
						writeString(this.WholesalerID,dos);
					
					// String
				
						writeString(this.PriCustomerNumber,dos);
					
					// String
				
						writeString(this.Description,dos);
					
					// String
				
						writeString(this.ExternalCustomerNumber,dos);
					
					// String
				
						writeString(this.PrimaryContactName,dos);
					
					// String
				
						writeString(this.PrimaryContactPhoneNumber,dos);
					
					// String
				
						writeString(this.PrimaryContactEmailAddress,dos);
					
					// String
				
						writeString(this.PrimaryContactAddress1,dos);
					
					// String
				
						writeString(this.PrimaryContactAddress2,dos);
					
					// String
				
						writeString(this.PrimaryContactCity,dos);
					
					// String
				
						writeString(this.PrimaryContactCountry,dos);
					
					// String
				
						writeString(this.PrimaryContactRegion,dos);
					
					// String
				
						writeString(this.PrimaryContactPostalCode,dos);
					
					// String
				
						writeString(this.PrimaryContactFaxNumber,dos);
					
					// String
				
						writeString(this.BillingContactName,dos);
					
					// String
				
						writeString(this.BillingContactPhoneNumber,dos);
					
					// String
				
						writeString(this.BillingContactEmailAddress,dos);
					
					// String
				
						writeString(this.BillingContactAddress1,dos);
					
					// String
				
						writeString(this.BillingContactAddress2,dos);
					
					// String
				
						writeString(this.BillingContactCity,dos);
					
					// String
				
						writeString(this.BillingContactCountry,dos);
					
					// String
				
						writeString(this.BillingContactRegion,dos);
					
					// String
				
						writeString(this.BillingContactPostalCode,dos);
					
					// String
				
						writeString(this.BillingContactFaxNumber,dos);
					
					// String
				
						writeString(this.WebsiteURL,dos);
					
					// int
				
		            	dos.writeInt(this.SalesPersonID);
					
					// int
				
		            	dos.writeInt(this.VerticalID);
					
					// int
				
		            	dos.writeInt(this.CompanyID);
					
					// String
				
						writeString(this.CurrencyID,dos);
					
					// int
				
		            	dos.writeInt(this.BillingPeriodCutoff);
					
					// int
				
		            	dos.writeInt(this.TaxableID);
					
					// String
				
						writeString(this.CreditCardNameOnCard,dos);
					
					// String
				
						writeString(this.CreditCardNumber,dos);
					
					// String
				
						writeString(this.CreditCardExp,dos);
					
					// String
				
						writeString(this.CreditCardVerCode,dos);
					
					// String
				
						writeString(this.CreditCardTypeName,dos);
					
					// java.util.Date
				
						writeDate(this.CreatedDate,dos);
					
					// java.util.Date
				
						writeDate(this.LastModified,dos);
					
					// Object
				
       			    	dos.writeObject(this.UniqueCustomerID);
					
					// Boolean
				
						if(this.Enabled == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.Enabled);
		            	}
					
					// Integer
				
						writeInteger(this.UserID,dos);
					
					// String
				
						writeString(this.WebGroupID,dos);
					
					// int
				
		            	dos.writeInt(this.AccountManagerID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",WholesalerID="+WholesalerID);
		sb.append(",PriCustomerNumber="+PriCustomerNumber);
		sb.append(",Description="+Description);
		sb.append(",ExternalCustomerNumber="+ExternalCustomerNumber);
		sb.append(",PrimaryContactName="+PrimaryContactName);
		sb.append(",PrimaryContactPhoneNumber="+PrimaryContactPhoneNumber);
		sb.append(",PrimaryContactEmailAddress="+PrimaryContactEmailAddress);
		sb.append(",PrimaryContactAddress1="+PrimaryContactAddress1);
		sb.append(",PrimaryContactAddress2="+PrimaryContactAddress2);
		sb.append(",PrimaryContactCity="+PrimaryContactCity);
		sb.append(",PrimaryContactCountry="+PrimaryContactCountry);
		sb.append(",PrimaryContactRegion="+PrimaryContactRegion);
		sb.append(",PrimaryContactPostalCode="+PrimaryContactPostalCode);
		sb.append(",PrimaryContactFaxNumber="+PrimaryContactFaxNumber);
		sb.append(",BillingContactName="+BillingContactName);
		sb.append(",BillingContactPhoneNumber="+BillingContactPhoneNumber);
		sb.append(",BillingContactEmailAddress="+BillingContactEmailAddress);
		sb.append(",BillingContactAddress1="+BillingContactAddress1);
		sb.append(",BillingContactAddress2="+BillingContactAddress2);
		sb.append(",BillingContactCity="+BillingContactCity);
		sb.append(",BillingContactCountry="+BillingContactCountry);
		sb.append(",BillingContactRegion="+BillingContactRegion);
		sb.append(",BillingContactPostalCode="+BillingContactPostalCode);
		sb.append(",BillingContactFaxNumber="+BillingContactFaxNumber);
		sb.append(",WebsiteURL="+WebsiteURL);
		sb.append(",SalesPersonID="+String.valueOf(SalesPersonID));
		sb.append(",VerticalID="+String.valueOf(VerticalID));
		sb.append(",CompanyID="+String.valueOf(CompanyID));
		sb.append(",CurrencyID="+CurrencyID);
		sb.append(",BillingPeriodCutoff="+String.valueOf(BillingPeriodCutoff));
		sb.append(",TaxableID="+String.valueOf(TaxableID));
		sb.append(",CreditCardNameOnCard="+CreditCardNameOnCard);
		sb.append(",CreditCardNumber="+CreditCardNumber);
		sb.append(",CreditCardExp="+CreditCardExp);
		sb.append(",CreditCardVerCode="+CreditCardVerCode);
		sb.append(",CreditCardTypeName="+CreditCardTypeName);
		sb.append(",CreatedDate="+String.valueOf(CreatedDate));
		sb.append(",LastModified="+String.valueOf(LastModified));
		sb.append(",UniqueCustomerID="+String.valueOf(UniqueCustomerID));
		sb.append(",Enabled="+String.valueOf(Enabled));
		sb.append(",UserID="+String.valueOf(UserID));
		sb.append(",WebGroupID="+WebGroupID);
		sb.append(",AccountManagerID="+String.valueOf(AccountManagerID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row9Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row26Struct implements routines.system.IPersistableRow<row26Struct> {
    final static byte[] commonByteArrayLock_IMPORTINGEVMDATA_ImportingEVM = new byte[0];
    static byte[] commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int ID;

				public int getID () {
					return this.ID;
				}
				
			    public String WholesalerID;

				public String getWholesalerID () {
					return this.WholesalerID;
				}
				
			    public String PriCustomerNumber;

				public String getPriCustomerNumber () {
					return this.PriCustomerNumber;
				}
				
			    public String Description;

				public String getDescription () {
					return this.Description;
				}
				
			    public String ExternalCustomerNumber;

				public String getExternalCustomerNumber () {
					return this.ExternalCustomerNumber;
				}
				
			    public String PrimaryContactName;

				public String getPrimaryContactName () {
					return this.PrimaryContactName;
				}
				
			    public String PrimaryContactPhoneNumber;

				public String getPrimaryContactPhoneNumber () {
					return this.PrimaryContactPhoneNumber;
				}
				
			    public String PrimaryContactEmailAddress;

				public String getPrimaryContactEmailAddress () {
					return this.PrimaryContactEmailAddress;
				}
				
			    public String PrimaryContactAddress1;

				public String getPrimaryContactAddress1 () {
					return this.PrimaryContactAddress1;
				}
				
			    public String PrimaryContactAddress2;

				public String getPrimaryContactAddress2 () {
					return this.PrimaryContactAddress2;
				}
				
			    public String PrimaryContactCity;

				public String getPrimaryContactCity () {
					return this.PrimaryContactCity;
				}
				
			    public String PrimaryContactCountry;

				public String getPrimaryContactCountry () {
					return this.PrimaryContactCountry;
				}
				
			    public String PrimaryContactRegion;

				public String getPrimaryContactRegion () {
					return this.PrimaryContactRegion;
				}
				
			    public String PrimaryContactPostalCode;

				public String getPrimaryContactPostalCode () {
					return this.PrimaryContactPostalCode;
				}
				
			    public String PrimaryContactFaxNumber;

				public String getPrimaryContactFaxNumber () {
					return this.PrimaryContactFaxNumber;
				}
				
			    public String BillingContactName;

				public String getBillingContactName () {
					return this.BillingContactName;
				}
				
			    public String BillingContactPhoneNumber;

				public String getBillingContactPhoneNumber () {
					return this.BillingContactPhoneNumber;
				}
				
			    public String BillingContactEmailAddress;

				public String getBillingContactEmailAddress () {
					return this.BillingContactEmailAddress;
				}
				
			    public String BillingContactAddress1;

				public String getBillingContactAddress1 () {
					return this.BillingContactAddress1;
				}
				
			    public String BillingContactAddress2;

				public String getBillingContactAddress2 () {
					return this.BillingContactAddress2;
				}
				
			    public String BillingContactCity;

				public String getBillingContactCity () {
					return this.BillingContactCity;
				}
				
			    public String BillingContactCountry;

				public String getBillingContactCountry () {
					return this.BillingContactCountry;
				}
				
			    public String BillingContactRegion;

				public String getBillingContactRegion () {
					return this.BillingContactRegion;
				}
				
			    public String BillingContactPostalCode;

				public String getBillingContactPostalCode () {
					return this.BillingContactPostalCode;
				}
				
			    public String BillingContactFaxNumber;

				public String getBillingContactFaxNumber () {
					return this.BillingContactFaxNumber;
				}
				
			    public String WebsiteURL;

				public String getWebsiteURL () {
					return this.WebsiteURL;
				}
				
			    public int SalesPersonID;

				public int getSalesPersonID () {
					return this.SalesPersonID;
				}
				
			    public int VerticalID;

				public int getVerticalID () {
					return this.VerticalID;
				}
				
			    public int CompanyID;

				public int getCompanyID () {
					return this.CompanyID;
				}
				
			    public String CurrencyID;

				public String getCurrencyID () {
					return this.CurrencyID;
				}
				
			    public int BillingPeriodCutoff;

				public int getBillingPeriodCutoff () {
					return this.BillingPeriodCutoff;
				}
				
			    public int TaxableID;

				public int getTaxableID () {
					return this.TaxableID;
				}
				
			    public String CreditCardNameOnCard;

				public String getCreditCardNameOnCard () {
					return this.CreditCardNameOnCard;
				}
				
			    public String CreditCardNumber;

				public String getCreditCardNumber () {
					return this.CreditCardNumber;
				}
				
			    public String CreditCardExp;

				public String getCreditCardExp () {
					return this.CreditCardExp;
				}
				
			    public String CreditCardVerCode;

				public String getCreditCardVerCode () {
					return this.CreditCardVerCode;
				}
				
			    public String CreditCardTypeName;

				public String getCreditCardTypeName () {
					return this.CreditCardTypeName;
				}
				
			    public java.util.Date CreatedDate;

				public java.util.Date getCreatedDate () {
					return this.CreatedDate;
				}
				
			    public java.util.Date LastModified;

				public java.util.Date getLastModified () {
					return this.LastModified;
				}
				
			    public Object UniqueCustomerID;

				public Object getUniqueCustomerID () {
					return this.UniqueCustomerID;
				}
				
			    public Boolean Enabled;

				public Boolean getEnabled () {
					return this.Enabled;
				}
				
			    public Integer UserID;

				public Integer getUserID () {
					return this.UserID;
				}
				
			    public String WebGroupID;

				public String getWebGroupID () {
					return this.WebGroupID;
				}
				
			    public int AccountManagerID;

				public int getAccountManagerID () {
					return this.AccountManagerID;
				}
				
			    public String errorCode;

				public String getErrorCode () {
					return this.errorCode;
				}
				
			    public String errorMessage;

				public String getErrorMessage () {
					return this.errorMessage;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.ID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row26Struct other = (row26Struct) obj;
		
						if (this.ID != other.ID)
							return false;
					

		return true;
    }

	public void copyDataTo(row26Struct other) {

		other.ID = this.ID;
	            other.WholesalerID = this.WholesalerID;
	            other.PriCustomerNumber = this.PriCustomerNumber;
	            other.Description = this.Description;
	            other.ExternalCustomerNumber = this.ExternalCustomerNumber;
	            other.PrimaryContactName = this.PrimaryContactName;
	            other.PrimaryContactPhoneNumber = this.PrimaryContactPhoneNumber;
	            other.PrimaryContactEmailAddress = this.PrimaryContactEmailAddress;
	            other.PrimaryContactAddress1 = this.PrimaryContactAddress1;
	            other.PrimaryContactAddress2 = this.PrimaryContactAddress2;
	            other.PrimaryContactCity = this.PrimaryContactCity;
	            other.PrimaryContactCountry = this.PrimaryContactCountry;
	            other.PrimaryContactRegion = this.PrimaryContactRegion;
	            other.PrimaryContactPostalCode = this.PrimaryContactPostalCode;
	            other.PrimaryContactFaxNumber = this.PrimaryContactFaxNumber;
	            other.BillingContactName = this.BillingContactName;
	            other.BillingContactPhoneNumber = this.BillingContactPhoneNumber;
	            other.BillingContactEmailAddress = this.BillingContactEmailAddress;
	            other.BillingContactAddress1 = this.BillingContactAddress1;
	            other.BillingContactAddress2 = this.BillingContactAddress2;
	            other.BillingContactCity = this.BillingContactCity;
	            other.BillingContactCountry = this.BillingContactCountry;
	            other.BillingContactRegion = this.BillingContactRegion;
	            other.BillingContactPostalCode = this.BillingContactPostalCode;
	            other.BillingContactFaxNumber = this.BillingContactFaxNumber;
	            other.WebsiteURL = this.WebsiteURL;
	            other.SalesPersonID = this.SalesPersonID;
	            other.VerticalID = this.VerticalID;
	            other.CompanyID = this.CompanyID;
	            other.CurrencyID = this.CurrencyID;
	            other.BillingPeriodCutoff = this.BillingPeriodCutoff;
	            other.TaxableID = this.TaxableID;
	            other.CreditCardNameOnCard = this.CreditCardNameOnCard;
	            other.CreditCardNumber = this.CreditCardNumber;
	            other.CreditCardExp = this.CreditCardExp;
	            other.CreditCardVerCode = this.CreditCardVerCode;
	            other.CreditCardTypeName = this.CreditCardTypeName;
	            other.CreatedDate = this.CreatedDate;
	            other.LastModified = this.LastModified;
	            other.UniqueCustomerID = this.UniqueCustomerID;
	            other.Enabled = this.Enabled;
	            other.UserID = this.UserID;
	            other.WebGroupID = this.WebGroupID;
	            other.AccountManagerID = this.AccountManagerID;
	            other.errorCode = this.errorCode;
	            other.errorMessage = this.errorMessage;
	            
	}

	public void copyKeysDataTo(row26Struct other) {

		other.ID = this.ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IMPORTINGEVMDATA_ImportingEVM.length) {
				if(length < 1024 && commonByteArray_IMPORTINGEVMDATA_ImportingEVM.length == 0) {
   					commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[1024];
				} else {
   					commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IMPORTINGEVMDATA_ImportingEVM, 0, length);
			strReturn = new String(commonByteArray_IMPORTINGEVMDATA_ImportingEVM, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IMPORTINGEVMDATA_ImportingEVM) {

        	try {

        		int length = 0;
		
			        this.ID = dis.readInt();
					
					this.WholesalerID = readString(dis);
					
					this.PriCustomerNumber = readString(dis);
					
					this.Description = readString(dis);
					
					this.ExternalCustomerNumber = readString(dis);
					
					this.PrimaryContactName = readString(dis);
					
					this.PrimaryContactPhoneNumber = readString(dis);
					
					this.PrimaryContactEmailAddress = readString(dis);
					
					this.PrimaryContactAddress1 = readString(dis);
					
					this.PrimaryContactAddress2 = readString(dis);
					
					this.PrimaryContactCity = readString(dis);
					
					this.PrimaryContactCountry = readString(dis);
					
					this.PrimaryContactRegion = readString(dis);
					
					this.PrimaryContactPostalCode = readString(dis);
					
					this.PrimaryContactFaxNumber = readString(dis);
					
					this.BillingContactName = readString(dis);
					
					this.BillingContactPhoneNumber = readString(dis);
					
					this.BillingContactEmailAddress = readString(dis);
					
					this.BillingContactAddress1 = readString(dis);
					
					this.BillingContactAddress2 = readString(dis);
					
					this.BillingContactCity = readString(dis);
					
					this.BillingContactCountry = readString(dis);
					
					this.BillingContactRegion = readString(dis);
					
					this.BillingContactPostalCode = readString(dis);
					
					this.BillingContactFaxNumber = readString(dis);
					
					this.WebsiteURL = readString(dis);
					
			        this.SalesPersonID = dis.readInt();
					
			        this.VerticalID = dis.readInt();
					
			        this.CompanyID = dis.readInt();
					
					this.CurrencyID = readString(dis);
					
			        this.BillingPeriodCutoff = dis.readInt();
					
			        this.TaxableID = dis.readInt();
					
					this.CreditCardNameOnCard = readString(dis);
					
					this.CreditCardNumber = readString(dis);
					
					this.CreditCardExp = readString(dis);
					
					this.CreditCardVerCode = readString(dis);
					
					this.CreditCardTypeName = readString(dis);
					
					this.CreatedDate = readDate(dis);
					
					this.LastModified = readDate(dis);
					
						this.UniqueCustomerID = (Object) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Enabled = null;
           				} else {
           			    	this.Enabled = dis.readBoolean();
           				}
					
						this.UserID = readInteger(dis);
					
					this.WebGroupID = readString(dis);
					
			        this.AccountManagerID = dis.readInt();
					
					this.errorCode = readString(dis);
					
					this.errorMessage = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ID);
					
					// String
				
						writeString(this.WholesalerID,dos);
					
					// String
				
						writeString(this.PriCustomerNumber,dos);
					
					// String
				
						writeString(this.Description,dos);
					
					// String
				
						writeString(this.ExternalCustomerNumber,dos);
					
					// String
				
						writeString(this.PrimaryContactName,dos);
					
					// String
				
						writeString(this.PrimaryContactPhoneNumber,dos);
					
					// String
				
						writeString(this.PrimaryContactEmailAddress,dos);
					
					// String
				
						writeString(this.PrimaryContactAddress1,dos);
					
					// String
				
						writeString(this.PrimaryContactAddress2,dos);
					
					// String
				
						writeString(this.PrimaryContactCity,dos);
					
					// String
				
						writeString(this.PrimaryContactCountry,dos);
					
					// String
				
						writeString(this.PrimaryContactRegion,dos);
					
					// String
				
						writeString(this.PrimaryContactPostalCode,dos);
					
					// String
				
						writeString(this.PrimaryContactFaxNumber,dos);
					
					// String
				
						writeString(this.BillingContactName,dos);
					
					// String
				
						writeString(this.BillingContactPhoneNumber,dos);
					
					// String
				
						writeString(this.BillingContactEmailAddress,dos);
					
					// String
				
						writeString(this.BillingContactAddress1,dos);
					
					// String
				
						writeString(this.BillingContactAddress2,dos);
					
					// String
				
						writeString(this.BillingContactCity,dos);
					
					// String
				
						writeString(this.BillingContactCountry,dos);
					
					// String
				
						writeString(this.BillingContactRegion,dos);
					
					// String
				
						writeString(this.BillingContactPostalCode,dos);
					
					// String
				
						writeString(this.BillingContactFaxNumber,dos);
					
					// String
				
						writeString(this.WebsiteURL,dos);
					
					// int
				
		            	dos.writeInt(this.SalesPersonID);
					
					// int
				
		            	dos.writeInt(this.VerticalID);
					
					// int
				
		            	dos.writeInt(this.CompanyID);
					
					// String
				
						writeString(this.CurrencyID,dos);
					
					// int
				
		            	dos.writeInt(this.BillingPeriodCutoff);
					
					// int
				
		            	dos.writeInt(this.TaxableID);
					
					// String
				
						writeString(this.CreditCardNameOnCard,dos);
					
					// String
				
						writeString(this.CreditCardNumber,dos);
					
					// String
				
						writeString(this.CreditCardExp,dos);
					
					// String
				
						writeString(this.CreditCardVerCode,dos);
					
					// String
				
						writeString(this.CreditCardTypeName,dos);
					
					// java.util.Date
				
						writeDate(this.CreatedDate,dos);
					
					// java.util.Date
				
						writeDate(this.LastModified,dos);
					
					// Object
				
       			    	dos.writeObject(this.UniqueCustomerID);
					
					// Boolean
				
						if(this.Enabled == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.Enabled);
		            	}
					
					// Integer
				
						writeInteger(this.UserID,dos);
					
					// String
				
						writeString(this.WebGroupID,dos);
					
					// int
				
		            	dos.writeInt(this.AccountManagerID);
					
					// String
				
						writeString(this.errorCode,dos);
					
					// String
				
						writeString(this.errorMessage,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",WholesalerID="+WholesalerID);
		sb.append(",PriCustomerNumber="+PriCustomerNumber);
		sb.append(",Description="+Description);
		sb.append(",ExternalCustomerNumber="+ExternalCustomerNumber);
		sb.append(",PrimaryContactName="+PrimaryContactName);
		sb.append(",PrimaryContactPhoneNumber="+PrimaryContactPhoneNumber);
		sb.append(",PrimaryContactEmailAddress="+PrimaryContactEmailAddress);
		sb.append(",PrimaryContactAddress1="+PrimaryContactAddress1);
		sb.append(",PrimaryContactAddress2="+PrimaryContactAddress2);
		sb.append(",PrimaryContactCity="+PrimaryContactCity);
		sb.append(",PrimaryContactCountry="+PrimaryContactCountry);
		sb.append(",PrimaryContactRegion="+PrimaryContactRegion);
		sb.append(",PrimaryContactPostalCode="+PrimaryContactPostalCode);
		sb.append(",PrimaryContactFaxNumber="+PrimaryContactFaxNumber);
		sb.append(",BillingContactName="+BillingContactName);
		sb.append(",BillingContactPhoneNumber="+BillingContactPhoneNumber);
		sb.append(",BillingContactEmailAddress="+BillingContactEmailAddress);
		sb.append(",BillingContactAddress1="+BillingContactAddress1);
		sb.append(",BillingContactAddress2="+BillingContactAddress2);
		sb.append(",BillingContactCity="+BillingContactCity);
		sb.append(",BillingContactCountry="+BillingContactCountry);
		sb.append(",BillingContactRegion="+BillingContactRegion);
		sb.append(",BillingContactPostalCode="+BillingContactPostalCode);
		sb.append(",BillingContactFaxNumber="+BillingContactFaxNumber);
		sb.append(",WebsiteURL="+WebsiteURL);
		sb.append(",SalesPersonID="+String.valueOf(SalesPersonID));
		sb.append(",VerticalID="+String.valueOf(VerticalID));
		sb.append(",CompanyID="+String.valueOf(CompanyID));
		sb.append(",CurrencyID="+CurrencyID);
		sb.append(",BillingPeriodCutoff="+String.valueOf(BillingPeriodCutoff));
		sb.append(",TaxableID="+String.valueOf(TaxableID));
		sb.append(",CreditCardNameOnCard="+CreditCardNameOnCard);
		sb.append(",CreditCardNumber="+CreditCardNumber);
		sb.append(",CreditCardExp="+CreditCardExp);
		sb.append(",CreditCardVerCode="+CreditCardVerCode);
		sb.append(",CreditCardTypeName="+CreditCardTypeName);
		sb.append(",CreatedDate="+String.valueOf(CreatedDate));
		sb.append(",LastModified="+String.valueOf(LastModified));
		sb.append(",UniqueCustomerID="+String.valueOf(UniqueCustomerID));
		sb.append(",Enabled="+String.valueOf(Enabled));
		sb.append(",UserID="+String.valueOf(UserID));
		sb.append(",WebGroupID="+WebGroupID);
		sb.append(",AccountManagerID="+String.valueOf(AccountManagerID));
		sb.append(",errorCode="+errorCode);
		sb.append(",errorMessage="+errorMessage);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row26Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class AddNewCustomerStruct implements routines.system.IPersistableRow<AddNewCustomerStruct> {
    final static byte[] commonByteArrayLock_IMPORTINGEVMDATA_ImportingEVM = new byte[0];
    static byte[] commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int ID;

				public int getID () {
					return this.ID;
				}
				
			    public String WholesalerID;

				public String getWholesalerID () {
					return this.WholesalerID;
				}
				
			    public String PriCustomerNumber;

				public String getPriCustomerNumber () {
					return this.PriCustomerNumber;
				}
				
			    public String Description;

				public String getDescription () {
					return this.Description;
				}
				
			    public String ExternalCustomerNumber;

				public String getExternalCustomerNumber () {
					return this.ExternalCustomerNumber;
				}
				
			    public String PrimaryContactName;

				public String getPrimaryContactName () {
					return this.PrimaryContactName;
				}
				
			    public String PrimaryContactPhoneNumber;

				public String getPrimaryContactPhoneNumber () {
					return this.PrimaryContactPhoneNumber;
				}
				
			    public String PrimaryContactEmailAddress;

				public String getPrimaryContactEmailAddress () {
					return this.PrimaryContactEmailAddress;
				}
				
			    public String PrimaryContactAddress1;

				public String getPrimaryContactAddress1 () {
					return this.PrimaryContactAddress1;
				}
				
			    public String PrimaryContactAddress2;

				public String getPrimaryContactAddress2 () {
					return this.PrimaryContactAddress2;
				}
				
			    public String PrimaryContactCity;

				public String getPrimaryContactCity () {
					return this.PrimaryContactCity;
				}
				
			    public String PrimaryContactCountry;

				public String getPrimaryContactCountry () {
					return this.PrimaryContactCountry;
				}
				
			    public String PrimaryContactRegion;

				public String getPrimaryContactRegion () {
					return this.PrimaryContactRegion;
				}
				
			    public String PrimaryContactPostalCode;

				public String getPrimaryContactPostalCode () {
					return this.PrimaryContactPostalCode;
				}
				
			    public String PrimaryContactFaxNumber;

				public String getPrimaryContactFaxNumber () {
					return this.PrimaryContactFaxNumber;
				}
				
			    public String BillingContactName;

				public String getBillingContactName () {
					return this.BillingContactName;
				}
				
			    public String BillingContactPhoneNumber;

				public String getBillingContactPhoneNumber () {
					return this.BillingContactPhoneNumber;
				}
				
			    public String BillingContactEmailAddress;

				public String getBillingContactEmailAddress () {
					return this.BillingContactEmailAddress;
				}
				
			    public String BillingContactAddress1;

				public String getBillingContactAddress1 () {
					return this.BillingContactAddress1;
				}
				
			    public String BillingContactAddress2;

				public String getBillingContactAddress2 () {
					return this.BillingContactAddress2;
				}
				
			    public String BillingContactCity;

				public String getBillingContactCity () {
					return this.BillingContactCity;
				}
				
			    public String BillingContactCountry;

				public String getBillingContactCountry () {
					return this.BillingContactCountry;
				}
				
			    public String BillingContactRegion;

				public String getBillingContactRegion () {
					return this.BillingContactRegion;
				}
				
			    public String BillingContactPostalCode;

				public String getBillingContactPostalCode () {
					return this.BillingContactPostalCode;
				}
				
			    public String BillingContactFaxNumber;

				public String getBillingContactFaxNumber () {
					return this.BillingContactFaxNumber;
				}
				
			    public String WebsiteURL;

				public String getWebsiteURL () {
					return this.WebsiteURL;
				}
				
			    public int SalesPersonID;

				public int getSalesPersonID () {
					return this.SalesPersonID;
				}
				
			    public int VerticalID;

				public int getVerticalID () {
					return this.VerticalID;
				}
				
			    public int CompanyID;

				public int getCompanyID () {
					return this.CompanyID;
				}
				
			    public String CurrencyID;

				public String getCurrencyID () {
					return this.CurrencyID;
				}
				
			    public int BillingPeriodCutoff;

				public int getBillingPeriodCutoff () {
					return this.BillingPeriodCutoff;
				}
				
			    public int TaxableID;

				public int getTaxableID () {
					return this.TaxableID;
				}
				
			    public String CreditCardNameOnCard;

				public String getCreditCardNameOnCard () {
					return this.CreditCardNameOnCard;
				}
				
			    public String CreditCardNumber;

				public String getCreditCardNumber () {
					return this.CreditCardNumber;
				}
				
			    public String CreditCardExp;

				public String getCreditCardExp () {
					return this.CreditCardExp;
				}
				
			    public String CreditCardVerCode;

				public String getCreditCardVerCode () {
					return this.CreditCardVerCode;
				}
				
			    public String CreditCardTypeName;

				public String getCreditCardTypeName () {
					return this.CreditCardTypeName;
				}
				
			    public java.util.Date CreatedDate;

				public java.util.Date getCreatedDate () {
					return this.CreatedDate;
				}
				
			    public java.util.Date LastModified;

				public java.util.Date getLastModified () {
					return this.LastModified;
				}
				
			    public Object UniqueCustomerID;

				public Object getUniqueCustomerID () {
					return this.UniqueCustomerID;
				}
				
			    public Boolean Enabled;

				public Boolean getEnabled () {
					return this.Enabled;
				}
				
			    public Integer UserID;

				public Integer getUserID () {
					return this.UserID;
				}
				
			    public String WebGroupID;

				public String getWebGroupID () {
					return this.WebGroupID;
				}
				
			    public int AccountManagerID;

				public int getAccountManagerID () {
					return this.AccountManagerID;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.ID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final AddNewCustomerStruct other = (AddNewCustomerStruct) obj;
		
						if (this.ID != other.ID)
							return false;
					

		return true;
    }

	public void copyDataTo(AddNewCustomerStruct other) {

		other.ID = this.ID;
	            other.WholesalerID = this.WholesalerID;
	            other.PriCustomerNumber = this.PriCustomerNumber;
	            other.Description = this.Description;
	            other.ExternalCustomerNumber = this.ExternalCustomerNumber;
	            other.PrimaryContactName = this.PrimaryContactName;
	            other.PrimaryContactPhoneNumber = this.PrimaryContactPhoneNumber;
	            other.PrimaryContactEmailAddress = this.PrimaryContactEmailAddress;
	            other.PrimaryContactAddress1 = this.PrimaryContactAddress1;
	            other.PrimaryContactAddress2 = this.PrimaryContactAddress2;
	            other.PrimaryContactCity = this.PrimaryContactCity;
	            other.PrimaryContactCountry = this.PrimaryContactCountry;
	            other.PrimaryContactRegion = this.PrimaryContactRegion;
	            other.PrimaryContactPostalCode = this.PrimaryContactPostalCode;
	            other.PrimaryContactFaxNumber = this.PrimaryContactFaxNumber;
	            other.BillingContactName = this.BillingContactName;
	            other.BillingContactPhoneNumber = this.BillingContactPhoneNumber;
	            other.BillingContactEmailAddress = this.BillingContactEmailAddress;
	            other.BillingContactAddress1 = this.BillingContactAddress1;
	            other.BillingContactAddress2 = this.BillingContactAddress2;
	            other.BillingContactCity = this.BillingContactCity;
	            other.BillingContactCountry = this.BillingContactCountry;
	            other.BillingContactRegion = this.BillingContactRegion;
	            other.BillingContactPostalCode = this.BillingContactPostalCode;
	            other.BillingContactFaxNumber = this.BillingContactFaxNumber;
	            other.WebsiteURL = this.WebsiteURL;
	            other.SalesPersonID = this.SalesPersonID;
	            other.VerticalID = this.VerticalID;
	            other.CompanyID = this.CompanyID;
	            other.CurrencyID = this.CurrencyID;
	            other.BillingPeriodCutoff = this.BillingPeriodCutoff;
	            other.TaxableID = this.TaxableID;
	            other.CreditCardNameOnCard = this.CreditCardNameOnCard;
	            other.CreditCardNumber = this.CreditCardNumber;
	            other.CreditCardExp = this.CreditCardExp;
	            other.CreditCardVerCode = this.CreditCardVerCode;
	            other.CreditCardTypeName = this.CreditCardTypeName;
	            other.CreatedDate = this.CreatedDate;
	            other.LastModified = this.LastModified;
	            other.UniqueCustomerID = this.UniqueCustomerID;
	            other.Enabled = this.Enabled;
	            other.UserID = this.UserID;
	            other.WebGroupID = this.WebGroupID;
	            other.AccountManagerID = this.AccountManagerID;
	            
	}

	public void copyKeysDataTo(AddNewCustomerStruct other) {

		other.ID = this.ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IMPORTINGEVMDATA_ImportingEVM.length) {
				if(length < 1024 && commonByteArray_IMPORTINGEVMDATA_ImportingEVM.length == 0) {
   					commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[1024];
				} else {
   					commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IMPORTINGEVMDATA_ImportingEVM, 0, length);
			strReturn = new String(commonByteArray_IMPORTINGEVMDATA_ImportingEVM, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IMPORTINGEVMDATA_ImportingEVM) {

        	try {

        		int length = 0;
		
			        this.ID = dis.readInt();
					
					this.WholesalerID = readString(dis);
					
					this.PriCustomerNumber = readString(dis);
					
					this.Description = readString(dis);
					
					this.ExternalCustomerNumber = readString(dis);
					
					this.PrimaryContactName = readString(dis);
					
					this.PrimaryContactPhoneNumber = readString(dis);
					
					this.PrimaryContactEmailAddress = readString(dis);
					
					this.PrimaryContactAddress1 = readString(dis);
					
					this.PrimaryContactAddress2 = readString(dis);
					
					this.PrimaryContactCity = readString(dis);
					
					this.PrimaryContactCountry = readString(dis);
					
					this.PrimaryContactRegion = readString(dis);
					
					this.PrimaryContactPostalCode = readString(dis);
					
					this.PrimaryContactFaxNumber = readString(dis);
					
					this.BillingContactName = readString(dis);
					
					this.BillingContactPhoneNumber = readString(dis);
					
					this.BillingContactEmailAddress = readString(dis);
					
					this.BillingContactAddress1 = readString(dis);
					
					this.BillingContactAddress2 = readString(dis);
					
					this.BillingContactCity = readString(dis);
					
					this.BillingContactCountry = readString(dis);
					
					this.BillingContactRegion = readString(dis);
					
					this.BillingContactPostalCode = readString(dis);
					
					this.BillingContactFaxNumber = readString(dis);
					
					this.WebsiteURL = readString(dis);
					
			        this.SalesPersonID = dis.readInt();
					
			        this.VerticalID = dis.readInt();
					
			        this.CompanyID = dis.readInt();
					
					this.CurrencyID = readString(dis);
					
			        this.BillingPeriodCutoff = dis.readInt();
					
			        this.TaxableID = dis.readInt();
					
					this.CreditCardNameOnCard = readString(dis);
					
					this.CreditCardNumber = readString(dis);
					
					this.CreditCardExp = readString(dis);
					
					this.CreditCardVerCode = readString(dis);
					
					this.CreditCardTypeName = readString(dis);
					
					this.CreatedDate = readDate(dis);
					
					this.LastModified = readDate(dis);
					
						this.UniqueCustomerID = (Object) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Enabled = null;
           				} else {
           			    	this.Enabled = dis.readBoolean();
           				}
					
						this.UserID = readInteger(dis);
					
					this.WebGroupID = readString(dis);
					
			        this.AccountManagerID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ID);
					
					// String
				
						writeString(this.WholesalerID,dos);
					
					// String
				
						writeString(this.PriCustomerNumber,dos);
					
					// String
				
						writeString(this.Description,dos);
					
					// String
				
						writeString(this.ExternalCustomerNumber,dos);
					
					// String
				
						writeString(this.PrimaryContactName,dos);
					
					// String
				
						writeString(this.PrimaryContactPhoneNumber,dos);
					
					// String
				
						writeString(this.PrimaryContactEmailAddress,dos);
					
					// String
				
						writeString(this.PrimaryContactAddress1,dos);
					
					// String
				
						writeString(this.PrimaryContactAddress2,dos);
					
					// String
				
						writeString(this.PrimaryContactCity,dos);
					
					// String
				
						writeString(this.PrimaryContactCountry,dos);
					
					// String
				
						writeString(this.PrimaryContactRegion,dos);
					
					// String
				
						writeString(this.PrimaryContactPostalCode,dos);
					
					// String
				
						writeString(this.PrimaryContactFaxNumber,dos);
					
					// String
				
						writeString(this.BillingContactName,dos);
					
					// String
				
						writeString(this.BillingContactPhoneNumber,dos);
					
					// String
				
						writeString(this.BillingContactEmailAddress,dos);
					
					// String
				
						writeString(this.BillingContactAddress1,dos);
					
					// String
				
						writeString(this.BillingContactAddress2,dos);
					
					// String
				
						writeString(this.BillingContactCity,dos);
					
					// String
				
						writeString(this.BillingContactCountry,dos);
					
					// String
				
						writeString(this.BillingContactRegion,dos);
					
					// String
				
						writeString(this.BillingContactPostalCode,dos);
					
					// String
				
						writeString(this.BillingContactFaxNumber,dos);
					
					// String
				
						writeString(this.WebsiteURL,dos);
					
					// int
				
		            	dos.writeInt(this.SalesPersonID);
					
					// int
				
		            	dos.writeInt(this.VerticalID);
					
					// int
				
		            	dos.writeInt(this.CompanyID);
					
					// String
				
						writeString(this.CurrencyID,dos);
					
					// int
				
		            	dos.writeInt(this.BillingPeriodCutoff);
					
					// int
				
		            	dos.writeInt(this.TaxableID);
					
					// String
				
						writeString(this.CreditCardNameOnCard,dos);
					
					// String
				
						writeString(this.CreditCardNumber,dos);
					
					// String
				
						writeString(this.CreditCardExp,dos);
					
					// String
				
						writeString(this.CreditCardVerCode,dos);
					
					// String
				
						writeString(this.CreditCardTypeName,dos);
					
					// java.util.Date
				
						writeDate(this.CreatedDate,dos);
					
					// java.util.Date
				
						writeDate(this.LastModified,dos);
					
					// Object
				
       			    	dos.writeObject(this.UniqueCustomerID);
					
					// Boolean
				
						if(this.Enabled == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.Enabled);
		            	}
					
					// Integer
				
						writeInteger(this.UserID,dos);
					
					// String
				
						writeString(this.WebGroupID,dos);
					
					// int
				
		            	dos.writeInt(this.AccountManagerID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",WholesalerID="+WholesalerID);
		sb.append(",PriCustomerNumber="+PriCustomerNumber);
		sb.append(",Description="+Description);
		sb.append(",ExternalCustomerNumber="+ExternalCustomerNumber);
		sb.append(",PrimaryContactName="+PrimaryContactName);
		sb.append(",PrimaryContactPhoneNumber="+PrimaryContactPhoneNumber);
		sb.append(",PrimaryContactEmailAddress="+PrimaryContactEmailAddress);
		sb.append(",PrimaryContactAddress1="+PrimaryContactAddress1);
		sb.append(",PrimaryContactAddress2="+PrimaryContactAddress2);
		sb.append(",PrimaryContactCity="+PrimaryContactCity);
		sb.append(",PrimaryContactCountry="+PrimaryContactCountry);
		sb.append(",PrimaryContactRegion="+PrimaryContactRegion);
		sb.append(",PrimaryContactPostalCode="+PrimaryContactPostalCode);
		sb.append(",PrimaryContactFaxNumber="+PrimaryContactFaxNumber);
		sb.append(",BillingContactName="+BillingContactName);
		sb.append(",BillingContactPhoneNumber="+BillingContactPhoneNumber);
		sb.append(",BillingContactEmailAddress="+BillingContactEmailAddress);
		sb.append(",BillingContactAddress1="+BillingContactAddress1);
		sb.append(",BillingContactAddress2="+BillingContactAddress2);
		sb.append(",BillingContactCity="+BillingContactCity);
		sb.append(",BillingContactCountry="+BillingContactCountry);
		sb.append(",BillingContactRegion="+BillingContactRegion);
		sb.append(",BillingContactPostalCode="+BillingContactPostalCode);
		sb.append(",BillingContactFaxNumber="+BillingContactFaxNumber);
		sb.append(",WebsiteURL="+WebsiteURL);
		sb.append(",SalesPersonID="+String.valueOf(SalesPersonID));
		sb.append(",VerticalID="+String.valueOf(VerticalID));
		sb.append(",CompanyID="+String.valueOf(CompanyID));
		sb.append(",CurrencyID="+CurrencyID);
		sb.append(",BillingPeriodCutoff="+String.valueOf(BillingPeriodCutoff));
		sb.append(",TaxableID="+String.valueOf(TaxableID));
		sb.append(",CreditCardNameOnCard="+CreditCardNameOnCard);
		sb.append(",CreditCardNumber="+CreditCardNumber);
		sb.append(",CreditCardExp="+CreditCardExp);
		sb.append(",CreditCardVerCode="+CreditCardVerCode);
		sb.append(",CreditCardTypeName="+CreditCardTypeName);
		sb.append(",CreatedDate="+String.valueOf(CreatedDate));
		sb.append(",LastModified="+String.valueOf(LastModified));
		sb.append(",UniqueCustomerID="+String.valueOf(UniqueCustomerID));
		sb.append(",Enabled="+String.valueOf(Enabled));
		sb.append(",UserID="+String.valueOf(UserID));
		sb.append(",WebGroupID="+WebGroupID);
		sb.append(",AccountManagerID="+String.valueOf(AccountManagerID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(AddNewCustomerStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row12Struct implements routines.system.IPersistableRow<row12Struct> {
    final static byte[] commonByteArrayLock_IMPORTINGEVMDATA_ImportingEVM = new byte[0];
    static byte[] commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[0];

	
			    public String CompanyName;

				public String getCompanyName () {
					return this.CompanyName;
				}
				
			    public String EVMCustomerNumber;

				public String getEVMCustomerNumber () {
					return this.EVMCustomerNumber;
				}
				
			    public String CurrencyID;

				public String getCurrencyID () {
					return this.CurrencyID;
				}
				
			    public Integer Vertical;

				public Integer getVertical () {
					return this.Vertical;
				}
				
			    public String CustomerAdminName;

				public String getCustomerAdminName () {
					return this.CustomerAdminName;
				}
				
			    public String CustomerAdminPhoneNumber;

				public String getCustomerAdminPhoneNumber () {
					return this.CustomerAdminPhoneNumber;
				}
				
			    public String CustomerAdminEmailAddress;

				public String getCustomerAdminEmailAddress () {
					return this.CustomerAdminEmailAddress;
				}
				
			    public String CustomerAdminAddress1;

				public String getCustomerAdminAddress1 () {
					return this.CustomerAdminAddress1;
				}
				
			    public String CustomerAdminCity;

				public String getCustomerAdminCity () {
					return this.CustomerAdminCity;
				}
				
			    public String CustomerAdminCountry;

				public String getCustomerAdminCountry () {
					return this.CustomerAdminCountry;
				}
				
			    public String CustomerAdminRegion;

				public String getCustomerAdminRegion () {
					return this.CustomerAdminRegion;
				}
				
			    public String CustomerAdminPostalCode;

				public String getCustomerAdminPostalCode () {
					return this.CustomerAdminPostalCode;
				}
				
			    public String Username;

				public String getUsername () {
					return this.Username;
				}
				
			    public String Password;

				public String getPassword () {
					return this.Password;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IMPORTINGEVMDATA_ImportingEVM.length) {
				if(length < 1024 && commonByteArray_IMPORTINGEVMDATA_ImportingEVM.length == 0) {
   					commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[1024];
				} else {
   					commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IMPORTINGEVMDATA_ImportingEVM, 0, length);
			strReturn = new String(commonByteArray_IMPORTINGEVMDATA_ImportingEVM, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IMPORTINGEVMDATA_ImportingEVM) {

        	try {

        		int length = 0;
		
					this.CompanyName = readString(dis);
					
					this.EVMCustomerNumber = readString(dis);
					
					this.CurrencyID = readString(dis);
					
						this.Vertical = readInteger(dis);
					
					this.CustomerAdminName = readString(dis);
					
					this.CustomerAdminPhoneNumber = readString(dis);
					
					this.CustomerAdminEmailAddress = readString(dis);
					
					this.CustomerAdminAddress1 = readString(dis);
					
					this.CustomerAdminCity = readString(dis);
					
					this.CustomerAdminCountry = readString(dis);
					
					this.CustomerAdminRegion = readString(dis);
					
					this.CustomerAdminPostalCode = readString(dis);
					
					this.Username = readString(dis);
					
					this.Password = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CompanyName,dos);
					
					// String
				
						writeString(this.EVMCustomerNumber,dos);
					
					// String
				
						writeString(this.CurrencyID,dos);
					
					// Integer
				
						writeInteger(this.Vertical,dos);
					
					// String
				
						writeString(this.CustomerAdminName,dos);
					
					// String
				
						writeString(this.CustomerAdminPhoneNumber,dos);
					
					// String
				
						writeString(this.CustomerAdminEmailAddress,dos);
					
					// String
				
						writeString(this.CustomerAdminAddress1,dos);
					
					// String
				
						writeString(this.CustomerAdminCity,dos);
					
					// String
				
						writeString(this.CustomerAdminCountry,dos);
					
					// String
				
						writeString(this.CustomerAdminRegion,dos);
					
					// String
				
						writeString(this.CustomerAdminPostalCode,dos);
					
					// String
				
						writeString(this.Username,dos);
					
					// String
				
						writeString(this.Password,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CompanyName="+CompanyName);
		sb.append(",EVMCustomerNumber="+EVMCustomerNumber);
		sb.append(",CurrencyID="+CurrencyID);
		sb.append(",Vertical="+String.valueOf(Vertical));
		sb.append(",CustomerAdminName="+CustomerAdminName);
		sb.append(",CustomerAdminPhoneNumber="+CustomerAdminPhoneNumber);
		sb.append(",CustomerAdminEmailAddress="+CustomerAdminEmailAddress);
		sb.append(",CustomerAdminAddress1="+CustomerAdminAddress1);
		sb.append(",CustomerAdminCity="+CustomerAdminCity);
		sb.append(",CustomerAdminCountry="+CustomerAdminCountry);
		sb.append(",CustomerAdminRegion="+CustomerAdminRegion);
		sb.append(",CustomerAdminPostalCode="+CustomerAdminPostalCode);
		sb.append(",Username="+Username);
		sb.append(",Password="+Password);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row12Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
    final static byte[] commonByteArrayLock_IMPORTINGEVMDATA_ImportingEVM = new byte[0];
    static byte[] commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[0];

	
			    public String CompanyName;

				public String getCompanyName () {
					return this.CompanyName;
				}
				
			    public String EVMCustomerNumber;

				public String getEVMCustomerNumber () {
					return this.EVMCustomerNumber;
				}
				
			    public String CurrencyID;

				public String getCurrencyID () {
					return this.CurrencyID;
				}
				
			    public Integer Vertical;

				public Integer getVertical () {
					return this.Vertical;
				}
				
			    public String CustomerAdminName;

				public String getCustomerAdminName () {
					return this.CustomerAdminName;
				}
				
			    public String CustomerAdminPhoneNumber;

				public String getCustomerAdminPhoneNumber () {
					return this.CustomerAdminPhoneNumber;
				}
				
			    public String CustomerAdminEmailAddress;

				public String getCustomerAdminEmailAddress () {
					return this.CustomerAdminEmailAddress;
				}
				
			    public String CustomerAdminAddress1;

				public String getCustomerAdminAddress1 () {
					return this.CustomerAdminAddress1;
				}
				
			    public String CustomerAdminCity;

				public String getCustomerAdminCity () {
					return this.CustomerAdminCity;
				}
				
			    public String CustomerAdminCountry;

				public String getCustomerAdminCountry () {
					return this.CustomerAdminCountry;
				}
				
			    public String CustomerAdminRegion;

				public String getCustomerAdminRegion () {
					return this.CustomerAdminRegion;
				}
				
			    public String CustomerAdminPostalCode;

				public String getCustomerAdminPostalCode () {
					return this.CustomerAdminPostalCode;
				}
				
			    public String Username;

				public String getUsername () {
					return this.Username;
				}
				
			    public String Password;

				public String getPassword () {
					return this.Password;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IMPORTINGEVMDATA_ImportingEVM.length) {
				if(length < 1024 && commonByteArray_IMPORTINGEVMDATA_ImportingEVM.length == 0) {
   					commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[1024];
				} else {
   					commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IMPORTINGEVMDATA_ImportingEVM, 0, length);
			strReturn = new String(commonByteArray_IMPORTINGEVMDATA_ImportingEVM, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IMPORTINGEVMDATA_ImportingEVM) {

        	try {

        		int length = 0;
		
					this.CompanyName = readString(dis);
					
					this.EVMCustomerNumber = readString(dis);
					
					this.CurrencyID = readString(dis);
					
						this.Vertical = readInteger(dis);
					
					this.CustomerAdminName = readString(dis);
					
					this.CustomerAdminPhoneNumber = readString(dis);
					
					this.CustomerAdminEmailAddress = readString(dis);
					
					this.CustomerAdminAddress1 = readString(dis);
					
					this.CustomerAdminCity = readString(dis);
					
					this.CustomerAdminCountry = readString(dis);
					
					this.CustomerAdminRegion = readString(dis);
					
					this.CustomerAdminPostalCode = readString(dis);
					
					this.Username = readString(dis);
					
					this.Password = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CompanyName,dos);
					
					// String
				
						writeString(this.EVMCustomerNumber,dos);
					
					// String
				
						writeString(this.CurrencyID,dos);
					
					// Integer
				
						writeInteger(this.Vertical,dos);
					
					// String
				
						writeString(this.CustomerAdminName,dos);
					
					// String
				
						writeString(this.CustomerAdminPhoneNumber,dos);
					
					// String
				
						writeString(this.CustomerAdminEmailAddress,dos);
					
					// String
				
						writeString(this.CustomerAdminAddress1,dos);
					
					// String
				
						writeString(this.CustomerAdminCity,dos);
					
					// String
				
						writeString(this.CustomerAdminCountry,dos);
					
					// String
				
						writeString(this.CustomerAdminRegion,dos);
					
					// String
				
						writeString(this.CustomerAdminPostalCode,dos);
					
					// String
				
						writeString(this.Username,dos);
					
					// String
				
						writeString(this.Password,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CompanyName="+CompanyName);
		sb.append(",EVMCustomerNumber="+EVMCustomerNumber);
		sb.append(",CurrencyID="+CurrencyID);
		sb.append(",Vertical="+String.valueOf(Vertical));
		sb.append(",CustomerAdminName="+CustomerAdminName);
		sb.append(",CustomerAdminPhoneNumber="+CustomerAdminPhoneNumber);
		sb.append(",CustomerAdminEmailAddress="+CustomerAdminEmailAddress);
		sb.append(",CustomerAdminAddress1="+CustomerAdminAddress1);
		sb.append(",CustomerAdminCity="+CustomerAdminCity);
		sb.append(",CustomerAdminCountry="+CustomerAdminCountry);
		sb.append(",CustomerAdminRegion="+CustomerAdminRegion);
		sb.append(",CustomerAdminPostalCode="+CustomerAdminPostalCode);
		sb.append(",Username="+Username);
		sb.append(",Password="+Password);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row10Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tFileInputDelimited_2Struct implements routines.system.IPersistableRow<after_tFileInputDelimited_2Struct> {
    final static byte[] commonByteArrayLock_IMPORTINGEVMDATA_ImportingEVM = new byte[0];
    static byte[] commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[0];

	
			    public String CompanyName;

				public String getCompanyName () {
					return this.CompanyName;
				}
				
			    public String EVMCustomerNumber;

				public String getEVMCustomerNumber () {
					return this.EVMCustomerNumber;
				}
				
			    public String CurrencyID;

				public String getCurrencyID () {
					return this.CurrencyID;
				}
				
			    public Integer Vertical;

				public Integer getVertical () {
					return this.Vertical;
				}
				
			    public String CustomerAdminName;

				public String getCustomerAdminName () {
					return this.CustomerAdminName;
				}
				
			    public String CustomerAdminPhoneNumber;

				public String getCustomerAdminPhoneNumber () {
					return this.CustomerAdminPhoneNumber;
				}
				
			    public String CustomerAdminEmailAddress;

				public String getCustomerAdminEmailAddress () {
					return this.CustomerAdminEmailAddress;
				}
				
			    public String CustomerAdminAddress1;

				public String getCustomerAdminAddress1 () {
					return this.CustomerAdminAddress1;
				}
				
			    public String CustomerAdminCity;

				public String getCustomerAdminCity () {
					return this.CustomerAdminCity;
				}
				
			    public String CustomerAdminCountry;

				public String getCustomerAdminCountry () {
					return this.CustomerAdminCountry;
				}
				
			    public String CustomerAdminRegion;

				public String getCustomerAdminRegion () {
					return this.CustomerAdminRegion;
				}
				
			    public String CustomerAdminPostalCode;

				public String getCustomerAdminPostalCode () {
					return this.CustomerAdminPostalCode;
				}
				
			    public String Username;

				public String getUsername () {
					return this.Username;
				}
				
			    public String Password;

				public String getPassword () {
					return this.Password;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IMPORTINGEVMDATA_ImportingEVM.length) {
				if(length < 1024 && commonByteArray_IMPORTINGEVMDATA_ImportingEVM.length == 0) {
   					commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[1024];
				} else {
   					commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IMPORTINGEVMDATA_ImportingEVM, 0, length);
			strReturn = new String(commonByteArray_IMPORTINGEVMDATA_ImportingEVM, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IMPORTINGEVMDATA_ImportingEVM) {

        	try {

        		int length = 0;
		
					this.CompanyName = readString(dis);
					
					this.EVMCustomerNumber = readString(dis);
					
					this.CurrencyID = readString(dis);
					
						this.Vertical = readInteger(dis);
					
					this.CustomerAdminName = readString(dis);
					
					this.CustomerAdminPhoneNumber = readString(dis);
					
					this.CustomerAdminEmailAddress = readString(dis);
					
					this.CustomerAdminAddress1 = readString(dis);
					
					this.CustomerAdminCity = readString(dis);
					
					this.CustomerAdminCountry = readString(dis);
					
					this.CustomerAdminRegion = readString(dis);
					
					this.CustomerAdminPostalCode = readString(dis);
					
					this.Username = readString(dis);
					
					this.Password = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CompanyName,dos);
					
					// String
				
						writeString(this.EVMCustomerNumber,dos);
					
					// String
				
						writeString(this.CurrencyID,dos);
					
					// Integer
				
						writeInteger(this.Vertical,dos);
					
					// String
				
						writeString(this.CustomerAdminName,dos);
					
					// String
				
						writeString(this.CustomerAdminPhoneNumber,dos);
					
					// String
				
						writeString(this.CustomerAdminEmailAddress,dos);
					
					// String
				
						writeString(this.CustomerAdminAddress1,dos);
					
					// String
				
						writeString(this.CustomerAdminCity,dos);
					
					// String
				
						writeString(this.CustomerAdminCountry,dos);
					
					// String
				
						writeString(this.CustomerAdminRegion,dos);
					
					// String
				
						writeString(this.CustomerAdminPostalCode,dos);
					
					// String
				
						writeString(this.Username,dos);
					
					// String
				
						writeString(this.Password,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CompanyName="+CompanyName);
		sb.append(",EVMCustomerNumber="+EVMCustomerNumber);
		sb.append(",CurrencyID="+CurrencyID);
		sb.append(",Vertical="+String.valueOf(Vertical));
		sb.append(",CustomerAdminName="+CustomerAdminName);
		sb.append(",CustomerAdminPhoneNumber="+CustomerAdminPhoneNumber);
		sb.append(",CustomerAdminEmailAddress="+CustomerAdminEmailAddress);
		sb.append(",CustomerAdminAddress1="+CustomerAdminAddress1);
		sb.append(",CustomerAdminCity="+CustomerAdminCity);
		sb.append(",CustomerAdminCountry="+CustomerAdminCountry);
		sb.append(",CustomerAdminRegion="+CustomerAdminRegion);
		sb.append(",CustomerAdminPostalCode="+CustomerAdminPostalCode);
		sb.append(",Username="+Username);
		sb.append(",Password="+Password);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tFileInputDelimited_2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_7Process(globalMap);
		tDBInput_8Process(globalMap);
		tDBInput_2Process(globalMap);

		row10Struct row10 = new row10Struct();
row10Struct row12 = row10;
AddNewCustomerStruct AddNewCustomer = new AddNewCustomerStruct();
row9Struct row9 = new row9Struct();
row26Struct row26 = new row26Struct();







	
	/**
	 * [tLogRow_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_6", false);
		start_Hash.put("tLogRow_6", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_6";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("row9"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tLogRow_6 = 0;
		

	///////////////////////
	
         class Util_tLogRow_6 {

        String[] des_top = { ".", ".", "-", "+" };

        String[] des_head = { "|=", "=|", "-", "+" };

        String[] des_bottom = { "'", "'", "-", "+" };

        String name="";

        java.util.List<String[]> list = new java.util.ArrayList<String[]>();

        int[] colLengths = new int[44];

        public void addRow(String[] row) {

            for (int i = 0; i < 44; i++) {
                if (row[i]!=null) {
                  colLengths[i] = Math.max(colLengths[i], row[i].length());
                }
            }
            list.add(row);
        }

        public void setTableName(String name) {

            this.name = name;
        }

            public StringBuilder format() {
            
                StringBuilder sb = new StringBuilder();
  
            
                    sb.append(print(des_top));
    
                    int totals = 0;
                    for (int i = 0; i < colLengths.length; i++) {
                        totals = totals + colLengths[i];
                    }
    
                    // name
                    sb.append("|");
                    int k = 0;
                    for (k = 0; k < (totals + 43 - name.length()) / 2; k++) {
                        sb.append(' ');
                    }
                    sb.append(name);
                    for (int i = 0; i < totals + 43 - name.length() - k; i++) {
                        sb.append(' ');
                    }
                    sb.append("|\n");

                    // head and rows
                    sb.append(print(des_head));
                    for (int i = 0; i < list.size(); i++) {
    
                        String[] row = list.get(i);
    
                        java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());
                        
                        StringBuilder sbformat = new StringBuilder();                                             
        			        sbformat.append("|%1$-");
        			        sbformat.append(colLengths[0]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%2$-");
        			        sbformat.append(colLengths[1]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%3$-");
        			        sbformat.append(colLengths[2]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%4$-");
        			        sbformat.append(colLengths[3]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%5$-");
        			        sbformat.append(colLengths[4]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%6$-");
        			        sbformat.append(colLengths[5]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%7$-");
        			        sbformat.append(colLengths[6]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%8$-");
        			        sbformat.append(colLengths[7]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%9$-");
        			        sbformat.append(colLengths[8]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%10$-");
        			        sbformat.append(colLengths[9]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%11$-");
        			        sbformat.append(colLengths[10]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%12$-");
        			        sbformat.append(colLengths[11]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%13$-");
        			        sbformat.append(colLengths[12]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%14$-");
        			        sbformat.append(colLengths[13]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%15$-");
        			        sbformat.append(colLengths[14]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%16$-");
        			        sbformat.append(colLengths[15]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%17$-");
        			        sbformat.append(colLengths[16]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%18$-");
        			        sbformat.append(colLengths[17]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%19$-");
        			        sbformat.append(colLengths[18]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%20$-");
        			        sbformat.append(colLengths[19]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%21$-");
        			        sbformat.append(colLengths[20]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%22$-");
        			        sbformat.append(colLengths[21]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%23$-");
        			        sbformat.append(colLengths[22]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%24$-");
        			        sbformat.append(colLengths[23]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%25$-");
        			        sbformat.append(colLengths[24]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%26$-");
        			        sbformat.append(colLengths[25]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%27$-");
        			        sbformat.append(colLengths[26]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%28$-");
        			        sbformat.append(colLengths[27]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%29$-");
        			        sbformat.append(colLengths[28]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%30$-");
        			        sbformat.append(colLengths[29]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%31$-");
        			        sbformat.append(colLengths[30]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%32$-");
        			        sbformat.append(colLengths[31]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%33$-");
        			        sbformat.append(colLengths[32]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%34$-");
        			        sbformat.append(colLengths[33]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%35$-");
        			        sbformat.append(colLengths[34]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%36$-");
        			        sbformat.append(colLengths[35]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%37$-");
        			        sbformat.append(colLengths[36]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%38$-");
        			        sbformat.append(colLengths[37]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%39$-");
        			        sbformat.append(colLengths[38]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%40$-");
        			        sbformat.append(colLengths[39]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%41$-");
        			        sbformat.append(colLengths[40]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%42$-");
        			        sbformat.append(colLengths[41]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%43$-");
        			        sbformat.append(colLengths[42]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%44$-");
        			        sbformat.append(colLengths[43]);
        			        sbformat.append("s");
        			                      
                        sbformat.append("|\n");                    
       
                        formatter.format(sbformat.toString(), (Object[])row);	
                                
                        sb.append(formatter.toString());
                        if (i == 0)
                            sb.append(print(des_head)); // print the head
                    }
    
                    // end
                    sb.append(print(des_bottom));
                    return sb;
                }
            

            private StringBuilder print(String[] fillChars) {
                StringBuilder sb = new StringBuilder();
                //first column
                sb.append(fillChars[0]);                
                    for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);	                

                    for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[4] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[5] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[6] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[7] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[8] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[9] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[10] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[11] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[12] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[13] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[14] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[15] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[16] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[17] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[18] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[19] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[20] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[21] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[22] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[23] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[24] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[25] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[26] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[27] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[28] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[29] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[30] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[31] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[32] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[33] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[34] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[35] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[36] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[37] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[38] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[39] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[40] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[41] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[42] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                
                    //last column
                    for (int i = 0; i < colLengths[43] - fillChars[1].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }         
                sb.append(fillChars[1]);
                sb.append("\n");               
                return sb;
            }
            
            public boolean isTableEmpty(){
            	if (list.size() > 1)
            		return false;
            	return true;
            }
        }
        Util_tLogRow_6 util_tLogRow_6 = new Util_tLogRow_6();
        util_tLogRow_6.setTableName("tLogRow_6");
        util_tLogRow_6.addRow(new String[]{"ID","WholesalerID","PriCustomerNumber","Description","ExternalCustomerNumber","PrimaryContactName","PrimaryContactPhoneNumber","PrimaryContactEmailAddress","PrimaryContactAddress1","PrimaryContactAddress2","PrimaryContactCity","PrimaryContactCountry","PrimaryContactRegion","PrimaryContactPostalCode","PrimaryContactFaxNumber","BillingContactName","BillingContactPhoneNumber","BillingContactEmailAddress","BillingContactAddress1","BillingContactAddress2","BillingContactCity","BillingContactCountry","BillingContactRegion","BillingContactPostalCode","BillingContactFaxNumber","WebsiteURL","SalesPersonID","VerticalID","CompanyID","CurrencyID","BillingPeriodCutoff","TaxableID","CreditCardNameOnCard","CreditCardNumber","CreditCardExp","CreditCardVerCode","CreditCardTypeName","CreatedDate","LastModified","UniqueCustomerID","Enabled","UserID","WebGroupID","AccountManagerID",});        
 		StringBuilder strBuffer_tLogRow_6 = null;
		int nb_line_tLogRow_6 = 0;
///////////////////////    			



 



/**
 * [tLogRow_6 begin ] stop
 */




	
	/**
	 * [tLogRow_19 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_19", false);
		start_Hash.put("tLogRow_19", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_19";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("row26"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tLogRow_19 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_19 = "|";
		java.io.PrintStream consoleOut_tLogRow_19 = null;	

 		StringBuilder strBuffer_tLogRow_19 = null;
		int nb_line_tLogRow_19 = 0;
///////////////////////    			



 



/**
 * [tLogRow_19 begin ] stop
 */



	
	/**
	 * [tDBOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_2", false);
		start_Hash.put("tDBOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("AddNewCustomer"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tDBOutput_2 = 0;
		



int nb_line_tDBOutput_2 = 0;
int nb_line_update_tDBOutput_2 = 0;
int nb_line_inserted_tDBOutput_2 = 0;
int nb_line_deleted_tDBOutput_2 = 0;
int nb_line_rejected_tDBOutput_2 = 0;

int deletedCount_tDBOutput_2=0;
int updatedCount_tDBOutput_2=0;
int insertedCount_tDBOutput_2=0;
int rejectedCount_tDBOutput_2=0;
String dbschema_tDBOutput_2 = null;
String tableName_tDBOutput_2 = null;
boolean whetherReject_tDBOutput_2 = false;

java.util.Calendar calendar_tDBOutput_2 = java.util.Calendar.getInstance();
long year1_tDBOutput_2 = TalendDate.parseDate("yyyy-MM-dd","0001-01-01").getTime();
long year2_tDBOutput_2 = TalendDate.parseDate("yyyy-MM-dd","1753-01-01").getTime();
long year10000_tDBOutput_2 = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss","9999-12-31 24:00:00").getTime();
long date_tDBOutput_2;

java.util.Calendar calendar_datetimeoffset_tDBOutput_2 = java.util.Calendar.getInstance(java.util.TimeZone.getTimeZone("UTC"));

        int insertKeyCount_tDBOutput_2 = 1;
        if(insertKeyCount_tDBOutput_2 < 1) {
            throw new RuntimeException("For insert if not exist, Schema must have a key");
        }
	
java.sql.Connection conn_tDBOutput_2 = null;
String dbUser_tDBOutput_2 = null;
	dbschema_tDBOutput_2 = (String)globalMap.get("dbschema_tDBConnection_1");
	conn_tDBOutput_2 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	

if(dbschema_tDBOutput_2 == null || dbschema_tDBOutput_2.trim().length() == 0) {
    tableName_tDBOutput_2 = "Customer";
} else {
    tableName_tDBOutput_2 = dbschema_tDBOutput_2 + "].[" + "Customer";
}
	int count_tDBOutput_2=0;

        java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2.prepareStatement("SELECT COUNT(1) FROM [" + tableName_tDBOutput_2 + "] WHERE [ID] = ?");
        resourceMap.put("pstmt_tDBOutput_2", pstmt_tDBOutput_2);
        String insert_tDBOutput_2 = "INSERT INTO [" + tableName_tDBOutput_2 + "] ([ID],[WholesalerID],[PriCustomerNumber],[Description],[ExternalCustomerNumber],[PrimaryContactName],[PrimaryContactPhoneNumber],[PrimaryContactEmailAddress],[PrimaryContactAddress1],[PrimaryContactAddress2],[PrimaryContactCity],[PrimaryContactCountry],[PrimaryContactRegion],[PrimaryContactPostalCode],[PrimaryContactFaxNumber],[BillingContactName],[BillingContactPhoneNumber],[BillingContactEmailAddress],[BillingContactAddress1],[BillingContactAddress2],[BillingContactCity],[BillingContactCountry],[BillingContactRegion],[BillingContactPostalCode],[BillingContactFaxNumber],[WebsiteURL],[SalesPersonID],[VerticalID],[CompanyID],[CurrencyID],[BillingPeriodCutoff],[TaxableID],[CreditCardNameOnCard],[CreditCardNumber],[CreditCardExp],[CreditCardVerCode],[CreditCardTypeName],[CreatedDate],[LastModified],[UniqueCustomerID],[Enabled],[UserID],[WebGroupID],[AccountManagerID]) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
        java.sql.PreparedStatement pstmtInsert_tDBOutput_2 = conn_tDBOutput_2.prepareStatement(insert_tDBOutput_2);
        resourceMap.put("pstmtInsert_tDBOutput_2", pstmtInsert_tDBOutput_2);
 	boolean isShareIdentity_tDBOutput_2 = globalMap.get("shareIdentitySetting_tDBConnection_1") != null && (Boolean)globalMap.get("shareIdentitySetting_tDBConnection_1") == true;
        java.sql.Statement stmt_tDBOutput_2 = conn_tDBOutput_2.createStatement();
	        if ( !isShareIdentity_tDBOutput_2 ) {
	            stmt_tDBOutput_2.execute("SET IDENTITY_INSERT ["+ tableName_tDBOutput_2 +"] ON");
	        }

 



/**
 * [tDBOutput_2 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("row12"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct> tHash_Lookup_row13 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct>) 
					globalMap.get( "tHash_Lookup_row13" ))
					;					
					
	
		tHash_Lookup_row13.initGet();
	

row13Struct row13HashKey = new row13Struct();
row13Struct row13Default = new row13Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row30Struct> tHash_Lookup_row30 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row30Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row30Struct>) 
					globalMap.get( "tHash_Lookup_row30" ))
					;					
					
	

row30Struct row30HashKey = new row30Struct();
row30Struct row30Default = new row30Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row38Struct> tHash_Lookup_row38 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row38Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row38Struct>) 
					globalMap.get( "tHash_Lookup_row38" ))
					;					
					
	

row38Struct row38HashKey = new row38Struct();
row38Struct row38Default = new row38Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
AddNewCustomerStruct AddNewCustomer_tmp = new AddNewCustomerStruct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tLogRow_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_8", false);
		start_Hash.put("tLogRow_8", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_8";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("row10"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tLogRow_8 = 0;
		

	///////////////////////
	
         class Util_tLogRow_8 {

        String[] des_top = { ".", ".", "-", "+" };

        String[] des_head = { "|=", "=|", "-", "+" };

        String[] des_bottom = { "'", "'", "-", "+" };

        String name="";

        java.util.List<String[]> list = new java.util.ArrayList<String[]>();

        int[] colLengths = new int[14];

        public void addRow(String[] row) {

            for (int i = 0; i < 14; i++) {
                if (row[i]!=null) {
                  colLengths[i] = Math.max(colLengths[i], row[i].length());
                }
            }
            list.add(row);
        }

        public void setTableName(String name) {

            this.name = name;
        }

            public StringBuilder format() {
            
                StringBuilder sb = new StringBuilder();
  
            
                    sb.append(print(des_top));
    
                    int totals = 0;
                    for (int i = 0; i < colLengths.length; i++) {
                        totals = totals + colLengths[i];
                    }
    
                    // name
                    sb.append("|");
                    int k = 0;
                    for (k = 0; k < (totals + 13 - name.length()) / 2; k++) {
                        sb.append(' ');
                    }
                    sb.append(name);
                    for (int i = 0; i < totals + 13 - name.length() - k; i++) {
                        sb.append(' ');
                    }
                    sb.append("|\n");

                    // head and rows
                    sb.append(print(des_head));
                    for (int i = 0; i < list.size(); i++) {
    
                        String[] row = list.get(i);
    
                        java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());
                        
                        StringBuilder sbformat = new StringBuilder();                                             
        			        sbformat.append("|%1$-");
        			        sbformat.append(colLengths[0]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%2$-");
        			        sbformat.append(colLengths[1]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%3$-");
        			        sbformat.append(colLengths[2]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%4$-");
        			        sbformat.append(colLengths[3]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%5$-");
        			        sbformat.append(colLengths[4]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%6$-");
        			        sbformat.append(colLengths[5]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%7$-");
        			        sbformat.append(colLengths[6]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%8$-");
        			        sbformat.append(colLengths[7]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%9$-");
        			        sbformat.append(colLengths[8]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%10$-");
        			        sbformat.append(colLengths[9]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%11$-");
        			        sbformat.append(colLengths[10]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%12$-");
        			        sbformat.append(colLengths[11]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%13$-");
        			        sbformat.append(colLengths[12]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%14$-");
        			        sbformat.append(colLengths[13]);
        			        sbformat.append("s");
        			                      
                        sbformat.append("|\n");                    
       
                        formatter.format(sbformat.toString(), (Object[])row);	
                                
                        sb.append(formatter.toString());
                        if (i == 0)
                            sb.append(print(des_head)); // print the head
                    }
    
                    // end
                    sb.append(print(des_bottom));
                    return sb;
                }
            

            private StringBuilder print(String[] fillChars) {
                StringBuilder sb = new StringBuilder();
                //first column
                sb.append(fillChars[0]);                
                    for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);	                

                    for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[4] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[5] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[6] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[7] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[8] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[9] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[10] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[11] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[12] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                
                    //last column
                    for (int i = 0; i < colLengths[13] - fillChars[1].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }         
                sb.append(fillChars[1]);
                sb.append("\n");               
                return sb;
            }
            
            public boolean isTableEmpty(){
            	if (list.size() > 1)
            		return false;
            	return true;
            }
        }
        Util_tLogRow_8 util_tLogRow_8 = new Util_tLogRow_8();
        util_tLogRow_8.setTableName("CustomerAdminListLog");
        util_tLogRow_8.addRow(new String[]{"CompanyName","EVMCustomerNumber","CurrencyID","Vertical","CustomerAdminName","CustomerAdminPhoneNumber","CustomerAdminEmailAddress","CustomerAdminAddress1","CustomerAdminCity","CustomerAdminCountry","CustomerAdminRegion","CustomerAdminPostalCode","Username","Password",});        
 		StringBuilder strBuffer_tLogRow_8 = null;
		int nb_line_tLogRow_8 = 0;
///////////////////////    			



 



/**
 * [tLogRow_8 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_2", false);
		start_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_2";

	
		int tos_count_tFileInputDelimited_2 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_2 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_2 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_2 = null;
				int limit_tFileInputDelimited_2 = -1;
				try{
					
						Object filename_tFileInputDelimited_2 = context.Customer_File;
						if(filename_tFileInputDelimited_2 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_2 = 0, random_value_tFileInputDelimited_2 = -1;
			if(footer_value_tFileInputDelimited_2 >0 || random_value_tFileInputDelimited_2 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_2 = new org.talend.fileprocess.FileInputDelimited(context.Customer_File, "ISO-8859-15",",","\n",true,1,0,
									limit_tFileInputDelimited_2
								,-1, false);
						} catch(java.lang.Exception e) {
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_2!=null && fid_tFileInputDelimited_2.nextRecord()) {
						rowstate_tFileInputDelimited_2.reset();
						
			    						row10 = null;			
												
									boolean whetherReject_tFileInputDelimited_2 = false;
									row10 = new row10Struct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_2 = 0;
				
					String temp = ""; 
				
					columnIndexWithD_tFileInputDelimited_2 = 0;
					
							row10.CompanyName = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 1;
					
							row10.EVMCustomerNumber = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 2;
					
							row10.CurrencyID = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 3;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								row10.Vertical = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"Vertical", "row10", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									row10.Vertical = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 4;
					
							row10.CustomerAdminName = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 5;
					
							row10.CustomerAdminPhoneNumber = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 6;
					
							row10.CustomerAdminEmailAddress = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 7;
					
							row10.CustomerAdminAddress1 = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 8;
					
							row10.CustomerAdminCity = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 9;
					
							row10.CustomerAdminCountry = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 10;
					
							row10.CustomerAdminRegion = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 11;
					
							row10.CustomerAdminPostalCode = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 12;
					
							row10.Username = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 13;
					
							row10.Password = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
				
										
										if(rowstate_tFileInputDelimited_2.getException()!=null) {
											throw rowstate_tFileInputDelimited_2.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
			        					whetherReject_tFileInputDelimited_2 = true;
			        					
			                					System.err.println(e.getMessage());
			                					row10 = null;
			                				
			    					}
								

 



/**
 * [tFileInputDelimited_2 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 


	tos_count_tFileInputDelimited_2++;

/**
 * [tFileInputDelimited_2 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 



/**
 * [tFileInputDelimited_2 process_data_begin ] stop
 */
// Start of branch "row10"
if(row10 != null) { 
			row26 = null;



	
	/**
	 * [tLogRow_8 main ] start
	 */

	

	
	
	currentComponent="tLogRow_8";

	

			//row10
			//row10


			
				
				if(execStat){
					runStat.updateStatOnConnection("row10"+iterateId,1, 1);
				}
				
				
				
			

		
///////////////////////		
						

				
				String[] row_tLogRow_8 = new String[14];
   				
	    		if(row10.CompanyName != null) { //              
                 row_tLogRow_8[0]=    						    
				                String.valueOf(row10.CompanyName)			
					          ;	
							
	    		} //			
    			   				
	    		if(row10.EVMCustomerNumber != null) { //              
                 row_tLogRow_8[1]=    						    
				                String.valueOf(row10.EVMCustomerNumber)			
					          ;	
							
	    		} //			
    			   				
	    		if(row10.CurrencyID != null) { //              
                 row_tLogRow_8[2]=    						    
				                String.valueOf(row10.CurrencyID)			
					          ;	
							
	    		} //			
    			   				
	    		if(row10.Vertical != null) { //              
                 row_tLogRow_8[3]=    						    
				                String.valueOf(row10.Vertical)			
					          ;	
							
	    		} //			
    			   				
	    		if(row10.CustomerAdminName != null) { //              
                 row_tLogRow_8[4]=    						    
				                String.valueOf(row10.CustomerAdminName)			
					          ;	
							
	    		} //			
    			   				
	    		if(row10.CustomerAdminPhoneNumber != null) { //              
                 row_tLogRow_8[5]=    						    
				                String.valueOf(row10.CustomerAdminPhoneNumber)			
					          ;	
							
	    		} //			
    			   				
	    		if(row10.CustomerAdminEmailAddress != null) { //              
                 row_tLogRow_8[6]=    						    
				                String.valueOf(row10.CustomerAdminEmailAddress)			
					          ;	
							
	    		} //			
    			   				
	    		if(row10.CustomerAdminAddress1 != null) { //              
                 row_tLogRow_8[7]=    						    
				                String.valueOf(row10.CustomerAdminAddress1)			
					          ;	
							
	    		} //			
    			   				
	    		if(row10.CustomerAdminCity != null) { //              
                 row_tLogRow_8[8]=    						    
				                String.valueOf(row10.CustomerAdminCity)			
					          ;	
							
	    		} //			
    			   				
	    		if(row10.CustomerAdminCountry != null) { //              
                 row_tLogRow_8[9]=    						    
				                String.valueOf(row10.CustomerAdminCountry)			
					          ;	
							
	    		} //			
    			   				
	    		if(row10.CustomerAdminRegion != null) { //              
                 row_tLogRow_8[10]=    						    
				                String.valueOf(row10.CustomerAdminRegion)			
					          ;	
							
	    		} //			
    			   				
	    		if(row10.CustomerAdminPostalCode != null) { //              
                 row_tLogRow_8[11]=    						    
				                String.valueOf(row10.CustomerAdminPostalCode)			
					          ;	
							
	    		} //			
    			   				
	    		if(row10.Username != null) { //              
                 row_tLogRow_8[12]=    						    
				                String.valueOf(row10.Username)			
					          ;	
							
	    		} //			
    			   				
	    		if(row10.Password != null) { //              
                 row_tLogRow_8[13]=    						    
				                String.valueOf(row10.Password)			
					          ;	
							
	    		} //			
    			 

				util_tLogRow_8.addRow(row_tLogRow_8);	
				nb_line_tLogRow_8++;
//////

//////                    
                    
///////////////////////    			

 
     row12 = row10;


	tos_count_tLogRow_8++;

/**
 * [tLogRow_8 main ] stop
 */
	
	/**
	 * [tLogRow_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_8";

	

 



/**
 * [tLogRow_8 process_data_begin ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

			//row12
			//row12


			
				
				if(execStat){
					runStat.updateStatOnConnection("row12"+iterateId,1, 1);
				}
				
				
				
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row13" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow13 = false;
       		  	    	
       		  	    	
 							row13Struct row13ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								

								
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row13.lookup( row13HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row13.hasNext()) { // G_TM_M_090

  								
		  				
	  								
						
									
	
		  								forceLooprow13 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow13 = true;
			           		  	} // G 21
                    		  	
                    		

							row13Struct row13 = null;
                    		  	 
							

								while ((tHash_Lookup_row13 != null && tHash_Lookup_row13.hasNext()) || forceLooprow13) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row13'
									
                    		  	 
							   
                    		  	 
	       		  	    	row13Struct fromLookup_row13 = null;
							row13 = row13Default;
										 
							
								
								if(!forceLooprow13) { // G 46
								
							
								 
							
								
								fromLookup_row13 = tHash_Lookup_row13.next();

							

							if(fromLookup_row13 != null) {
								row13 = fromLookup_row13;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow13 = false;
									 	
							
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row30" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow30 = false;
       		  	    	
       		  	    	
 							row30Struct row30ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		row30HashKey.Description = row12.CompanyName ;
                        		    		

								
		                        	row30HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row30.lookup( row30HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row30.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_2 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row30 != null && tHash_Lookup_row30.getCount(row30HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row30' and it contains more one result from keys :  row30.Description = '" + row30HashKey.Description + "'");
								} // G 071
							

							row30Struct row30 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row30Struct fromLookup_row30 = null;
							row30 = row30Default;
										 
							
								 
							
							
								if (tHash_Lookup_row30 !=null && tHash_Lookup_row30.hasNext()) { // G 099
								
							
								
								fromLookup_row30 = tHash_Lookup_row30.next();

							
							
								} // G 099
							
							

							if(fromLookup_row30 != null) {
								row30 = fromLookup_row30;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row38" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow38 = false;
       		  	    	
       		  	    	
 							row38Struct row38ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		row38HashKey.email = row12.CustomerAdminEmailAddress ;
                        		    		

								
		                        	row38HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row38.lookup( row38HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row38.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_2 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row38 != null && tHash_Lookup_row38.getCount(row38HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row38' and it contains more one result from keys :  row38.email = '" + row38HashKey.email + "'");
								} // G 071
							

							row38Struct row38 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row38Struct fromLookup_row38 = null;
							row38 = row38Default;
										 
							
								 
							
							
								if (tHash_Lookup_row38 !=null && tHash_Lookup_row38.hasNext()) { // G 099
								
							
								
								fromLookup_row38 = tHash_Lookup_row38.next();

							
							
								} // G 099
							
							

							if(fromLookup_row38 != null) {
								row38 = fromLookup_row38;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

AddNewCustomer = null;

if(!rejectedInnerJoin_tMap_2 ) {

// # Output table : 'AddNewCustomer'
AddNewCustomer_tmp.ID = Numeric.sequence("s4", row13.CustomerID + 1, 1) ;
AddNewCustomer_tmp.WholesalerID = row13.WholesalerID ;
AddNewCustomer_tmp.PriCustomerNumber = Numeric.sequence("s3", Integer.parseInt(row13.PriCustomerNumber) + 1, 1).toString() ;
AddNewCustomer_tmp.Description = null;
AddNewCustomer_tmp.ExternalCustomerNumber = null;
AddNewCustomer_tmp.PrimaryContactName = row12.CustomerAdminName ;
AddNewCustomer_tmp.PrimaryContactPhoneNumber = row12.CustomerAdminPhoneNumber ;
AddNewCustomer_tmp.PrimaryContactEmailAddress = row12.CustomerAdminEmailAddress ;
AddNewCustomer_tmp.PrimaryContactAddress1 = row12.CustomerAdminAddress1 ;
AddNewCustomer_tmp.PrimaryContactAddress2 = null;
AddNewCustomer_tmp.PrimaryContactCity = row12.CustomerAdminCity ;
AddNewCustomer_tmp.PrimaryContactCountry = row12.CustomerAdminCountry ;
AddNewCustomer_tmp.PrimaryContactRegion = row12.CustomerAdminRegion ;
AddNewCustomer_tmp.PrimaryContactPostalCode = row12.CustomerAdminPostalCode ;
AddNewCustomer_tmp.PrimaryContactFaxNumber = null;
AddNewCustomer_tmp.BillingContactName = row12.CustomerAdminName ;
AddNewCustomer_tmp.BillingContactPhoneNumber = row12.CustomerAdminPhoneNumber ;
AddNewCustomer_tmp.BillingContactEmailAddress = row12.CustomerAdminEmailAddress ;
AddNewCustomer_tmp.BillingContactAddress1 = row12.CustomerAdminAddress1 ;
AddNewCustomer_tmp.BillingContactAddress2 = row12.EVMCustomerNumber ;
AddNewCustomer_tmp.BillingContactCity = row12.CustomerAdminCity ;
AddNewCustomer_tmp.BillingContactCountry = row12.CustomerAdminCountry ;
AddNewCustomer_tmp.BillingContactRegion = row12.CustomerAdminRegion ;
AddNewCustomer_tmp.BillingContactPostalCode = row12.CustomerAdminPostalCode ;
AddNewCustomer_tmp.BillingContactFaxNumber = null;
AddNewCustomer_tmp.WebsiteURL = null;
AddNewCustomer_tmp.SalesPersonID = row13.SalesPersonID ;
AddNewCustomer_tmp.VerticalID = row12.Vertical ;
AddNewCustomer_tmp.CompanyID = row30.companyid ;
AddNewCustomer_tmp.CurrencyID = row12.CurrencyID ;
AddNewCustomer_tmp.BillingPeriodCutoff = row13.BillingPeriodCutoff ;
AddNewCustomer_tmp.TaxableID = row13.TaxableID ;
AddNewCustomer_tmp.CreditCardNameOnCard = null;
AddNewCustomer_tmp.CreditCardNumber = null;
AddNewCustomer_tmp.CreditCardExp = null;
AddNewCustomer_tmp.CreditCardVerCode = null;
AddNewCustomer_tmp.CreditCardTypeName = null;
AddNewCustomer_tmp.CreatedDate = row13.CreatedDate ;
AddNewCustomer_tmp.LastModified = row13.LastModified ;
AddNewCustomer_tmp.UniqueCustomerID = row13.UniqueCustomerID ;
AddNewCustomer_tmp.Enabled = row13.Enabled ;
AddNewCustomer_tmp.UserID = row38.userid ;
AddNewCustomer_tmp.WebGroupID = null;
AddNewCustomer_tmp.AccountManagerID = row13.AccountManagerID ;
AddNewCustomer = AddNewCustomer_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "AddNewCustomer"
if(AddNewCustomer != null) { 
			row26 = null;



	
	/**
	 * [tDBOutput_2 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

			//AddNewCustomer
			//AddNewCustomer


			
				
				if(execStat){
					runStat.updateStatOnConnection("AddNewCustomer"+iterateId,1, 1);
				}
				
				
				
			

		



            row9 = null;
            row26 = null;
	        if(isShareIdentity_tDBOutput_2) {
	            stmt_tDBOutput_2.execute("SET IDENTITY_INSERT ["+ tableName_tDBOutput_2 +"] ON");
	        }
        whetherReject_tDBOutput_2 = false;

                pstmt_tDBOutput_2.setInt(1, AddNewCustomer.ID);


        java.sql.ResultSet rs_tDBOutput_2 = pstmt_tDBOutput_2.executeQuery();
        int checkCount_tDBOutput_2 = -1;
        while(rs_tDBOutput_2.next()) {
            checkCount_tDBOutput_2 = rs_tDBOutput_2.getInt(1);
        }

        if (checkCount_tDBOutput_2 < 1) {
            try {
                    pstmtInsert_tDBOutput_2.setInt(1, AddNewCustomer.ID);

                    if(AddNewCustomer.WholesalerID == null) {
pstmtInsert_tDBOutput_2.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(2, AddNewCustomer.WholesalerID);
}

                    if(AddNewCustomer.PriCustomerNumber == null) {
pstmtInsert_tDBOutput_2.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(3, AddNewCustomer.PriCustomerNumber);
}

                    if(AddNewCustomer.Description == null) {
pstmtInsert_tDBOutput_2.setNull(4, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(4, AddNewCustomer.Description);
}

                    if(AddNewCustomer.ExternalCustomerNumber == null) {
pstmtInsert_tDBOutput_2.setNull(5, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(5, AddNewCustomer.ExternalCustomerNumber);
}

                    if(AddNewCustomer.PrimaryContactName == null) {
pstmtInsert_tDBOutput_2.setNull(6, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(6, AddNewCustomer.PrimaryContactName);
}

                    if(AddNewCustomer.PrimaryContactPhoneNumber == null) {
pstmtInsert_tDBOutput_2.setNull(7, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(7, AddNewCustomer.PrimaryContactPhoneNumber);
}

                    if(AddNewCustomer.PrimaryContactEmailAddress == null) {
pstmtInsert_tDBOutput_2.setNull(8, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(8, AddNewCustomer.PrimaryContactEmailAddress);
}

                    if(AddNewCustomer.PrimaryContactAddress1 == null) {
pstmtInsert_tDBOutput_2.setNull(9, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(9, AddNewCustomer.PrimaryContactAddress1);
}

                    if(AddNewCustomer.PrimaryContactAddress2 == null) {
pstmtInsert_tDBOutput_2.setNull(10, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(10, AddNewCustomer.PrimaryContactAddress2);
}

                    if(AddNewCustomer.PrimaryContactCity == null) {
pstmtInsert_tDBOutput_2.setNull(11, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(11, AddNewCustomer.PrimaryContactCity);
}

                    if(AddNewCustomer.PrimaryContactCountry == null) {
pstmtInsert_tDBOutput_2.setNull(12, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(12, AddNewCustomer.PrimaryContactCountry);
}

                    if(AddNewCustomer.PrimaryContactRegion == null) {
pstmtInsert_tDBOutput_2.setNull(13, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(13, AddNewCustomer.PrimaryContactRegion);
}

                    if(AddNewCustomer.PrimaryContactPostalCode == null) {
pstmtInsert_tDBOutput_2.setNull(14, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(14, AddNewCustomer.PrimaryContactPostalCode);
}

                    if(AddNewCustomer.PrimaryContactFaxNumber == null) {
pstmtInsert_tDBOutput_2.setNull(15, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(15, AddNewCustomer.PrimaryContactFaxNumber);
}

                    if(AddNewCustomer.BillingContactName == null) {
pstmtInsert_tDBOutput_2.setNull(16, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(16, AddNewCustomer.BillingContactName);
}

                    if(AddNewCustomer.BillingContactPhoneNumber == null) {
pstmtInsert_tDBOutput_2.setNull(17, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(17, AddNewCustomer.BillingContactPhoneNumber);
}

                    if(AddNewCustomer.BillingContactEmailAddress == null) {
pstmtInsert_tDBOutput_2.setNull(18, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(18, AddNewCustomer.BillingContactEmailAddress);
}

                    if(AddNewCustomer.BillingContactAddress1 == null) {
pstmtInsert_tDBOutput_2.setNull(19, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(19, AddNewCustomer.BillingContactAddress1);
}

                    if(AddNewCustomer.BillingContactAddress2 == null) {
pstmtInsert_tDBOutput_2.setNull(20, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(20, AddNewCustomer.BillingContactAddress2);
}

                    if(AddNewCustomer.BillingContactCity == null) {
pstmtInsert_tDBOutput_2.setNull(21, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(21, AddNewCustomer.BillingContactCity);
}

                    if(AddNewCustomer.BillingContactCountry == null) {
pstmtInsert_tDBOutput_2.setNull(22, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(22, AddNewCustomer.BillingContactCountry);
}

                    if(AddNewCustomer.BillingContactRegion == null) {
pstmtInsert_tDBOutput_2.setNull(23, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(23, AddNewCustomer.BillingContactRegion);
}

                    if(AddNewCustomer.BillingContactPostalCode == null) {
pstmtInsert_tDBOutput_2.setNull(24, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(24, AddNewCustomer.BillingContactPostalCode);
}

                    if(AddNewCustomer.BillingContactFaxNumber == null) {
pstmtInsert_tDBOutput_2.setNull(25, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(25, AddNewCustomer.BillingContactFaxNumber);
}

                    if(AddNewCustomer.WebsiteURL == null) {
pstmtInsert_tDBOutput_2.setNull(26, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(26, AddNewCustomer.WebsiteURL);
}

                    pstmtInsert_tDBOutput_2.setInt(27, AddNewCustomer.SalesPersonID);

                    pstmtInsert_tDBOutput_2.setInt(28, AddNewCustomer.VerticalID);

                    pstmtInsert_tDBOutput_2.setInt(29, AddNewCustomer.CompanyID);

                    if(AddNewCustomer.CurrencyID == null) {
pstmtInsert_tDBOutput_2.setNull(30, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(30, AddNewCustomer.CurrencyID);
}

                    pstmtInsert_tDBOutput_2.setInt(31, AddNewCustomer.BillingPeriodCutoff);

                    pstmtInsert_tDBOutput_2.setInt(32, AddNewCustomer.TaxableID);

                    if(AddNewCustomer.CreditCardNameOnCard == null) {
pstmtInsert_tDBOutput_2.setNull(33, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(33, AddNewCustomer.CreditCardNameOnCard);
}

                    if(AddNewCustomer.CreditCardNumber == null) {
pstmtInsert_tDBOutput_2.setNull(34, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(34, AddNewCustomer.CreditCardNumber);
}

                    if(AddNewCustomer.CreditCardExp == null) {
pstmtInsert_tDBOutput_2.setNull(35, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(35, AddNewCustomer.CreditCardExp);
}

                    if(AddNewCustomer.CreditCardVerCode == null) {
pstmtInsert_tDBOutput_2.setNull(36, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(36, AddNewCustomer.CreditCardVerCode);
}

                    if(AddNewCustomer.CreditCardTypeName == null) {
pstmtInsert_tDBOutput_2.setNull(37, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(37, AddNewCustomer.CreditCardTypeName);
}

                    if(AddNewCustomer.CreatedDate != null) {
pstmtInsert_tDBOutput_2.setTimestamp(38, new java.sql.Timestamp(AddNewCustomer.CreatedDate.getTime()));
} else {
pstmtInsert_tDBOutput_2.setNull(38, java.sql.Types.DATE);
}

                    if(AddNewCustomer.LastModified != null) {
pstmtInsert_tDBOutput_2.setTimestamp(39, new java.sql.Timestamp(AddNewCustomer.LastModified.getTime()));
} else {
pstmtInsert_tDBOutput_2.setNull(39, java.sql.Types.DATE);
}

                    if(AddNewCustomer.UniqueCustomerID == null) {
pstmtInsert_tDBOutput_2.setNull(40, java.sql.Types.OTHER);
} else {pstmtInsert_tDBOutput_2.setObject(40, AddNewCustomer.UniqueCustomerID);
}

                    if(AddNewCustomer.Enabled == null) {
pstmtInsert_tDBOutput_2.setNull(41, java.sql.Types.BOOLEAN);
} else {pstmtInsert_tDBOutput_2.setBoolean(41, AddNewCustomer.Enabled);
}

                    if(AddNewCustomer.UserID == null) {
pstmtInsert_tDBOutput_2.setNull(42, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_2.setInt(42, AddNewCustomer.UserID);
}

                    if(AddNewCustomer.WebGroupID == null) {
pstmtInsert_tDBOutput_2.setNull(43, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_2.setString(43, AddNewCustomer.WebGroupID);
}

                    pstmtInsert_tDBOutput_2.setInt(44, AddNewCustomer.AccountManagerID);

                insertedCount_tDBOutput_2 = insertedCount_tDBOutput_2 + pstmtInsert_tDBOutput_2.executeUpdate();
                nb_line_tDBOutput_2++;
            } catch(java.lang.Exception e) {
				whetherReject_tDBOutput_2 = true;
            	nb_line_tDBOutput_2++;
            	
	            row26 = new row26Struct();
                    row26.ID = AddNewCustomer.ID;
                    row26.WholesalerID = AddNewCustomer.WholesalerID;
                    row26.PriCustomerNumber = AddNewCustomer.PriCustomerNumber;
                    row26.Description = AddNewCustomer.Description;
                    row26.ExternalCustomerNumber = AddNewCustomer.ExternalCustomerNumber;
                    row26.PrimaryContactName = AddNewCustomer.PrimaryContactName;
                    row26.PrimaryContactPhoneNumber = AddNewCustomer.PrimaryContactPhoneNumber;
                    row26.PrimaryContactEmailAddress = AddNewCustomer.PrimaryContactEmailAddress;
                    row26.PrimaryContactAddress1 = AddNewCustomer.PrimaryContactAddress1;
                    row26.PrimaryContactAddress2 = AddNewCustomer.PrimaryContactAddress2;
                    row26.PrimaryContactCity = AddNewCustomer.PrimaryContactCity;
                    row26.PrimaryContactCountry = AddNewCustomer.PrimaryContactCountry;
                    row26.PrimaryContactRegion = AddNewCustomer.PrimaryContactRegion;
                    row26.PrimaryContactPostalCode = AddNewCustomer.PrimaryContactPostalCode;
                    row26.PrimaryContactFaxNumber = AddNewCustomer.PrimaryContactFaxNumber;
                    row26.BillingContactName = AddNewCustomer.BillingContactName;
                    row26.BillingContactPhoneNumber = AddNewCustomer.BillingContactPhoneNumber;
                    row26.BillingContactEmailAddress = AddNewCustomer.BillingContactEmailAddress;
                    row26.BillingContactAddress1 = AddNewCustomer.BillingContactAddress1;
                    row26.BillingContactAddress2 = AddNewCustomer.BillingContactAddress2;
                    row26.BillingContactCity = AddNewCustomer.BillingContactCity;
                    row26.BillingContactCountry = AddNewCustomer.BillingContactCountry;
                    row26.BillingContactRegion = AddNewCustomer.BillingContactRegion;
                    row26.BillingContactPostalCode = AddNewCustomer.BillingContactPostalCode;
                    row26.BillingContactFaxNumber = AddNewCustomer.BillingContactFaxNumber;
                    row26.WebsiteURL = AddNewCustomer.WebsiteURL;
                    row26.SalesPersonID = AddNewCustomer.SalesPersonID;
                    row26.VerticalID = AddNewCustomer.VerticalID;
                    row26.CompanyID = AddNewCustomer.CompanyID;
                    row26.CurrencyID = AddNewCustomer.CurrencyID;
                    row26.BillingPeriodCutoff = AddNewCustomer.BillingPeriodCutoff;
                    row26.TaxableID = AddNewCustomer.TaxableID;
                    row26.CreditCardNameOnCard = AddNewCustomer.CreditCardNameOnCard;
                    row26.CreditCardNumber = AddNewCustomer.CreditCardNumber;
                    row26.CreditCardExp = AddNewCustomer.CreditCardExp;
                    row26.CreditCardVerCode = AddNewCustomer.CreditCardVerCode;
                    row26.CreditCardTypeName = AddNewCustomer.CreditCardTypeName;
                    row26.CreatedDate = AddNewCustomer.CreatedDate;
                    row26.LastModified = AddNewCustomer.LastModified;
                    row26.UniqueCustomerID = AddNewCustomer.UniqueCustomerID;
                    row26.Enabled = AddNewCustomer.Enabled;
                    row26.UserID = AddNewCustomer.UserID;
                    row26.WebGroupID = AddNewCustomer.WebGroupID;
                    row26.AccountManagerID = AddNewCustomer.AccountManagerID;
                	rejectedCount_tDBOutput_2 = rejectedCount_tDBOutput_2 + 1;
                	row26.errorCode = ((java.sql.SQLException)e).getSQLState();
                    row26.errorMessage = e.getMessage() + " - Line: " + tos_count_tDBOutput_2;
                }
            }
            if(!whetherReject_tDBOutput_2) {
                            row9 = new row9Struct();
                                row9.ID = AddNewCustomer.ID;
                                row9.WholesalerID = AddNewCustomer.WholesalerID;
                                row9.PriCustomerNumber = AddNewCustomer.PriCustomerNumber;
                                row9.Description = AddNewCustomer.Description;
                                row9.ExternalCustomerNumber = AddNewCustomer.ExternalCustomerNumber;
                                row9.PrimaryContactName = AddNewCustomer.PrimaryContactName;
                                row9.PrimaryContactPhoneNumber = AddNewCustomer.PrimaryContactPhoneNumber;
                                row9.PrimaryContactEmailAddress = AddNewCustomer.PrimaryContactEmailAddress;
                                row9.PrimaryContactAddress1 = AddNewCustomer.PrimaryContactAddress1;
                                row9.PrimaryContactAddress2 = AddNewCustomer.PrimaryContactAddress2;
                                row9.PrimaryContactCity = AddNewCustomer.PrimaryContactCity;
                                row9.PrimaryContactCountry = AddNewCustomer.PrimaryContactCountry;
                                row9.PrimaryContactRegion = AddNewCustomer.PrimaryContactRegion;
                                row9.PrimaryContactPostalCode = AddNewCustomer.PrimaryContactPostalCode;
                                row9.PrimaryContactFaxNumber = AddNewCustomer.PrimaryContactFaxNumber;
                                row9.BillingContactName = AddNewCustomer.BillingContactName;
                                row9.BillingContactPhoneNumber = AddNewCustomer.BillingContactPhoneNumber;
                                row9.BillingContactEmailAddress = AddNewCustomer.BillingContactEmailAddress;
                                row9.BillingContactAddress1 = AddNewCustomer.BillingContactAddress1;
                                row9.BillingContactAddress2 = AddNewCustomer.BillingContactAddress2;
                                row9.BillingContactCity = AddNewCustomer.BillingContactCity;
                                row9.BillingContactCountry = AddNewCustomer.BillingContactCountry;
                                row9.BillingContactRegion = AddNewCustomer.BillingContactRegion;
                                row9.BillingContactPostalCode = AddNewCustomer.BillingContactPostalCode;
                                row9.BillingContactFaxNumber = AddNewCustomer.BillingContactFaxNumber;
                                row9.WebsiteURL = AddNewCustomer.WebsiteURL;
                                row9.SalesPersonID = AddNewCustomer.SalesPersonID;
                                row9.VerticalID = AddNewCustomer.VerticalID;
                                row9.CompanyID = AddNewCustomer.CompanyID;
                                row9.CurrencyID = AddNewCustomer.CurrencyID;
                                row9.BillingPeriodCutoff = AddNewCustomer.BillingPeriodCutoff;
                                row9.TaxableID = AddNewCustomer.TaxableID;
                                row9.CreditCardNameOnCard = AddNewCustomer.CreditCardNameOnCard;
                                row9.CreditCardNumber = AddNewCustomer.CreditCardNumber;
                                row9.CreditCardExp = AddNewCustomer.CreditCardExp;
                                row9.CreditCardVerCode = AddNewCustomer.CreditCardVerCode;
                                row9.CreditCardTypeName = AddNewCustomer.CreditCardTypeName;
                                row9.CreatedDate = AddNewCustomer.CreatedDate;
                                row9.LastModified = AddNewCustomer.LastModified;
                                row9.UniqueCustomerID = AddNewCustomer.UniqueCustomerID;
                                row9.Enabled = AddNewCustomer.Enabled;
                                row9.UserID = AddNewCustomer.UserID;
                                row9.WebGroupID = AddNewCustomer.WebGroupID;
                                row9.AccountManagerID = AddNewCustomer.AccountManagerID;
            }
            	//////////batch execute by batch size///////
            	class LimitBytesHelper_tDBOutput_2{
            		public int limitBytePart1(int counter,java.sql.PreparedStatement pstmt_tDBOutput_2) throws Exception {
                try {
						
						for(int countEach_tDBOutput_2: pstmt_tDBOutput_2.executeBatch()) {
							if(countEach_tDBOutput_2 == -2 || countEach_tDBOutput_2 == -3) {
								break;
							}
							counter += countEach_tDBOutput_2;
						}
						
                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_tDBOutput_2 = 0;
					for(int countEach_tDBOutput_2: e.getUpdateCounts()) {
						counter += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
					}
				
            	    	
                		System.err.println(e.getMessage());
                	
               			 }
    				return counter;
            	}
            	
            	public int limitBytePart2(int counter,java.sql.PreparedStatement pstmt_tDBOutput_2) throws Exception {
                try {
                		
						for(int countEach_tDBOutput_2: pstmt_tDBOutput_2.executeBatch()) {
							if(countEach_tDBOutput_2 == -2 || countEach_tDBOutput_2 == -3) {
								break;
							}
							counter += countEach_tDBOutput_2;
						}
						
                }catch (java.sql.BatchUpdateException e){
                	
                	
					for(int countEach_tDBOutput_2: e.getUpdateCounts()) {
						counter += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
					}
					
            	    	
                        System.err.println(e.getMessage());
                	
                		}	
                	return counter;	
            	}
            }

    	////////////commit every////////////
    			
		if (isShareIdentity_tDBOutput_2 ) {
        	 stmt_tDBOutput_2.execute("SET IDENTITY_INSERT ["+ tableName_tDBOutput_2 +"] OFF");
        }

 


	tos_count_tDBOutput_2++;

/**
 * [tDBOutput_2 main ] stop
 */
	
	/**
	 * [tDBOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

 



/**
 * [tDBOutput_2 process_data_begin ] stop
 */
// Start of branch "row9"
if(row9 != null) { 



	
	/**
	 * [tLogRow_6 main ] start
	 */

	

	
	
	currentComponent="tLogRow_6";

	

			//row9
			//row9


			
				
				if(execStat){
					runStat.updateStatOnConnection("row9"+iterateId,1, 1);
				}
				
				
				
			

		
///////////////////////		
						

				
				String[] row_tLogRow_6 = new String[44];
              
                 row_tLogRow_6[0]=    						    
				                String.valueOf(row9.ID)			
					          ;	
										
    			   				
	    		if(row9.WholesalerID != null) { //              
                 row_tLogRow_6[1]=    						    
				                String.valueOf(row9.WholesalerID)			
					          ;	
							
	    		} //			
    			   				
	    		if(row9.PriCustomerNumber != null) { //              
                 row_tLogRow_6[2]=    						    
				                String.valueOf(row9.PriCustomerNumber)			
					          ;	
							
	    		} //			
    			   				
	    		if(row9.Description != null) { //              
                 row_tLogRow_6[3]=    						    
				                String.valueOf(row9.Description)			
					          ;	
							
	    		} //			
    			   				
	    		if(row9.ExternalCustomerNumber != null) { //              
                 row_tLogRow_6[4]=    						    
				                String.valueOf(row9.ExternalCustomerNumber)			
					          ;	
							
	    		} //			
    			   				
	    		if(row9.PrimaryContactName != null) { //              
                 row_tLogRow_6[5]=    						    
				                String.valueOf(row9.PrimaryContactName)			
					          ;	
							
	    		} //			
    			   				
	    		if(row9.PrimaryContactPhoneNumber != null) { //              
                 row_tLogRow_6[6]=    						    
				                String.valueOf(row9.PrimaryContactPhoneNumber)			
					          ;	
							
	    		} //			
    			   				
	    		if(row9.PrimaryContactEmailAddress != null) { //              
                 row_tLogRow_6[7]=    						    
				                String.valueOf(row9.PrimaryContactEmailAddress)			
					          ;	
							
	    		} //			
    			   				
	    		if(row9.PrimaryContactAddress1 != null) { //              
                 row_tLogRow_6[8]=    						    
				                String.valueOf(row9.PrimaryContactAddress1)			
					          ;	
							
	    		} //			
    			   				
	    		if(row9.PrimaryContactAddress2 != null) { //              
                 row_tLogRow_6[9]=    						    
				                String.valueOf(row9.PrimaryContactAddress2)			
					          ;	
							
	    		} //			
    			   				
	    		if(row9.PrimaryContactCity != null) { //              
                 row_tLogRow_6[10]=    						    
				                String.valueOf(row9.PrimaryContactCity)			
					          ;	
							
	    		} //			
    			   				
	    		if(row9.PrimaryContactCountry != null) { //              
                 row_tLogRow_6[11]=    						    
				                String.valueOf(row9.PrimaryContactCountry)			
					          ;	
							
	    		} //			
    			   				
	    		if(row9.PrimaryContactRegion != null) { //              
                 row_tLogRow_6[12]=    						    
				                String.valueOf(row9.PrimaryContactRegion)			
					          ;	
							
	    		} //			
    			   				
	    		if(row9.PrimaryContactPostalCode != null) { //              
                 row_tLogRow_6[13]=    						    
				                String.valueOf(row9.PrimaryContactPostalCode)			
					          ;	
							
	    		} //			
    			   				
	    		if(row9.PrimaryContactFaxNumber != null) { //              
                 row_tLogRow_6[14]=    						    
				                String.valueOf(row9.PrimaryContactFaxNumber)			
					          ;	
							
	    		} //			
    			   				
	    		if(row9.BillingContactName != null) { //              
                 row_tLogRow_6[15]=    						    
				                String.valueOf(row9.BillingContactName)			
					          ;	
							
	    		} //			
    			   				
	    		if(row9.BillingContactPhoneNumber != null) { //              
                 row_tLogRow_6[16]=    						    
				                String.valueOf(row9.BillingContactPhoneNumber)			
					          ;	
							
	    		} //			
    			   				
	    		if(row9.BillingContactEmailAddress != null) { //              
                 row_tLogRow_6[17]=    						    
				                String.valueOf(row9.BillingContactEmailAddress)			
					          ;	
							
	    		} //			
    			   				
	    		if(row9.BillingContactAddress1 != null) { //              
                 row_tLogRow_6[18]=    						    
				                String.valueOf(row9.BillingContactAddress1)			
					          ;	
							
	    		} //			
    			   				
	    		if(row9.BillingContactAddress2 != null) { //              
                 row_tLogRow_6[19]=    						    
				                String.valueOf(row9.BillingContactAddress2)			
					          ;	
							
	    		} //			
    			   				
	    		if(row9.BillingContactCity != null) { //              
                 row_tLogRow_6[20]=    						    
				                String.valueOf(row9.BillingContactCity)			
					          ;	
							
	    		} //			
    			   				
	    		if(row9.BillingContactCountry != null) { //              
                 row_tLogRow_6[21]=    						    
				                String.valueOf(row9.BillingContactCountry)			
					          ;	
							
	    		} //			
    			   				
	    		if(row9.BillingContactRegion != null) { //              
                 row_tLogRow_6[22]=    						    
				                String.valueOf(row9.BillingContactRegion)			
					          ;	
							
	    		} //			
    			   				
	    		if(row9.BillingContactPostalCode != null) { //              
                 row_tLogRow_6[23]=    						    
				                String.valueOf(row9.BillingContactPostalCode)			
					          ;	
							
	    		} //			
    			   				
	    		if(row9.BillingContactFaxNumber != null) { //              
                 row_tLogRow_6[24]=    						    
				                String.valueOf(row9.BillingContactFaxNumber)			
					          ;	
							
	    		} //			
    			   				
	    		if(row9.WebsiteURL != null) { //              
                 row_tLogRow_6[25]=    						    
				                String.valueOf(row9.WebsiteURL)			
					          ;	
							
	    		} //			
    			              
                 row_tLogRow_6[26]=    						    
				                String.valueOf(row9.SalesPersonID)			
					          ;	
										
    			              
                 row_tLogRow_6[27]=    						    
				                String.valueOf(row9.VerticalID)			
					          ;	
										
    			              
                 row_tLogRow_6[28]=    						    
				                String.valueOf(row9.CompanyID)			
					          ;	
										
    			   				
	    		if(row9.CurrencyID != null) { //              
                 row_tLogRow_6[29]=    						    
				                String.valueOf(row9.CurrencyID)			
					          ;	
							
	    		} //			
    			              
                 row_tLogRow_6[30]=    						    
				                String.valueOf(row9.BillingPeriodCutoff)			
					          ;	
										
    			              
                 row_tLogRow_6[31]=    						    
				                String.valueOf(row9.TaxableID)			
					          ;	
										
    			   				
	    		if(row9.CreditCardNameOnCard != null) { //              
                 row_tLogRow_6[32]=    						    
				                String.valueOf(row9.CreditCardNameOnCard)			
					          ;	
							
	    		} //			
    			   				
	    		if(row9.CreditCardNumber != null) { //              
                 row_tLogRow_6[33]=    						    
				                String.valueOf(row9.CreditCardNumber)			
					          ;	
							
	    		} //			
    			   				
	    		if(row9.CreditCardExp != null) { //              
                 row_tLogRow_6[34]=    						    
				                String.valueOf(row9.CreditCardExp)			
					          ;	
							
	    		} //			
    			   				
	    		if(row9.CreditCardVerCode != null) { //              
                 row_tLogRow_6[35]=    						    
				                String.valueOf(row9.CreditCardVerCode)			
					          ;	
							
	    		} //			
    			   				
	    		if(row9.CreditCardTypeName != null) { //              
                 row_tLogRow_6[36]=    						    
				                String.valueOf(row9.CreditCardTypeName)			
					          ;	
							
	    		} //			
    			   				
	    		if(row9.CreatedDate != null) { //              
                 row_tLogRow_6[37]=    						
								FormatterUtils.format_Date(row9.CreatedDate, "dd-MM-yyyy")
					          ;	
							
	    		} //			
    			   				
	    		if(row9.LastModified != null) { //              
                 row_tLogRow_6[38]=    						
								FormatterUtils.format_Date(row9.LastModified, "dd-MM-yyyy")
					          ;	
							
	    		} //			
    			   				
	    		if(row9.UniqueCustomerID != null) { //              
                 row_tLogRow_6[39]=    						    
				                String.valueOf(row9.UniqueCustomerID)			
					          ;	
							
	    		} //			
    			   				
	    		if(row9.Enabled != null) { //              
                 row_tLogRow_6[40]=    						    
				                String.valueOf(row9.Enabled)			
					          ;	
							
	    		} //			
    			   				
	    		if(row9.UserID != null) { //              
                 row_tLogRow_6[41]=    						    
				                String.valueOf(row9.UserID)			
					          ;	
							
	    		} //			
    			   				
	    		if(row9.WebGroupID != null) { //              
                 row_tLogRow_6[42]=    						    
				                String.valueOf(row9.WebGroupID)			
					          ;	
							
	    		} //			
    			              
                 row_tLogRow_6[43]=    						    
				                String.valueOf(row9.AccountManagerID)			
					          ;	
										
    			 

				util_tLogRow_6.addRow(row_tLogRow_6);	
				nb_line_tLogRow_6++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_6++;

/**
 * [tLogRow_6 main ] stop
 */
	
	/**
	 * [tLogRow_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_6";

	

 



/**
 * [tLogRow_6 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_6";

	

 



/**
 * [tLogRow_6 process_data_end ] stop
 */

} // End of branch "row9"




// Start of branch "row26"
if(row26 != null) { 



	
	/**
	 * [tLogRow_19 main ] start
	 */

	

	
	
	currentComponent="tLogRow_19";

	

			//row26
			//row26


			
				
				if(execStat){
					runStat.updateStatOnConnection("row26"+iterateId,1, 1);
				}
				
				
				
			

		
///////////////////////		
						



				strBuffer_tLogRow_19 = new StringBuilder();




              
                    							
       
				strBuffer_tLogRow_19.append(
				                String.valueOf(row26.ID)							
				);


							  			

    			strBuffer_tLogRow_19.append("|");
    			


   				
	    		if(row26.WholesalerID != null) { //              
                    							
       
				strBuffer_tLogRow_19.append(
				                String.valueOf(row26.WholesalerID)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_19.append("|");
    			


   				
	    		if(row26.PriCustomerNumber != null) { //              
                    							
       
				strBuffer_tLogRow_19.append(
				                String.valueOf(row26.PriCustomerNumber)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_19.append("|");
    			


   				
	    		if(row26.Description != null) { //              
                    							
       
				strBuffer_tLogRow_19.append(
				                String.valueOf(row26.Description)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_19.append("|");
    			


   				
	    		if(row26.ExternalCustomerNumber != null) { //              
                    							
       
				strBuffer_tLogRow_19.append(
				                String.valueOf(row26.ExternalCustomerNumber)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_19.append("|");
    			


   				
	    		if(row26.PrimaryContactName != null) { //              
                    							
       
				strBuffer_tLogRow_19.append(
				                String.valueOf(row26.PrimaryContactName)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_19.append("|");
    			


   				
	    		if(row26.PrimaryContactPhoneNumber != null) { //              
                    							
       
				strBuffer_tLogRow_19.append(
				                String.valueOf(row26.PrimaryContactPhoneNumber)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_19.append("|");
    			


   				
	    		if(row26.PrimaryContactEmailAddress != null) { //              
                    							
       
				strBuffer_tLogRow_19.append(
				                String.valueOf(row26.PrimaryContactEmailAddress)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_19.append("|");
    			


   				
	    		if(row26.PrimaryContactAddress1 != null) { //              
                    							
       
				strBuffer_tLogRow_19.append(
				                String.valueOf(row26.PrimaryContactAddress1)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_19.append("|");
    			


   				
	    		if(row26.PrimaryContactAddress2 != null) { //              
                    							
       
				strBuffer_tLogRow_19.append(
				                String.valueOf(row26.PrimaryContactAddress2)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_19.append("|");
    			


   				
	    		if(row26.PrimaryContactCity != null) { //              
                    							
       
				strBuffer_tLogRow_19.append(
				                String.valueOf(row26.PrimaryContactCity)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_19.append("|");
    			


   				
	    		if(row26.PrimaryContactCountry != null) { //              
                    							
       
				strBuffer_tLogRow_19.append(
				                String.valueOf(row26.PrimaryContactCountry)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_19.append("|");
    			


   				
	    		if(row26.PrimaryContactRegion != null) { //              
                    							
       
				strBuffer_tLogRow_19.append(
				                String.valueOf(row26.PrimaryContactRegion)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_19.append("|");
    			


   				
	    		if(row26.PrimaryContactPostalCode != null) { //              
                    							
       
				strBuffer_tLogRow_19.append(
				                String.valueOf(row26.PrimaryContactPostalCode)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_19.append("|");
    			


   				
	    		if(row26.PrimaryContactFaxNumber != null) { //              
                    							
       
				strBuffer_tLogRow_19.append(
				                String.valueOf(row26.PrimaryContactFaxNumber)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_19.append("|");
    			


   				
	    		if(row26.BillingContactName != null) { //              
                    							
       
				strBuffer_tLogRow_19.append(
				                String.valueOf(row26.BillingContactName)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_19.append("|");
    			


   				
	    		if(row26.BillingContactPhoneNumber != null) { //              
                    							
       
				strBuffer_tLogRow_19.append(
				                String.valueOf(row26.BillingContactPhoneNumber)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_19.append("|");
    			


   				
	    		if(row26.BillingContactEmailAddress != null) { //              
                    							
       
				strBuffer_tLogRow_19.append(
				                String.valueOf(row26.BillingContactEmailAddress)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_19.append("|");
    			


   				
	    		if(row26.BillingContactAddress1 != null) { //              
                    							
       
				strBuffer_tLogRow_19.append(
				                String.valueOf(row26.BillingContactAddress1)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_19.append("|");
    			


   				
	    		if(row26.BillingContactAddress2 != null) { //              
                    							
       
				strBuffer_tLogRow_19.append(
				                String.valueOf(row26.BillingContactAddress2)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_19.append("|");
    			


   				
	    		if(row26.BillingContactCity != null) { //              
                    							
       
				strBuffer_tLogRow_19.append(
				                String.valueOf(row26.BillingContactCity)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_19.append("|");
    			


   				
	    		if(row26.BillingContactCountry != null) { //              
                    							
       
				strBuffer_tLogRow_19.append(
				                String.valueOf(row26.BillingContactCountry)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_19.append("|");
    			


   				
	    		if(row26.BillingContactRegion != null) { //              
                    							
       
				strBuffer_tLogRow_19.append(
				                String.valueOf(row26.BillingContactRegion)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_19.append("|");
    			


   				
	    		if(row26.BillingContactPostalCode != null) { //              
                    							
       
				strBuffer_tLogRow_19.append(
				                String.valueOf(row26.BillingContactPostalCode)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_19.append("|");
    			


   				
	    		if(row26.BillingContactFaxNumber != null) { //              
                    							
       
				strBuffer_tLogRow_19.append(
				                String.valueOf(row26.BillingContactFaxNumber)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_19.append("|");
    			


   				
	    		if(row26.WebsiteURL != null) { //              
                    							
       
				strBuffer_tLogRow_19.append(
				                String.valueOf(row26.WebsiteURL)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_19.append("|");
    			


              
                    							
       
				strBuffer_tLogRow_19.append(
				                String.valueOf(row26.SalesPersonID)							
				);


							  			

    			strBuffer_tLogRow_19.append("|");
    			


              
                    							
       
				strBuffer_tLogRow_19.append(
				                String.valueOf(row26.VerticalID)							
				);


							  			

    			strBuffer_tLogRow_19.append("|");
    			


              
                    							
       
				strBuffer_tLogRow_19.append(
				                String.valueOf(row26.CompanyID)							
				);


							  			

    			strBuffer_tLogRow_19.append("|");
    			


   				
	    		if(row26.CurrencyID != null) { //              
                    							
       
				strBuffer_tLogRow_19.append(
				                String.valueOf(row26.CurrencyID)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_19.append("|");
    			


              
                    							
       
				strBuffer_tLogRow_19.append(
				                String.valueOf(row26.BillingPeriodCutoff)							
				);


							  			

    			strBuffer_tLogRow_19.append("|");
    			


              
                    							
       
				strBuffer_tLogRow_19.append(
				                String.valueOf(row26.TaxableID)							
				);


							  			

    			strBuffer_tLogRow_19.append("|");
    			


   				
	    		if(row26.CreditCardNameOnCard != null) { //              
                    							
       
				strBuffer_tLogRow_19.append(
				                String.valueOf(row26.CreditCardNameOnCard)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_19.append("|");
    			


   				
	    		if(row26.CreditCardNumber != null) { //              
                    							
       
				strBuffer_tLogRow_19.append(
				                String.valueOf(row26.CreditCardNumber)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_19.append("|");
    			


   				
	    		if(row26.CreditCardExp != null) { //              
                    							
       
				strBuffer_tLogRow_19.append(
				                String.valueOf(row26.CreditCardExp)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_19.append("|");
    			


   				
	    		if(row26.CreditCardVerCode != null) { //              
                    							
       
				strBuffer_tLogRow_19.append(
				                String.valueOf(row26.CreditCardVerCode)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_19.append("|");
    			


   				
	    		if(row26.CreditCardTypeName != null) { //              
                    							
       
				strBuffer_tLogRow_19.append(
				                String.valueOf(row26.CreditCardTypeName)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_19.append("|");
    			


   				
	    		if(row26.CreatedDate != null) { //              
                    							
       
				strBuffer_tLogRow_19.append(
								FormatterUtils.format_Date(row26.CreatedDate, "dd-MM-yyyy")				
				);


							
	    		} //  			

    			strBuffer_tLogRow_19.append("|");
    			


   				
	    		if(row26.LastModified != null) { //              
                    							
       
				strBuffer_tLogRow_19.append(
								FormatterUtils.format_Date(row26.LastModified, "dd-MM-yyyy")				
				);


							
	    		} //  			

    			strBuffer_tLogRow_19.append("|");
    			


   				
	    		if(row26.UniqueCustomerID != null) { //              
                    							
       
				strBuffer_tLogRow_19.append(
				                String.valueOf(row26.UniqueCustomerID)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_19.append("|");
    			


   				
	    		if(row26.Enabled != null) { //              
                    							
       
				strBuffer_tLogRow_19.append(
				                String.valueOf(row26.Enabled)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_19.append("|");
    			


   				
	    		if(row26.UserID != null) { //              
                    							
       
				strBuffer_tLogRow_19.append(
				                String.valueOf(row26.UserID)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_19.append("|");
    			


   				
	    		if(row26.WebGroupID != null) { //              
                    							
       
				strBuffer_tLogRow_19.append(
				                String.valueOf(row26.WebGroupID)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_19.append("|");
    			


              
                    							
       
				strBuffer_tLogRow_19.append(
				                String.valueOf(row26.AccountManagerID)							
				);


							  			

    			strBuffer_tLogRow_19.append("|");
    			


   				
	    		if(row26.errorCode != null) { //              
                    							
       
				strBuffer_tLogRow_19.append(
				                String.valueOf(row26.errorCode)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_19.append("|");
    			


   				
	    		if(row26.errorMessage != null) { //              
                    							
       
				strBuffer_tLogRow_19.append(
				                String.valueOf(row26.errorMessage)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_19 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_19 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_19);
                    }
                    consoleOut_tLogRow_19.println(strBuffer_tLogRow_19.toString());
                    consoleOut_tLogRow_19.flush();
                    nb_line_tLogRow_19++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_19++;

/**
 * [tLogRow_19 main ] stop
 */
	
	/**
	 * [tLogRow_19 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_19";

	

 



/**
 * [tLogRow_19 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_19 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_19";

	

 



/**
 * [tLogRow_19 process_data_end ] stop
 */

} // End of branch "row26"




	
	/**
	 * [tDBOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	

 



/**
 * [tDBOutput_2 process_data_end ] stop
 */

} // End of branch "AddNewCustomer"



	
		} // close loop of lookup 'row13' // G_TM_M_043
	
	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */



	
	/**
	 * [tLogRow_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_8";

	

 



/**
 * [tLogRow_8 process_data_end ] stop
 */

} // End of branch "row10"




	
	/**
	 * [tFileInputDelimited_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 



/**
 * [tFileInputDelimited_2 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	



            }
            }finally{
                if(!((Object)(context.Customer_File) instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_2!=null){
                		fid_tFileInputDelimited_2.close();
                	}
                }
                if(fid_tFileInputDelimited_2!=null){
                	globalMap.put("tFileInputDelimited_2_NB_LINE", fid_tFileInputDelimited_2.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_2", true);
end_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());




/**
 * [tFileInputDelimited_2 end ] stop
 */

	
	/**
	 * [tLogRow_8 end ] start
	 */

	

	
	
	currentComponent="tLogRow_8";

	


//////

                    
                    java.io.PrintStream consoleOut_tLogRow_8 = null;
                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_8 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_8 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_8);
                    }
                    
                    consoleOut_tLogRow_8.println(util_tLogRow_8.format().toString());
                    consoleOut_tLogRow_8.flush();
//////
globalMap.put("tLogRow_8_NB_LINE",nb_line_tLogRow_8);

///////////////////////    			

			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("row10"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tLogRow_8", true);
end_Hash.put("tLogRow_8", System.currentTimeMillis());




/**
 * [tLogRow_8 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row13 != null) {
						tHash_Lookup_row13.endGet();
					}
					globalMap.remove( "tHash_Lookup_row13" );

					
					
				
					if(tHash_Lookup_row30 != null) {
						tHash_Lookup_row30.endGet();
					}
					globalMap.remove( "tHash_Lookup_row30" );

					
					
				
					if(tHash_Lookup_row38 != null) {
						tHash_Lookup_row38.endGet();
					}
					globalMap.remove( "tHash_Lookup_row38" );

					
					
				
// ###############################      





			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("row12"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tDBOutput_2 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	



		if ( isShareIdentity_tDBOutput_2 ) {
			String setIdentityInsertONSQL_tDBOutput_2 = "SET IDENTITY_INSERT ["+ tableName_tDBOutput_2 +"] ON";
			
        	stmt_tDBOutput_2.execute(setIdentityInsertONSQL_tDBOutput_2);
			
        }
        if(pstmtInsert_tDBOutput_2 != null){
            pstmtInsert_tDBOutput_2.close();
            resourceMap.remove("pstmtInsert_tDBOutput_2");
        }
        if(pstmt_tDBOutput_2 != null) {
            pstmt_tDBOutput_2.close();
            resourceMap.remove("pstmt_tDBOutput_2");
        }
    String setIdentityInsertOFFSQL_tDBOutput_2 = "SET IDENTITY_INSERT ["+ tableName_tDBOutput_2 +"] OFF";
    stmt_tDBOutput_2.execute(setIdentityInsertOFFSQL_tDBOutput_2);
    stmt_tDBOutput_2.close();
    resourceMap.put("statementClosed_tDBOutput_2", true);

	nb_line_deleted_tDBOutput_2=nb_line_deleted_tDBOutput_2+ deletedCount_tDBOutput_2;
	nb_line_update_tDBOutput_2=nb_line_update_tDBOutput_2 + updatedCount_tDBOutput_2;
	nb_line_inserted_tDBOutput_2=nb_line_inserted_tDBOutput_2 + insertedCount_tDBOutput_2;
	nb_line_rejected_tDBOutput_2=nb_line_rejected_tDBOutput_2 + rejectedCount_tDBOutput_2;
	
        globalMap.put("tDBOutput_2_NB_LINE",nb_line_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_UPDATED",nb_line_update_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_DELETED",nb_line_deleted_tDBOutput_2);
        globalMap.put("tDBOutput_2_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_2);
    
	

			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("AddNewCustomer"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tDBOutput_2", true);
end_Hash.put("tDBOutput_2", System.currentTimeMillis());




/**
 * [tDBOutput_2 end ] stop
 */

	
	/**
	 * [tLogRow_6 end ] start
	 */

	

	
	
	currentComponent="tLogRow_6";

	


//////

                    
                    java.io.PrintStream consoleOut_tLogRow_6 = null;
                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_6 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_6 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_6);
                    }
                    
                    consoleOut_tLogRow_6.println(util_tLogRow_6.format().toString());
                    consoleOut_tLogRow_6.flush();
//////
globalMap.put("tLogRow_6_NB_LINE",nb_line_tLogRow_6);

///////////////////////    			

			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("row9"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tLogRow_6", true);
end_Hash.put("tLogRow_6", System.currentTimeMillis());




/**
 * [tLogRow_6 end ] stop
 */




	
	/**
	 * [tLogRow_19 end ] start
	 */

	

	
	
	currentComponent="tLogRow_19";

	


//////
//////
globalMap.put("tLogRow_19_NB_LINE",nb_line_tLogRow_19);

///////////////////////    			

			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("row26"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tLogRow_19", true);
end_Hash.put("tLogRow_19", System.currentTimeMillis());




/**
 * [tLogRow_19 end ] stop
 */












				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_row30"); 
				     			
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_row38"); 
				     			
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_row13"); 
				     			
				try{
					
	
	/**
	 * [tFileInputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 



/**
 * [tFileInputDelimited_2 finally ] stop
 */

	
	/**
	 * [tLogRow_8 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_8";

	

 



/**
 * [tLogRow_8 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tDBOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_2";

	



    if (resourceMap.get("statementClosed_tDBOutput_2") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_2 = null;
                if ((pstmtToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_2")) != null) {
                    pstmtToClose_tDBOutput_2.close();
                }
    }
 



/**
 * [tDBOutput_2 finally ] stop
 */

	
	/**
	 * [tLogRow_6 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_6";

	

 



/**
 * [tLogRow_6 finally ] stop
 */




	
	/**
	 * [tLogRow_19 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_19";

	

 



/**
 * [tLogRow_19 finally ] stop
 */












				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
	}
	

public void tSendMail_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSendMail_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tSendMail_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tSendMail_3", false);
		start_Hash.put("tSendMail_3", System.currentTimeMillis());
		
	
	currentComponent="tSendMail_3";

	
		int tos_count_tSendMail_3 = 0;
		

 



/**
 * [tSendMail_3 begin ] stop
 */
	
	/**
	 * [tSendMail_3 main ] start
	 */

	

	
	
	currentComponent="tSendMail_3";

	

 

	String smtpHost_tSendMail_3 = context.Email_host;
        String smtpPort_tSendMail_3 = context.Email_port;
	String from_tSendMail_3 = (context.Email_from);
    String to_tSendMail_3 = (context.Email_to).replace(";",",");
    String cc_tSendMail_3 = (("")==null || "".equals(""))?null:("").replace(";",",");
    String bcc_tSendMail_3 = (("")==null || "".equals(""))?null:("").replace(";",",");
    String subject_tSendMail_3 = ("Talend Error Notification");
    
	java.util.List<java.util.Map<String, String>> headers_tSendMail_3 = new java.util.ArrayList<java.util.Map<String,String>>();
	java.util.List<String> attachments_tSendMail_3 = new java.util.ArrayList<String>();
	java.util.List<String> contentTransferEncoding_tSendMail_3 = new java.util.ArrayList<String>();

	String message_tSendMail_3 = (("Error at process 3") == null || "".equals("Error at process 3")) ? "\"\"" : ("Error at process 3") ;
	java.util.Properties props_tSendMail_3 = System.getProperties();     
	props_tSendMail_3.put("mail.smtp.host", smtpHost_tSendMail_3);
	props_tSendMail_3.put("mail.smtp.port", smtpPort_tSendMail_3);
		props_tSendMail_3.put("mail.mime.encodefilename", "true");  
		props_tSendMail_3.put("mail.smtp.socketFactory.class", "javax.net.ssl.SSLSocketFactory");
		props_tSendMail_3.put("mail.smtp.socketFactory.fallback", "false");
		props_tSendMail_3.put("mail.smtp.socketFactory.port", smtpPort_tSendMail_3);     
	try {
		
		
			props_tSendMail_3.put("mail.smtp.auth", "true");
			javax.mail.Session session_tSendMail_3 = javax.mail.Session.getInstance(props_tSendMail_3, new javax.mail.Authenticator(){         
				protected javax.mail.PasswordAuthentication getPasswordAuthentication() {
				
                
	final String decryptedPassword_tSendMail_3 = context.Email_password; 
				
				
				return new javax.mail.PasswordAuthentication(context.Email_username, decryptedPassword_tSendMail_3); 
				}         
			});   
		
		
		javax.mail.Message msg_tSendMail_3 = new javax.mail.internet.MimeMessage(session_tSendMail_3);
		msg_tSendMail_3.setFrom(new javax.mail.internet.InternetAddress(from_tSendMail_3, null));
		msg_tSendMail_3.setRecipients(javax.mail.Message.RecipientType.TO,javax.mail.internet.InternetAddress.parse(to_tSendMail_3, false));
		if (cc_tSendMail_3 != null) msg_tSendMail_3.setRecipients(javax.mail.Message.RecipientType.CC, javax.mail.internet.InternetAddress.parse(cc_tSendMail_3, false));
		if (bcc_tSendMail_3 != null) msg_tSendMail_3.setRecipients(javax.mail.Message.RecipientType.BCC, javax.mail.internet.InternetAddress.parse(bcc_tSendMail_3, false));
		msg_tSendMail_3.setSubject(subject_tSendMail_3);

		for (int i_tSendMail_3 = 0; i_tSendMail_3 < headers_tSendMail_3.size(); i_tSendMail_3++) {
			java.util.Map<String, String> header_tSendMail_3 = headers_tSendMail_3.get(i_tSendMail_3);
			msg_tSendMail_3.setHeader(header_tSendMail_3.get("KEY"), header_tSendMail_3.get("VALUE"));    
		}  
		msg_tSendMail_3.setSentDate(new Date());
		msg_tSendMail_3.setHeader("X-Priority", "1"); //High->1 Normal->3 Low->5
		javax.mail.Multipart mp_tSendMail_3 = new javax.mail.internet.MimeMultipart();
		javax.mail.internet.MimeBodyPart mbpText_tSendMail_3 = new javax.mail.internet.MimeBodyPart();
		mbpText_tSendMail_3.setText(message_tSendMail_3,"ISO-8859-15", "plain");
		mp_tSendMail_3.addBodyPart(mbpText_tSendMail_3);
  
		javax.mail.internet.MimeBodyPart mbpFile_tSendMail_3 = null;

		for (int i_tSendMail_3 = 0; i_tSendMail_3 < attachments_tSendMail_3.size(); i_tSendMail_3++){
			String filename_tSendMail_3 = attachments_tSendMail_3.get(i_tSendMail_3);
			javax.activation.FileDataSource fds_tSendMail_3 = null;
			java.io.File file_tSendMail_3 = new java.io.File(filename_tSendMail_3);
			
				if (!file_tSendMail_3.exists()){
					continue;
				}
			
    		if (file_tSendMail_3.isDirectory()){
				java.io.File[] subFiles_tSendMail_3 = file_tSendMail_3.listFiles();
				for(java.io.File subFile_tSendMail_3 : subFiles_tSendMail_3){
					if (subFile_tSendMail_3.isFile()){
						fds_tSendMail_3 = new javax.activation.FileDataSource(subFile_tSendMail_3.getAbsolutePath());
						mbpFile_tSendMail_3 = new javax.mail.internet.MimeBodyPart();
						mbpFile_tSendMail_3.setDataHandler(new javax.activation.DataHandler(fds_tSendMail_3));
						mbpFile_tSendMail_3.setFileName(javax.mail.internet.MimeUtility.encodeText(fds_tSendMail_3.getName()));
						if(contentTransferEncoding_tSendMail_3.get(i_tSendMail_3).equalsIgnoreCase("base64")){
							mbpFile_tSendMail_3.setHeader("Content-Transfer-Encoding", "base64");
						}
						mp_tSendMail_3.addBodyPart(mbpFile_tSendMail_3);
					}
				}
    		}else{
				mbpFile_tSendMail_3 = new javax.mail.internet.MimeBodyPart();
				fds_tSendMail_3 = new javax.activation.FileDataSource(filename_tSendMail_3);
				mbpFile_tSendMail_3.setDataHandler(new javax.activation.DataHandler(fds_tSendMail_3)); 
				mbpFile_tSendMail_3.setFileName(javax.mail.internet.MimeUtility.encodeText(fds_tSendMail_3.getName()));
				if(contentTransferEncoding_tSendMail_3.get(i_tSendMail_3).equalsIgnoreCase("base64")){
					mbpFile_tSendMail_3.setHeader("Content-Transfer-Encoding", "base64");
				}
				mp_tSendMail_3.addBodyPart(mbpFile_tSendMail_3);
			}
		}
		// -- set the content --
		msg_tSendMail_3.setContent(mp_tSendMail_3);
		// add handlers for main MIME types
		javax.activation.MailcapCommandMap mc_tSendMail_3 = ( javax.activation.MailcapCommandMap)javax.activation.CommandMap.getDefaultCommandMap();
		mc_tSendMail_3.addMailcap("text/html;; x-java-content-handler=com.sun.mail.handlers.text_html");
		mc_tSendMail_3.addMailcap("text/xml;; x-java-content-handler=com.sun.mail.handlers.text_xml");
		mc_tSendMail_3.addMailcap("text/plain;; x-java-content-handler=com.sun.mail.handlers.text_plain");
		mc_tSendMail_3.addMailcap("multipart/*;; x-java-content-handler=com.sun.mail.handlers.multipart_mixed");
		mc_tSendMail_3.addMailcap("message/rfc822;; x-java-content-handler=com.sun.mail.handlers.message_rfc822");
		javax.activation.CommandMap.setDefaultCommandMap(mc_tSendMail_3);
		// -- Send the message --
		javax.mail.Transport.send(msg_tSendMail_3);
	} catch(java.lang.Exception e){
  		
			throw(e);
		
	}finally{
		props_tSendMail_3.remove("mail.smtp.host");
		props_tSendMail_3.remove("mail.smtp.port");
		
		props_tSendMail_3.remove("mail.mime.encodefilename");
		  
			props_tSendMail_3.remove("mail.smtp.socketFactory.class");
			props_tSendMail_3.remove("mail.smtp.socketFactory.fallback");
			props_tSendMail_3.remove("mail.smtp.socketFactory.port");
		
		props_tSendMail_3.remove("mail.smtp.auth");     
	}

 


	tos_count_tSendMail_3++;

/**
 * [tSendMail_3 main ] stop
 */
	
	/**
	 * [tSendMail_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSendMail_3";

	

 



/**
 * [tSendMail_3 process_data_begin ] stop
 */
	
	/**
	 * [tSendMail_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tSendMail_3";

	

 



/**
 * [tSendMail_3 process_data_end ] stop
 */
	
	/**
	 * [tSendMail_3 end ] start
	 */

	

	
	
	currentComponent="tSendMail_3";

	

 

ok_Hash.put("tSendMail_3", true);
end_Hash.put("tSendMail_3", System.currentTimeMillis());




/**
 * [tSendMail_3 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSendMail_3 finally ] start
	 */

	

	
	
	currentComponent="tSendMail_3";

	

 



/**
 * [tSendMail_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSendMail_3_SUBPROCESS_STATE", 1);
	}
	


public static class row30Struct implements routines.system.IPersistableComparableLookupRow<row30Struct> {
    final static byte[] commonByteArrayLock_IMPORTINGEVMDATA_ImportingEVM = new byte[0];
    static byte[] commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String Description;

				public String getDescription () {
					return this.Description;
				}
				
			    public int companyid;

				public int getCompanyid () {
					return this.companyid;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.Description == null) ? 0 : this.Description.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row30Struct other = (row30Struct) obj;
		
						if (this.Description == null) {
							if (other.Description != null)
								return false;
						
						} else if (!this.Description.equals(other.Description))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row30Struct other) {

		other.Description = this.Description;
	            other.companyid = this.companyid;
	            
	}

	public void copyKeysDataTo(row30Struct other) {

		other.Description = this.Description;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IMPORTINGEVMDATA_ImportingEVM.length) {
				if(length < 1024 && commonByteArray_IMPORTINGEVMDATA_ImportingEVM.length == 0) {
   					commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[1024];
				} else {
   					commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IMPORTINGEVMDATA_ImportingEVM, 0, length);
			strReturn = new String(commonByteArray_IMPORTINGEVMDATA_ImportingEVM, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IMPORTINGEVMDATA_ImportingEVM) {

        	try {

        		int length = 0;
		
					this.Description = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Description,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.companyid = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.companyid);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Description="+Description);
		sb.append(",companyid="+String.valueOf(companyid));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row30Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.Description, other.Description);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row30Struct row30 = new row30Struct();




	
	/**
	 * [tAdvancedHash_row30 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row30", false);
		start_Hash.put("tAdvancedHash_row30", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row30";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("row30"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tAdvancedHash_row30 = 0;
		

			   		// connection name:row30
			   		// source node:tDBInput_7 - inputs:(after_tFileInputDelimited_2) outputs:(row30,row30) | target node:tAdvancedHash_row30 - inputs:(row30) outputs:()
			   		// linked node: tMap_2 - inputs:(row12,row30,row38,row13) outputs:(AddNewCustomer)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row30 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row30Struct> tHash_Lookup_row30 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row30Struct>getLookup(matchingModeEnum_row30);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row30", tHash_Lookup_row30);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row30 begin ] stop
 */



	
	/**
	 * [tDBInput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_7", false);
		start_Hash.put("tDBInput_7", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_7";

	
		int tos_count_tDBInput_7 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_7 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_7 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_7  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_7, talendToDBArray_tDBInput_7); 
		    int nb_line_tDBInput_7 = 0;
		    java.sql.Connection conn_tDBInput_7 = null;
		        conn_tDBInput_7 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
			String dbschema_tDBInput_7 = (String)globalMap.get("dbschema_tDBConnection_1");
		    
			java.sql.Statement stmt_tDBInput_7 = conn_tDBInput_7.createStatement();

		    String dbquery_tDBInput_7 = "SELECT Description, ID as companyid  from dbo.Company";
			

            	globalMap.put("tDBInput_7_QUERY",dbquery_tDBInput_7);
		    java.sql.ResultSet rs_tDBInput_7 = null;

		    try {
		    	rs_tDBInput_7 = stmt_tDBInput_7.executeQuery(dbquery_tDBInput_7);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_7 = rs_tDBInput_7.getMetaData();
		    	int colQtyInRs_tDBInput_7 = rsmd_tDBInput_7.getColumnCount();

		    String tmpContent_tDBInput_7 = null;
		    
		    
		    while (rs_tDBInput_7.next()) {
		        nb_line_tDBInput_7++;
		        
							if(colQtyInRs_tDBInput_7 < 1) {
								row30.Description = null;
							} else {
	                         		
           		tmpContent_tDBInput_7 = rs_tDBInput_7.getString(1);
            if(tmpContent_tDBInput_7 != null) {
            	if (talendToDBList_tDBInput_7 .contains(rsmd_tDBInput_7.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
            		row30.Description = FormatterUtils.formatUnwithE(tmpContent_tDBInput_7);
            	} else {
                	row30.Description = tmpContent_tDBInput_7;
                }
            } else {
                row30.Description = null;
            }
		                    }
							if(colQtyInRs_tDBInput_7 < 2) {
								row30.companyid = 0;
							} else {
		                          
            row30.companyid = rs_tDBInput_7.getInt(2);
            if(rs_tDBInput_7.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
					





 



/**
 * [tDBInput_7 begin ] stop
 */
	
	/**
	 * [tDBInput_7 main ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

 


	tos_count_tDBInput_7++;

/**
 * [tDBInput_7 main ] stop
 */
	
	/**
	 * [tDBInput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

 



/**
 * [tDBInput_7 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row30 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row30";

	

			//row30
			//row30


			
				
				if(execStat){
					runStat.updateStatOnConnection("row30"+iterateId,1, 1);
				}
				
				
				
			

		


			   
			   

					row30Struct row30_HashRow = new row30Struct();
		   	   	   
				
				row30_HashRow.Description = row30.Description;
				
				row30_HashRow.companyid = row30.companyid;
				
			tHash_Lookup_row30.put(row30_HashRow);
			
            




 


	tos_count_tAdvancedHash_row30++;

/**
 * [tAdvancedHash_row30 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row30 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row30";

	

 



/**
 * [tAdvancedHash_row30 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row30 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row30";

	

 



/**
 * [tAdvancedHash_row30 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

 



/**
 * [tDBInput_7 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_7 end ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

	}
}finally{
	if (rs_tDBInput_7 != null) {
		rs_tDBInput_7.close();
	}
	if (stmt_tDBInput_7 != null) {
		stmt_tDBInput_7.close();
	}
}
globalMap.put("tDBInput_7_NB_LINE",nb_line_tDBInput_7);

 

ok_Hash.put("tDBInput_7", true);
end_Hash.put("tDBInput_7", System.currentTimeMillis());




/**
 * [tDBInput_7 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row30 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row30";

	

tHash_Lookup_row30.endPut();

			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("row30"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tAdvancedHash_row30", true);
end_Hash.put("tAdvancedHash_row30", System.currentTimeMillis());




/**
 * [tAdvancedHash_row30 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_7 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

 



/**
 * [tDBInput_7 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row30 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row30";

	

 



/**
 * [tAdvancedHash_row30 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_7_SUBPROCESS_STATE", 1);
	}
	


public static class row38Struct implements routines.system.IPersistableComparableLookupRow<row38Struct> {
    final static byte[] commonByteArrayLock_IMPORTINGEVMDATA_ImportingEVM = new byte[0];
    static byte[] commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int userid;

				public int getUserid () {
					return this.userid;
				}
				
			    public String email;

				public String getEmail () {
					return this.email;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.email == null) ? 0 : this.email.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row38Struct other = (row38Struct) obj;
		
						if (this.email == null) {
							if (other.email != null)
								return false;
						
						} else if (!this.email.equals(other.email))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row38Struct other) {

		other.userid = this.userid;
	            other.email = this.email;
	            
	}

	public void copyKeysDataTo(row38Struct other) {

		other.email = this.email;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IMPORTINGEVMDATA_ImportingEVM.length) {
				if(length < 1024 && commonByteArray_IMPORTINGEVMDATA_ImportingEVM.length == 0) {
   					commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[1024];
				} else {
   					commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IMPORTINGEVMDATA_ImportingEVM, 0, length);
			strReturn = new String(commonByteArray_IMPORTINGEVMDATA_ImportingEVM, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IMPORTINGEVMDATA_ImportingEVM) {

        	try {

        		int length = 0;
		
					this.email = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.email,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.userid = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.userid);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("userid="+String.valueOf(userid));
		sb.append(",email="+email);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row38Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.email, other.email);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row38Struct row38 = new row38Struct();




	
	/**
	 * [tAdvancedHash_row38 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row38", false);
		start_Hash.put("tAdvancedHash_row38", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row38";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("row38"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tAdvancedHash_row38 = 0;
		

			   		// connection name:row38
			   		// source node:tDBInput_8 - inputs:(after_tFileInputDelimited_2) outputs:(row38,row38) | target node:tAdvancedHash_row38 - inputs:(row38) outputs:()
			   		// linked node: tMap_2 - inputs:(row12,row30,row38,row13) outputs:(AddNewCustomer)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row38 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row38Struct> tHash_Lookup_row38 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row38Struct>getLookup(matchingModeEnum_row38);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row38", tHash_Lookup_row38);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row38 begin ] stop
 */



	
	/**
	 * [tDBInput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_8", false);
		start_Hash.put("tDBInput_8", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_8";

	
		int tos_count_tDBInput_8 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_8 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_8 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_8  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_8, talendToDBArray_tDBInput_8); 
		    int nb_line_tDBInput_8 = 0;
		    java.sql.Connection conn_tDBInput_8 = null;
		        conn_tDBInput_8 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
			String dbschema_tDBInput_8 = (String)globalMap.get("dbschema_tDBConnection_1");
		    
			java.sql.Statement stmt_tDBInput_8 = conn_tDBInput_8.createStatement();

		    String dbquery_tDBInput_8 = "select userid as userid, email  FROM	\"User\" ";
			

            	globalMap.put("tDBInput_8_QUERY",dbquery_tDBInput_8);
		    java.sql.ResultSet rs_tDBInput_8 = null;

		    try {
		    	rs_tDBInput_8 = stmt_tDBInput_8.executeQuery(dbquery_tDBInput_8);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_8 = rs_tDBInput_8.getMetaData();
		    	int colQtyInRs_tDBInput_8 = rsmd_tDBInput_8.getColumnCount();

		    String tmpContent_tDBInput_8 = null;
		    
		    
		    while (rs_tDBInput_8.next()) {
		        nb_line_tDBInput_8++;
		        
							if(colQtyInRs_tDBInput_8 < 1) {
								row38.userid = 0;
							} else {
		                          
            row38.userid = rs_tDBInput_8.getInt(1);
            if(rs_tDBInput_8.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 2) {
								row38.email = null;
							} else {
	                         		
           		tmpContent_tDBInput_8 = rs_tDBInput_8.getString(2);
            if(tmpContent_tDBInput_8 != null) {
            	if (talendToDBList_tDBInput_8 .contains(rsmd_tDBInput_8.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
            		row38.email = FormatterUtils.formatUnwithE(tmpContent_tDBInput_8);
            	} else {
                	row38.email = tmpContent_tDBInput_8;
                }
            } else {
                row38.email = null;
            }
		                    }
					





 



/**
 * [tDBInput_8 begin ] stop
 */
	
	/**
	 * [tDBInput_8 main ] start
	 */

	

	
	
	currentComponent="tDBInput_8";

	

 


	tos_count_tDBInput_8++;

/**
 * [tDBInput_8 main ] stop
 */
	
	/**
	 * [tDBInput_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_8";

	

 



/**
 * [tDBInput_8 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row38 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row38";

	

			//row38
			//row38


			
				
				if(execStat){
					runStat.updateStatOnConnection("row38"+iterateId,1, 1);
				}
				
				
				
			

		


			   
			   

					row38Struct row38_HashRow = new row38Struct();
		   	   	   
				
				row38_HashRow.userid = row38.userid;
				
				row38_HashRow.email = row38.email;
				
			tHash_Lookup_row38.put(row38_HashRow);
			
            




 


	tos_count_tAdvancedHash_row38++;

/**
 * [tAdvancedHash_row38 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row38 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row38";

	

 



/**
 * [tAdvancedHash_row38 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row38 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row38";

	

 



/**
 * [tAdvancedHash_row38 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_8";

	

 



/**
 * [tDBInput_8 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_8 end ] start
	 */

	

	
	
	currentComponent="tDBInput_8";

	

	}
}finally{
	if (rs_tDBInput_8 != null) {
		rs_tDBInput_8.close();
	}
	if (stmt_tDBInput_8 != null) {
		stmt_tDBInput_8.close();
	}
}
globalMap.put("tDBInput_8_NB_LINE",nb_line_tDBInput_8);

 

ok_Hash.put("tDBInput_8", true);
end_Hash.put("tDBInput_8", System.currentTimeMillis());




/**
 * [tDBInput_8 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row38 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row38";

	

tHash_Lookup_row38.endPut();

			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("row38"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tAdvancedHash_row38", true);
end_Hash.put("tAdvancedHash_row38", System.currentTimeMillis());




/**
 * [tAdvancedHash_row38 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_8 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_8";

	

 



/**
 * [tDBInput_8 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row38 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row38";

	

 



/**
 * [tAdvancedHash_row38 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_8_SUBPROCESS_STATE", 1);
	}
	


public static class row13Struct implements routines.system.IPersistableRow<row13Struct> {
    final static byte[] commonByteArrayLock_IMPORTINGEVMDATA_ImportingEVM = new byte[0];
    static byte[] commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[0];

	
			    public Integer CustomerID;

				public Integer getCustomerID () {
					return this.CustomerID;
				}
				
			    public String PriCustomerNumber;

				public String getPriCustomerNumber () {
					return this.PriCustomerNumber;
				}
				
			    public Integer UserID;

				public Integer getUserID () {
					return this.UserID;
				}
				
			    public int SalesPersonID;

				public int getSalesPersonID () {
					return this.SalesPersonID;
				}
				
			    public int BillingPeriodCutoff;

				public int getBillingPeriodCutoff () {
					return this.BillingPeriodCutoff;
				}
				
			    public int TaxableID;

				public int getTaxableID () {
					return this.TaxableID;
				}
				
			    public int AccountManagerID;

				public int getAccountManagerID () {
					return this.AccountManagerID;
				}
				
			    public java.util.Date CreatedDate;

				public java.util.Date getCreatedDate () {
					return this.CreatedDate;
				}
				
			    public java.util.Date LastModified;

				public java.util.Date getLastModified () {
					return this.LastModified;
				}
				
			    public String WholesalerID;

				public String getWholesalerID () {
					return this.WholesalerID;
				}
				
			    public Object UniqueCustomerID;

				public Object getUniqueCustomerID () {
					return this.UniqueCustomerID;
				}
				
			    public boolean Enabled;

				public boolean getEnabled () {
					return this.Enabled;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IMPORTINGEVMDATA_ImportingEVM.length) {
				if(length < 1024 && commonByteArray_IMPORTINGEVMDATA_ImportingEVM.length == 0) {
   					commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[1024];
				} else {
   					commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IMPORTINGEVMDATA_ImportingEVM, 0, length);
			strReturn = new String(commonByteArray_IMPORTINGEVMDATA_ImportingEVM, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IMPORTINGEVMDATA_ImportingEVM) {

        	try {

        		int length = 0;
		
						this.CustomerID = readInteger(dis);
					
					this.PriCustomerNumber = readString(dis);
					
						this.UserID = readInteger(dis);
					
			        this.SalesPersonID = dis.readInt();
					
			        this.BillingPeriodCutoff = dis.readInt();
					
			        this.TaxableID = dis.readInt();
					
			        this.AccountManagerID = dis.readInt();
					
					this.CreatedDate = readDate(dis);
					
					this.LastModified = readDate(dis);
					
					this.WholesalerID = readString(dis);
					
						this.UniqueCustomerID = (Object) dis.readObject();
					
			        this.Enabled = dis.readBoolean();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.CustomerID,dos);
					
					// String
				
						writeString(this.PriCustomerNumber,dos);
					
					// Integer
				
						writeInteger(this.UserID,dos);
					
					// int
				
		            	dos.writeInt(this.SalesPersonID);
					
					// int
				
		            	dos.writeInt(this.BillingPeriodCutoff);
					
					// int
				
		            	dos.writeInt(this.TaxableID);
					
					// int
				
		            	dos.writeInt(this.AccountManagerID);
					
					// java.util.Date
				
						writeDate(this.CreatedDate,dos);
					
					// java.util.Date
				
						writeDate(this.LastModified,dos);
					
					// String
				
						writeString(this.WholesalerID,dos);
					
					// Object
				
       			    	dos.writeObject(this.UniqueCustomerID);
					
					// boolean
				
		            	dos.writeBoolean(this.Enabled);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CustomerID="+String.valueOf(CustomerID));
		sb.append(",PriCustomerNumber="+PriCustomerNumber);
		sb.append(",UserID="+String.valueOf(UserID));
		sb.append(",SalesPersonID="+String.valueOf(SalesPersonID));
		sb.append(",BillingPeriodCutoff="+String.valueOf(BillingPeriodCutoff));
		sb.append(",TaxableID="+String.valueOf(TaxableID));
		sb.append(",AccountManagerID="+String.valueOf(AccountManagerID));
		sb.append(",CreatedDate="+String.valueOf(CreatedDate));
		sb.append(",LastModified="+String.valueOf(LastModified));
		sb.append(",WholesalerID="+WholesalerID);
		sb.append(",UniqueCustomerID="+String.valueOf(UniqueCustomerID));
		sb.append(",Enabled="+String.valueOf(Enabled));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row13Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row11Struct implements routines.system.IPersistableRow<row11Struct> {
    final static byte[] commonByteArrayLock_IMPORTINGEVMDATA_ImportingEVM = new byte[0];
    static byte[] commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[0];

	
			    public Integer CustomerID;

				public Integer getCustomerID () {
					return this.CustomerID;
				}
				
			    public String PriCustomerNumber;

				public String getPriCustomerNumber () {
					return this.PriCustomerNumber;
				}
				
			    public Integer UserID;

				public Integer getUserID () {
					return this.UserID;
				}
				
			    public int SalesPersonID;

				public int getSalesPersonID () {
					return this.SalesPersonID;
				}
				
			    public int BillingPeriodCutoff;

				public int getBillingPeriodCutoff () {
					return this.BillingPeriodCutoff;
				}
				
			    public int TaxableID;

				public int getTaxableID () {
					return this.TaxableID;
				}
				
			    public int AccountManagerID;

				public int getAccountManagerID () {
					return this.AccountManagerID;
				}
				
			    public java.util.Date CreatedDate;

				public java.util.Date getCreatedDate () {
					return this.CreatedDate;
				}
				
			    public java.util.Date LastModified;

				public java.util.Date getLastModified () {
					return this.LastModified;
				}
				
			    public String WholesalerID;

				public String getWholesalerID () {
					return this.WholesalerID;
				}
				
			    public Object UniqueCustomerID;

				public Object getUniqueCustomerID () {
					return this.UniqueCustomerID;
				}
				
			    public boolean Enabled;

				public boolean getEnabled () {
					return this.Enabled;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IMPORTINGEVMDATA_ImportingEVM.length) {
				if(length < 1024 && commonByteArray_IMPORTINGEVMDATA_ImportingEVM.length == 0) {
   					commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[1024];
				} else {
   					commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IMPORTINGEVMDATA_ImportingEVM, 0, length);
			strReturn = new String(commonByteArray_IMPORTINGEVMDATA_ImportingEVM, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IMPORTINGEVMDATA_ImportingEVM) {

        	try {

        		int length = 0;
		
						this.CustomerID = readInteger(dis);
					
					this.PriCustomerNumber = readString(dis);
					
						this.UserID = readInteger(dis);
					
			        this.SalesPersonID = dis.readInt();
					
			        this.BillingPeriodCutoff = dis.readInt();
					
			        this.TaxableID = dis.readInt();
					
			        this.AccountManagerID = dis.readInt();
					
					this.CreatedDate = readDate(dis);
					
					this.LastModified = readDate(dis);
					
					this.WholesalerID = readString(dis);
					
						this.UniqueCustomerID = (Object) dis.readObject();
					
			        this.Enabled = dis.readBoolean();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.CustomerID,dos);
					
					// String
				
						writeString(this.PriCustomerNumber,dos);
					
					// Integer
				
						writeInteger(this.UserID,dos);
					
					// int
				
		            	dos.writeInt(this.SalesPersonID);
					
					// int
				
		            	dos.writeInt(this.BillingPeriodCutoff);
					
					// int
				
		            	dos.writeInt(this.TaxableID);
					
					// int
				
		            	dos.writeInt(this.AccountManagerID);
					
					// java.util.Date
				
						writeDate(this.CreatedDate,dos);
					
					// java.util.Date
				
						writeDate(this.LastModified,dos);
					
					// String
				
						writeString(this.WholesalerID,dos);
					
					// Object
				
       			    	dos.writeObject(this.UniqueCustomerID);
					
					// boolean
				
		            	dos.writeBoolean(this.Enabled);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CustomerID="+String.valueOf(CustomerID));
		sb.append(",PriCustomerNumber="+PriCustomerNumber);
		sb.append(",UserID="+String.valueOf(UserID));
		sb.append(",SalesPersonID="+String.valueOf(SalesPersonID));
		sb.append(",BillingPeriodCutoff="+String.valueOf(BillingPeriodCutoff));
		sb.append(",TaxableID="+String.valueOf(TaxableID));
		sb.append(",AccountManagerID="+String.valueOf(AccountManagerID));
		sb.append(",CreatedDate="+String.valueOf(CreatedDate));
		sb.append(",LastModified="+String.valueOf(LastModified));
		sb.append(",WholesalerID="+WholesalerID);
		sb.append(",UniqueCustomerID="+String.valueOf(UniqueCustomerID));
		sb.append(",Enabled="+String.valueOf(Enabled));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row11Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row11Struct row11 = new row11Struct();
row11Struct row13 = row11;





	
	/**
	 * [tAdvancedHash_row13 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row13", false);
		start_Hash.put("tAdvancedHash_row13", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row13";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("row13"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tAdvancedHash_row13 = 0;
		

			   		// connection name:row13
			   		// source node:tLogRow_9 - inputs:(row11) outputs:(row13,row13) | target node:tAdvancedHash_row13 - inputs:(row13) outputs:()
			   		// linked node: tMap_2 - inputs:(row12,row30,row38,row13) outputs:(AddNewCustomer)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row13 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_ROWS;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct> tHash_Lookup_row13 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row13Struct>getLookup(matchingModeEnum_row13);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row13", tHash_Lookup_row13);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row13 begin ] stop
 */



	
	/**
	 * [tLogRow_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_9", false);
		start_Hash.put("tLogRow_9", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_9";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("row11"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tLogRow_9 = 0;
		

	///////////////////////
	
         class Util_tLogRow_9 {

        String[] des_top = { ".", ".", "-", "+" };

        String[] des_head = { "|=", "=|", "-", "+" };

        String[] des_bottom = { "'", "'", "-", "+" };

        String name="";

        java.util.List<String[]> list = new java.util.ArrayList<String[]>();

        int[] colLengths = new int[12];

        public void addRow(String[] row) {

            for (int i = 0; i < 12; i++) {
                if (row[i]!=null) {
                  colLengths[i] = Math.max(colLengths[i], row[i].length());
                }
            }
            list.add(row);
        }

        public void setTableName(String name) {

            this.name = name;
        }

            public StringBuilder format() {
            
                StringBuilder sb = new StringBuilder();
  
            
                    sb.append(print(des_top));
    
                    int totals = 0;
                    for (int i = 0; i < colLengths.length; i++) {
                        totals = totals + colLengths[i];
                    }
    
                    // name
                    sb.append("|");
                    int k = 0;
                    for (k = 0; k < (totals + 11 - name.length()) / 2; k++) {
                        sb.append(' ');
                    }
                    sb.append(name);
                    for (int i = 0; i < totals + 11 - name.length() - k; i++) {
                        sb.append(' ');
                    }
                    sb.append("|\n");

                    // head and rows
                    sb.append(print(des_head));
                    for (int i = 0; i < list.size(); i++) {
    
                        String[] row = list.get(i);
    
                        java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());
                        
                        StringBuilder sbformat = new StringBuilder();                                             
        			        sbformat.append("|%1$-");
        			        sbformat.append(colLengths[0]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%2$-");
        			        sbformat.append(colLengths[1]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%3$-");
        			        sbformat.append(colLengths[2]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%4$-");
        			        sbformat.append(colLengths[3]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%5$-");
        			        sbformat.append(colLengths[4]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%6$-");
        			        sbformat.append(colLengths[5]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%7$-");
        			        sbformat.append(colLengths[6]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%8$-");
        			        sbformat.append(colLengths[7]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%9$-");
        			        sbformat.append(colLengths[8]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%10$-");
        			        sbformat.append(colLengths[9]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%11$-");
        			        sbformat.append(colLengths[10]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%12$-");
        			        sbformat.append(colLengths[11]);
        			        sbformat.append("s");
        			                      
                        sbformat.append("|\n");                    
       
                        formatter.format(sbformat.toString(), (Object[])row);	
                                
                        sb.append(formatter.toString());
                        if (i == 0)
                            sb.append(print(des_head)); // print the head
                    }
    
                    // end
                    sb.append(print(des_bottom));
                    return sb;
                }
            

            private StringBuilder print(String[] fillChars) {
                StringBuilder sb = new StringBuilder();
                //first column
                sb.append(fillChars[0]);                
                    for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);	                

                    for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[4] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[5] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[6] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[7] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[8] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[9] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[10] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                
                    //last column
                    for (int i = 0; i < colLengths[11] - fillChars[1].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }         
                sb.append(fillChars[1]);
                sb.append("\n");               
                return sb;
            }
            
            public boolean isTableEmpty(){
            	if (list.size() > 1)
            		return false;
            	return true;
            }
        }
        Util_tLogRow_9 util_tLogRow_9 = new Util_tLogRow_9();
        util_tLogRow_9.setTableName("CustomerTableLog");
        util_tLogRow_9.addRow(new String[]{"CustomerID","PriCustomerNumber","UserID","SalesPersonID","BillingPeriodCutoff","TaxableID","AccountManagerID","CreatedDate","LastModified","WholesalerID","UniqueCustomerID","Enabled",});        
 		StringBuilder strBuffer_tLogRow_9 = null;
		int nb_line_tLogRow_9 = 0;
///////////////////////    			



 



/**
 * [tLogRow_9 begin ] stop
 */



	
	/**
	 * [tDBInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_2", false);
		start_Hash.put("tDBInput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_2";

	
		int tos_count_tDBInput_2 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_2 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_2 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_2  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_2, talendToDBArray_tDBInput_2); 
		    int nb_line_tDBInput_2 = 0;
		    java.sql.Connection conn_tDBInput_2 = null;
		        conn_tDBInput_2 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
			String dbschema_tDBInput_2 = (String)globalMap.get("dbschema_tDBConnection_1");
		    
			java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

		    String dbquery_tDBInput_2 = "SELECT MAX(c.ID) as CustomerID, MAX (c.PriCustomerNumber) as PriCustomerNumber, MAX(u.UserID) as UserID,\n2 as SalesPer"
+"sonID, 31 as BillingPeriodCutoff ,  0 as TaxableID, 1 as AccountManagerID, GETDATE() as CreatedDate,\nGETDATE() as LastM"
+"odified, '0000000001' as WholesalerID, NEWID() as UniqueCustomerID, 1 as Enabled \n FROM dbo.Customer c RIGHT OUTER JOIN"
+" dbo.[User] u on c.UserID = u.UserID";
			

            	globalMap.put("tDBInput_2_QUERY",dbquery_tDBInput_2);
		    java.sql.ResultSet rs_tDBInput_2 = null;

		    try {
		    	rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
		    	int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

		    String tmpContent_tDBInput_2 = null;
		    
		    
		    while (rs_tDBInput_2.next()) {
		        nb_line_tDBInput_2++;
		        
							if(colQtyInRs_tDBInput_2 < 1) {
								row11.CustomerID = null;
							} else {
		                          
            row11.CustomerID = rs_tDBInput_2.getInt(1);
            if(rs_tDBInput_2.wasNull()){
                    row11.CustomerID = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 2) {
								row11.PriCustomerNumber = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(2);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
            		row11.PriCustomerNumber = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row11.PriCustomerNumber = tmpContent_tDBInput_2;
                }
            } else {
                row11.PriCustomerNumber = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 3) {
								row11.UserID = null;
							} else {
		                          
            row11.UserID = rs_tDBInput_2.getInt(3);
            if(rs_tDBInput_2.wasNull()){
                    row11.UserID = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 4) {
								row11.SalesPersonID = 0;
							} else {
		                          
            row11.SalesPersonID = rs_tDBInput_2.getInt(4);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 5) {
								row11.BillingPeriodCutoff = 0;
							} else {
		                          
            row11.BillingPeriodCutoff = rs_tDBInput_2.getInt(5);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 6) {
								row11.TaxableID = 0;
							} else {
		                          
            row11.TaxableID = rs_tDBInput_2.getInt(6);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 7) {
								row11.AccountManagerID = 0;
							} else {
		                          
            row11.AccountManagerID = rs_tDBInput_2.getInt(7);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 8) {
								row11.CreatedDate = null;
							} else {
										
			row11.CreatedDate = mssqlGTU_tDBInput_2.getDate(rsmd_tDBInput_2, rs_tDBInput_2, 8);
			
		                    }
							if(colQtyInRs_tDBInput_2 < 9) {
								row11.LastModified = null;
							} else {
										
			row11.LastModified = mssqlGTU_tDBInput_2.getDate(rsmd_tDBInput_2, rs_tDBInput_2, 9);
			
		                    }
							if(colQtyInRs_tDBInput_2 < 10) {
								row11.WholesalerID = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(10);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(10).toUpperCase(java.util.Locale.ENGLISH))) {
            		row11.WholesalerID = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row11.WholesalerID = tmpContent_tDBInput_2;
                }
            } else {
                row11.WholesalerID = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 11) {
								row11.UniqueCustomerID = null;
							} else {
		                          
            row11.UniqueCustomerID = rs_tDBInput_2.getObject(11);
            if(rs_tDBInput_2.wasNull()){
                    row11.UniqueCustomerID = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 12) {
								row11.Enabled = false;
							} else {
	                         		
            row11.Enabled = rs_tDBInput_2.getBoolean(12);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
					





 



/**
 * [tDBInput_2 begin ] stop
 */
	
	/**
	 * [tDBInput_2 main ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 


	tos_count_tDBInput_2++;

/**
 * [tDBInput_2 main ] stop
 */
	
	/**
	 * [tDBInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tLogRow_9 main ] start
	 */

	

	
	
	currentComponent="tLogRow_9";

	

			//row11
			//row11


			
				
				if(execStat){
					runStat.updateStatOnConnection("row11"+iterateId,1, 1);
				}
				
				
				
			

		
///////////////////////		
						

				
				String[] row_tLogRow_9 = new String[12];
   				
	    		if(row11.CustomerID != null) { //              
                 row_tLogRow_9[0]=    						    
				                String.valueOf(row11.CustomerID)			
					          ;	
							
	    		} //			
    			   				
	    		if(row11.PriCustomerNumber != null) { //              
                 row_tLogRow_9[1]=    						    
				                String.valueOf(row11.PriCustomerNumber)			
					          ;	
							
	    		} //			
    			   				
	    		if(row11.UserID != null) { //              
                 row_tLogRow_9[2]=    						    
				                String.valueOf(row11.UserID)			
					          ;	
							
	    		} //			
    			              
                 row_tLogRow_9[3]=    						    
				                String.valueOf(row11.SalesPersonID)			
					          ;	
										
    			              
                 row_tLogRow_9[4]=    						    
				                String.valueOf(row11.BillingPeriodCutoff)			
					          ;	
										
    			              
                 row_tLogRow_9[5]=    						    
				                String.valueOf(row11.TaxableID)			
					          ;	
										
    			              
                 row_tLogRow_9[6]=    						    
				                String.valueOf(row11.AccountManagerID)			
					          ;	
										
    			   				
	    		if(row11.CreatedDate != null) { //              
                 row_tLogRow_9[7]=    						
								FormatterUtils.format_Date(row11.CreatedDate, "yyyy-MM-dd HH:mm:ss")
					          ;	
							
	    		} //			
    			   				
	    		if(row11.LastModified != null) { //              
                 row_tLogRow_9[8]=    						
								FormatterUtils.format_Date(row11.LastModified, "yyyy-MM-dd HH:mm:ss")
					          ;	
							
	    		} //			
    			   				
	    		if(row11.WholesalerID != null) { //              
                 row_tLogRow_9[9]=    						    
				                String.valueOf(row11.WholesalerID)			
					          ;	
							
	    		} //			
    			   				
	    		if(row11.UniqueCustomerID != null) { //              
                 row_tLogRow_9[10]=    						    
				                String.valueOf(row11.UniqueCustomerID)			
					          ;	
							
	    		} //			
    			              
                 row_tLogRow_9[11]=    						    
				                String.valueOf(row11.Enabled)			
					          ;	
										
    			 

				util_tLogRow_9.addRow(row_tLogRow_9);	
				nb_line_tLogRow_9++;
//////

//////                    
                    
///////////////////////    			

 
     row13 = row11;


	tos_count_tLogRow_9++;

/**
 * [tLogRow_9 main ] stop
 */
	
	/**
	 * [tLogRow_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_9";

	

 



/**
 * [tLogRow_9 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row13 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";

	

			//row13
			//row13


			
				
				if(execStat){
					runStat.updateStatOnConnection("row13"+iterateId,1, 1);
				}
				
				
				
			

		


			   
			   

					row13Struct row13_HashRow = new row13Struct();
		   	   	   
				
				row13_HashRow.CustomerID = row13.CustomerID;
				
				row13_HashRow.PriCustomerNumber = row13.PriCustomerNumber;
				
				row13_HashRow.UserID = row13.UserID;
				
				row13_HashRow.SalesPersonID = row13.SalesPersonID;
				
				row13_HashRow.BillingPeriodCutoff = row13.BillingPeriodCutoff;
				
				row13_HashRow.TaxableID = row13.TaxableID;
				
				row13_HashRow.AccountManagerID = row13.AccountManagerID;
				
				row13_HashRow.CreatedDate = row13.CreatedDate;
				
				row13_HashRow.LastModified = row13.LastModified;
				
				row13_HashRow.WholesalerID = row13.WholesalerID;
				
				row13_HashRow.UniqueCustomerID = row13.UniqueCustomerID;
				
				row13_HashRow.Enabled = row13.Enabled;
				
			tHash_Lookup_row13.put(row13_HashRow);
			
            




 


	tos_count_tAdvancedHash_row13++;

/**
 * [tAdvancedHash_row13 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";

	

 



/**
 * [tAdvancedHash_row13 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row13 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";

	

 



/**
 * [tAdvancedHash_row13 process_data_end ] stop
 */



	
	/**
	 * [tLogRow_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_9";

	

 



/**
 * [tLogRow_9 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_2 end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

	}
}finally{
	if (rs_tDBInput_2 != null) {
		rs_tDBInput_2.close();
	}
	if (stmt_tDBInput_2 != null) {
		stmt_tDBInput_2.close();
	}
}
globalMap.put("tDBInput_2_NB_LINE",nb_line_tDBInput_2);

 

ok_Hash.put("tDBInput_2", true);
end_Hash.put("tDBInput_2", System.currentTimeMillis());




/**
 * [tDBInput_2 end ] stop
 */

	
	/**
	 * [tLogRow_9 end ] start
	 */

	

	
	
	currentComponent="tLogRow_9";

	


//////

                    
                    java.io.PrintStream consoleOut_tLogRow_9 = null;
                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_9 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_9 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_9);
                    }
                    
                    consoleOut_tLogRow_9.println(util_tLogRow_9.format().toString());
                    consoleOut_tLogRow_9.flush();
//////
globalMap.put("tLogRow_9_NB_LINE",nb_line_tLogRow_9);

///////////////////////    			

			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("row11"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tLogRow_9", true);
end_Hash.put("tLogRow_9", System.currentTimeMillis());




/**
 * [tLogRow_9 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row13 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";

	

tHash_Lookup_row13.endPut();

			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("row13"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tAdvancedHash_row13", true);
end_Hash.put("tAdvancedHash_row13", System.currentTimeMillis());




/**
 * [tAdvancedHash_row13 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 finally ] stop
 */

	
	/**
	 * [tLogRow_9 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_9";

	

 



/**
 * [tLogRow_9 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row13 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";

	

 



/**
 * [tAdvancedHash_row13 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}
	

public void tDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBConnection_1", false);
		start_Hash.put("tDBConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tDBConnection_1";

	
		int tos_count_tDBConnection_1 = 0;
		
	

	
			String url_tDBConnection_1 = "jdbc:jtds:sqlserver://" + context.DB_Host ;
		String port_tDBConnection_1 = context.DB_Port;
		String dbname_tDBConnection_1 = context.DB_Name ;
    	if (!"".equals(port_tDBConnection_1)) {
    		url_tDBConnection_1 += ":" + context.DB_Port;
    	}
    	if (!"".equals(dbname_tDBConnection_1)) {
    		
				url_tDBConnection_1 += "//" + context.DB_Name; 
    	}
		url_tDBConnection_1 += ";appName=" + projectName + ";" + "";  
		String dbUser_tDBConnection_1 = context.DB_Username;
		
		
			
	final String decryptedPassword_tDBConnection_1 = context.DB_Password; 
			String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;
		
	java.sql.Connection conn_tDBConnection_1 = null;
	
		
			String driverClass_tDBConnection_1 = "net.sourceforge.jtds.jdbc.Driver";
			java.lang.Class jdbcclazz_tDBConnection_1 = java.lang.Class.forName(driverClass_tDBConnection_1);
		
				conn_tDBConnection_1 = java.sql.DriverManager.getConnection(url_tDBConnection_1,dbUser_tDBConnection_1,dbPwd_tDBConnection_1);

		globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
	if (null != conn_tDBConnection_1) {
		
			conn_tDBConnection_1.setAutoCommit(true);
	}

	globalMap.put("dbschema_tDBConnection_1", "");

	globalMap.put("db_tDBConnection_1",  context.DB_Name);

	globalMap.put("conn_tDBConnection_1",conn_tDBConnection_1);
	
	globalMap.put("shareIdentitySetting_tDBConnection_1",  false);

 



/**
 * [tDBConnection_1 begin ] stop
 */
	
	/**
	 * [tDBConnection_1 main ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 


	tos_count_tDBConnection_1++;

/**
 * [tDBConnection_1 main ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tDBConnection_1 end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 

ok_Hash.put("tDBConnection_1", true);
end_Hash.put("tDBConnection_1", System.currentTimeMillis());




/**
 * [tDBConnection_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBConnection_1:OnSubjobOk1", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
								} 
							
							tFileInputDelimited_1Process(globalMap); 
						
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBConnection_1:OnSubjobOk2", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
								} 
							
							tFileInputDelimited_4Process(globalMap); 
						
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBConnection_1:OnSubjobOk3", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk4", 0, "ok");
								} 
							
							tFileInputDelimited_2Process(globalMap); 
						
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBConnection_1:OnSubjobOk4", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk5", 0, "ok");
								} 
							
							tFileInputDelimited_6Process(globalMap); 
						
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBConnection_1:OnSubjobOk5", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk7", 0, "ok");
								} 
							
							tFileInputDelimited_3Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}
	


public static class row36Struct implements routines.system.IPersistableRow<row36Struct> {
    final static byte[] commonByteArrayLock_IMPORTINGEVMDATA_ImportingEVM = new byte[0];
    static byte[] commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int UserID;

				public int getUserID () {
					return this.UserID;
				}
				
			    public String Username;

				public String getUsername () {
					return this.Username;
				}
				
			    public String Password;

				public String getPassword () {
					return this.Password;
				}
				
			    public String DisplayName;

				public String getDisplayName () {
					return this.DisplayName;
				}
				
			    public String Email;

				public String getEmail () {
					return this.Email;
				}
				
			    public String Telephone;

				public String getTelephone () {
					return this.Telephone;
				}
				
			    public boolean Enabled;

				public boolean getEnabled () {
					return this.Enabled;
				}
				
			    public Integer CompanyID;

				public Integer getCompanyID () {
					return this.CompanyID;
				}
				
			    public Integer SalesPersonID;

				public Integer getSalesPersonID () {
					return this.SalesPersonID;
				}
				
			    public Integer RoleID;

				public Integer getRoleID () {
					return this.RoleID;
				}
				
			    public Boolean MustChangePassword;

				public Boolean getMustChangePassword () {
					return this.MustChangePassword;
				}
				
			    public String Address1;

				public String getAddress1 () {
					return this.Address1;
				}
				
			    public String Address2;

				public String getAddress2 () {
					return this.Address2;
				}
				
			    public String City;

				public String getCity () {
					return this.City;
				}
				
			    public String Country;

				public String getCountry () {
					return this.Country;
				}
				
			    public String Region;

				public String getRegion () {
					return this.Region;
				}
				
			    public String PostalCode;

				public String getPostalCode () {
					return this.PostalCode;
				}
				
			    public Integer CharityID;

				public Integer getCharityID () {
					return this.CharityID;
				}
				
			    public String WebMemberID;

				public String getWebMemberID () {
					return this.WebMemberID;
				}
				
			    public Object UserUniqueID;

				public Object getUserUniqueID () {
					return this.UserUniqueID;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.UserID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row36Struct other = (row36Struct) obj;
		
						if (this.UserID != other.UserID)
							return false;
					

		return true;
    }

	public void copyDataTo(row36Struct other) {

		other.UserID = this.UserID;
	            other.Username = this.Username;
	            other.Password = this.Password;
	            other.DisplayName = this.DisplayName;
	            other.Email = this.Email;
	            other.Telephone = this.Telephone;
	            other.Enabled = this.Enabled;
	            other.CompanyID = this.CompanyID;
	            other.SalesPersonID = this.SalesPersonID;
	            other.RoleID = this.RoleID;
	            other.MustChangePassword = this.MustChangePassword;
	            other.Address1 = this.Address1;
	            other.Address2 = this.Address2;
	            other.City = this.City;
	            other.Country = this.Country;
	            other.Region = this.Region;
	            other.PostalCode = this.PostalCode;
	            other.CharityID = this.CharityID;
	            other.WebMemberID = this.WebMemberID;
	            other.UserUniqueID = this.UserUniqueID;
	            
	}

	public void copyKeysDataTo(row36Struct other) {

		other.UserID = this.UserID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IMPORTINGEVMDATA_ImportingEVM.length) {
				if(length < 1024 && commonByteArray_IMPORTINGEVMDATA_ImportingEVM.length == 0) {
   					commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[1024];
				} else {
   					commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IMPORTINGEVMDATA_ImportingEVM, 0, length);
			strReturn = new String(commonByteArray_IMPORTINGEVMDATA_ImportingEVM, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IMPORTINGEVMDATA_ImportingEVM) {

        	try {

        		int length = 0;
		
			        this.UserID = dis.readInt();
					
					this.Username = readString(dis);
					
					this.Password = readString(dis);
					
					this.DisplayName = readString(dis);
					
					this.Email = readString(dis);
					
					this.Telephone = readString(dis);
					
			        this.Enabled = dis.readBoolean();
					
						this.CompanyID = readInteger(dis);
					
						this.SalesPersonID = readInteger(dis);
					
						this.RoleID = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.MustChangePassword = null;
           				} else {
           			    	this.MustChangePassword = dis.readBoolean();
           				}
					
					this.Address1 = readString(dis);
					
					this.Address2 = readString(dis);
					
					this.City = readString(dis);
					
					this.Country = readString(dis);
					
					this.Region = readString(dis);
					
					this.PostalCode = readString(dis);
					
						this.CharityID = readInteger(dis);
					
					this.WebMemberID = readString(dis);
					
						this.UserUniqueID = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.UserID);
					
					// String
				
						writeString(this.Username,dos);
					
					// String
				
						writeString(this.Password,dos);
					
					// String
				
						writeString(this.DisplayName,dos);
					
					// String
				
						writeString(this.Email,dos);
					
					// String
				
						writeString(this.Telephone,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.Enabled);
					
					// Integer
				
						writeInteger(this.CompanyID,dos);
					
					// Integer
				
						writeInteger(this.SalesPersonID,dos);
					
					// Integer
				
						writeInteger(this.RoleID,dos);
					
					// Boolean
				
						if(this.MustChangePassword == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.MustChangePassword);
		            	}
					
					// String
				
						writeString(this.Address1,dos);
					
					// String
				
						writeString(this.Address2,dos);
					
					// String
				
						writeString(this.City,dos);
					
					// String
				
						writeString(this.Country,dos);
					
					// String
				
						writeString(this.Region,dos);
					
					// String
				
						writeString(this.PostalCode,dos);
					
					// Integer
				
						writeInteger(this.CharityID,dos);
					
					// String
				
						writeString(this.WebMemberID,dos);
					
					// Object
				
       			    	dos.writeObject(this.UserUniqueID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("UserID="+String.valueOf(UserID));
		sb.append(",Username="+Username);
		sb.append(",Password="+Password);
		sb.append(",DisplayName="+DisplayName);
		sb.append(",Email="+Email);
		sb.append(",Telephone="+Telephone);
		sb.append(",Enabled="+String.valueOf(Enabled));
		sb.append(",CompanyID="+String.valueOf(CompanyID));
		sb.append(",SalesPersonID="+String.valueOf(SalesPersonID));
		sb.append(",RoleID="+String.valueOf(RoleID));
		sb.append(",MustChangePassword="+String.valueOf(MustChangePassword));
		sb.append(",Address1="+Address1);
		sb.append(",Address2="+Address2);
		sb.append(",City="+City);
		sb.append(",Country="+Country);
		sb.append(",Region="+Region);
		sb.append(",PostalCode="+PostalCode);
		sb.append(",CharityID="+String.valueOf(CharityID));
		sb.append(",WebMemberID="+WebMemberID);
		sb.append(",UserUniqueID="+String.valueOf(UserUniqueID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row36Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.UserID, other.UserID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row37Struct implements routines.system.IPersistableRow<row37Struct> {
    final static byte[] commonByteArrayLock_IMPORTINGEVMDATA_ImportingEVM = new byte[0];
    static byte[] commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int UserID;

				public int getUserID () {
					return this.UserID;
				}
				
			    public String Username;

				public String getUsername () {
					return this.Username;
				}
				
			    public String Password;

				public String getPassword () {
					return this.Password;
				}
				
			    public String DisplayName;

				public String getDisplayName () {
					return this.DisplayName;
				}
				
			    public String Email;

				public String getEmail () {
					return this.Email;
				}
				
			    public String Telephone;

				public String getTelephone () {
					return this.Telephone;
				}
				
			    public boolean Enabled;

				public boolean getEnabled () {
					return this.Enabled;
				}
				
			    public Integer CompanyID;

				public Integer getCompanyID () {
					return this.CompanyID;
				}
				
			    public Integer SalesPersonID;

				public Integer getSalesPersonID () {
					return this.SalesPersonID;
				}
				
			    public Integer RoleID;

				public Integer getRoleID () {
					return this.RoleID;
				}
				
			    public Boolean MustChangePassword;

				public Boolean getMustChangePassword () {
					return this.MustChangePassword;
				}
				
			    public String Address1;

				public String getAddress1 () {
					return this.Address1;
				}
				
			    public String Address2;

				public String getAddress2 () {
					return this.Address2;
				}
				
			    public String City;

				public String getCity () {
					return this.City;
				}
				
			    public String Country;

				public String getCountry () {
					return this.Country;
				}
				
			    public String Region;

				public String getRegion () {
					return this.Region;
				}
				
			    public String PostalCode;

				public String getPostalCode () {
					return this.PostalCode;
				}
				
			    public Integer CharityID;

				public Integer getCharityID () {
					return this.CharityID;
				}
				
			    public String WebMemberID;

				public String getWebMemberID () {
					return this.WebMemberID;
				}
				
			    public Object UserUniqueID;

				public Object getUserUniqueID () {
					return this.UserUniqueID;
				}
				
			    public String errorCode;

				public String getErrorCode () {
					return this.errorCode;
				}
				
			    public String errorMessage;

				public String getErrorMessage () {
					return this.errorMessage;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.UserID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row37Struct other = (row37Struct) obj;
		
						if (this.UserID != other.UserID)
							return false;
					

		return true;
    }

	public void copyDataTo(row37Struct other) {

		other.UserID = this.UserID;
	            other.Username = this.Username;
	            other.Password = this.Password;
	            other.DisplayName = this.DisplayName;
	            other.Email = this.Email;
	            other.Telephone = this.Telephone;
	            other.Enabled = this.Enabled;
	            other.CompanyID = this.CompanyID;
	            other.SalesPersonID = this.SalesPersonID;
	            other.RoleID = this.RoleID;
	            other.MustChangePassword = this.MustChangePassword;
	            other.Address1 = this.Address1;
	            other.Address2 = this.Address2;
	            other.City = this.City;
	            other.Country = this.Country;
	            other.Region = this.Region;
	            other.PostalCode = this.PostalCode;
	            other.CharityID = this.CharityID;
	            other.WebMemberID = this.WebMemberID;
	            other.UserUniqueID = this.UserUniqueID;
	            other.errorCode = this.errorCode;
	            other.errorMessage = this.errorMessage;
	            
	}

	public void copyKeysDataTo(row37Struct other) {

		other.UserID = this.UserID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IMPORTINGEVMDATA_ImportingEVM.length) {
				if(length < 1024 && commonByteArray_IMPORTINGEVMDATA_ImportingEVM.length == 0) {
   					commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[1024];
				} else {
   					commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IMPORTINGEVMDATA_ImportingEVM, 0, length);
			strReturn = new String(commonByteArray_IMPORTINGEVMDATA_ImportingEVM, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IMPORTINGEVMDATA_ImportingEVM) {

        	try {

        		int length = 0;
		
			        this.UserID = dis.readInt();
					
					this.Username = readString(dis);
					
					this.Password = readString(dis);
					
					this.DisplayName = readString(dis);
					
					this.Email = readString(dis);
					
					this.Telephone = readString(dis);
					
			        this.Enabled = dis.readBoolean();
					
						this.CompanyID = readInteger(dis);
					
						this.SalesPersonID = readInteger(dis);
					
						this.RoleID = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.MustChangePassword = null;
           				} else {
           			    	this.MustChangePassword = dis.readBoolean();
           				}
					
					this.Address1 = readString(dis);
					
					this.Address2 = readString(dis);
					
					this.City = readString(dis);
					
					this.Country = readString(dis);
					
					this.Region = readString(dis);
					
					this.PostalCode = readString(dis);
					
						this.CharityID = readInteger(dis);
					
					this.WebMemberID = readString(dis);
					
						this.UserUniqueID = (Object) dis.readObject();
					
					this.errorCode = readString(dis);
					
					this.errorMessage = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.UserID);
					
					// String
				
						writeString(this.Username,dos);
					
					// String
				
						writeString(this.Password,dos);
					
					// String
				
						writeString(this.DisplayName,dos);
					
					// String
				
						writeString(this.Email,dos);
					
					// String
				
						writeString(this.Telephone,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.Enabled);
					
					// Integer
				
						writeInteger(this.CompanyID,dos);
					
					// Integer
				
						writeInteger(this.SalesPersonID,dos);
					
					// Integer
				
						writeInteger(this.RoleID,dos);
					
					// Boolean
				
						if(this.MustChangePassword == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.MustChangePassword);
		            	}
					
					// String
				
						writeString(this.Address1,dos);
					
					// String
				
						writeString(this.Address2,dos);
					
					// String
				
						writeString(this.City,dos);
					
					// String
				
						writeString(this.Country,dos);
					
					// String
				
						writeString(this.Region,dos);
					
					// String
				
						writeString(this.PostalCode,dos);
					
					// Integer
				
						writeInteger(this.CharityID,dos);
					
					// String
				
						writeString(this.WebMemberID,dos);
					
					// Object
				
       			    	dos.writeObject(this.UserUniqueID);
					
					// String
				
						writeString(this.errorCode,dos);
					
					// String
				
						writeString(this.errorMessage,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("UserID="+String.valueOf(UserID));
		sb.append(",Username="+Username);
		sb.append(",Password="+Password);
		sb.append(",DisplayName="+DisplayName);
		sb.append(",Email="+Email);
		sb.append(",Telephone="+Telephone);
		sb.append(",Enabled="+String.valueOf(Enabled));
		sb.append(",CompanyID="+String.valueOf(CompanyID));
		sb.append(",SalesPersonID="+String.valueOf(SalesPersonID));
		sb.append(",RoleID="+String.valueOf(RoleID));
		sb.append(",MustChangePassword="+String.valueOf(MustChangePassword));
		sb.append(",Address1="+Address1);
		sb.append(",Address2="+Address2);
		sb.append(",City="+City);
		sb.append(",Country="+Country);
		sb.append(",Region="+Region);
		sb.append(",PostalCode="+PostalCode);
		sb.append(",CharityID="+String.valueOf(CharityID));
		sb.append(",WebMemberID="+WebMemberID);
		sb.append(",UserUniqueID="+String.valueOf(UserUniqueID));
		sb.append(",errorCode="+errorCode);
		sb.append(",errorMessage="+errorMessage);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row37Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.UserID, other.UserID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class AddModeratorUserStruct implements routines.system.IPersistableRow<AddModeratorUserStruct> {
    final static byte[] commonByteArrayLock_IMPORTINGEVMDATA_ImportingEVM = new byte[0];
    static byte[] commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int UserID;

				public int getUserID () {
					return this.UserID;
				}
				
			    public String Username;

				public String getUsername () {
					return this.Username;
				}
				
			    public String Password;

				public String getPassword () {
					return this.Password;
				}
				
			    public String DisplayName;

				public String getDisplayName () {
					return this.DisplayName;
				}
				
			    public String Email;

				public String getEmail () {
					return this.Email;
				}
				
			    public String Telephone;

				public String getTelephone () {
					return this.Telephone;
				}
				
			    public boolean Enabled;

				public boolean getEnabled () {
					return this.Enabled;
				}
				
			    public Integer CompanyID;

				public Integer getCompanyID () {
					return this.CompanyID;
				}
				
			    public Integer SalesPersonID;

				public Integer getSalesPersonID () {
					return this.SalesPersonID;
				}
				
			    public Integer RoleID;

				public Integer getRoleID () {
					return this.RoleID;
				}
				
			    public Boolean MustChangePassword;

				public Boolean getMustChangePassword () {
					return this.MustChangePassword;
				}
				
			    public String Address1;

				public String getAddress1 () {
					return this.Address1;
				}
				
			    public String Address2;

				public String getAddress2 () {
					return this.Address2;
				}
				
			    public String City;

				public String getCity () {
					return this.City;
				}
				
			    public String Country;

				public String getCountry () {
					return this.Country;
				}
				
			    public String Region;

				public String getRegion () {
					return this.Region;
				}
				
			    public String PostalCode;

				public String getPostalCode () {
					return this.PostalCode;
				}
				
			    public Integer CharityID;

				public Integer getCharityID () {
					return this.CharityID;
				}
				
			    public String WebMemberID;

				public String getWebMemberID () {
					return this.WebMemberID;
				}
				
			    public Object UserUniqueID;

				public Object getUserUniqueID () {
					return this.UserUniqueID;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.UserID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final AddModeratorUserStruct other = (AddModeratorUserStruct) obj;
		
						if (this.UserID != other.UserID)
							return false;
					

		return true;
    }

	public void copyDataTo(AddModeratorUserStruct other) {

		other.UserID = this.UserID;
	            other.Username = this.Username;
	            other.Password = this.Password;
	            other.DisplayName = this.DisplayName;
	            other.Email = this.Email;
	            other.Telephone = this.Telephone;
	            other.Enabled = this.Enabled;
	            other.CompanyID = this.CompanyID;
	            other.SalesPersonID = this.SalesPersonID;
	            other.RoleID = this.RoleID;
	            other.MustChangePassword = this.MustChangePassword;
	            other.Address1 = this.Address1;
	            other.Address2 = this.Address2;
	            other.City = this.City;
	            other.Country = this.Country;
	            other.Region = this.Region;
	            other.PostalCode = this.PostalCode;
	            other.CharityID = this.CharityID;
	            other.WebMemberID = this.WebMemberID;
	            other.UserUniqueID = this.UserUniqueID;
	            
	}

	public void copyKeysDataTo(AddModeratorUserStruct other) {

		other.UserID = this.UserID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IMPORTINGEVMDATA_ImportingEVM.length) {
				if(length < 1024 && commonByteArray_IMPORTINGEVMDATA_ImportingEVM.length == 0) {
   					commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[1024];
				} else {
   					commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IMPORTINGEVMDATA_ImportingEVM, 0, length);
			strReturn = new String(commonByteArray_IMPORTINGEVMDATA_ImportingEVM, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IMPORTINGEVMDATA_ImportingEVM) {

        	try {

        		int length = 0;
		
			        this.UserID = dis.readInt();
					
					this.Username = readString(dis);
					
					this.Password = readString(dis);
					
					this.DisplayName = readString(dis);
					
					this.Email = readString(dis);
					
					this.Telephone = readString(dis);
					
			        this.Enabled = dis.readBoolean();
					
						this.CompanyID = readInteger(dis);
					
						this.SalesPersonID = readInteger(dis);
					
						this.RoleID = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.MustChangePassword = null;
           				} else {
           			    	this.MustChangePassword = dis.readBoolean();
           				}
					
					this.Address1 = readString(dis);
					
					this.Address2 = readString(dis);
					
					this.City = readString(dis);
					
					this.Country = readString(dis);
					
					this.Region = readString(dis);
					
					this.PostalCode = readString(dis);
					
						this.CharityID = readInteger(dis);
					
					this.WebMemberID = readString(dis);
					
						this.UserUniqueID = (Object) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.UserID);
					
					// String
				
						writeString(this.Username,dos);
					
					// String
				
						writeString(this.Password,dos);
					
					// String
				
						writeString(this.DisplayName,dos);
					
					// String
				
						writeString(this.Email,dos);
					
					// String
				
						writeString(this.Telephone,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.Enabled);
					
					// Integer
				
						writeInteger(this.CompanyID,dos);
					
					// Integer
				
						writeInteger(this.SalesPersonID,dos);
					
					// Integer
				
						writeInteger(this.RoleID,dos);
					
					// Boolean
				
						if(this.MustChangePassword == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.MustChangePassword);
		            	}
					
					// String
				
						writeString(this.Address1,dos);
					
					// String
				
						writeString(this.Address2,dos);
					
					// String
				
						writeString(this.City,dos);
					
					// String
				
						writeString(this.Country,dos);
					
					// String
				
						writeString(this.Region,dos);
					
					// String
				
						writeString(this.PostalCode,dos);
					
					// Integer
				
						writeInteger(this.CharityID,dos);
					
					// String
				
						writeString(this.WebMemberID,dos);
					
					// Object
				
       			    	dos.writeObject(this.UserUniqueID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("UserID="+String.valueOf(UserID));
		sb.append(",Username="+Username);
		sb.append(",Password="+Password);
		sb.append(",DisplayName="+DisplayName);
		sb.append(",Email="+Email);
		sb.append(",Telephone="+Telephone);
		sb.append(",Enabled="+String.valueOf(Enabled));
		sb.append(",CompanyID="+String.valueOf(CompanyID));
		sb.append(",SalesPersonID="+String.valueOf(SalesPersonID));
		sb.append(",RoleID="+String.valueOf(RoleID));
		sb.append(",MustChangePassword="+String.valueOf(MustChangePassword));
		sb.append(",Address1="+Address1);
		sb.append(",Address2="+Address2);
		sb.append(",City="+City);
		sb.append(",Country="+Country);
		sb.append(",Region="+Region);
		sb.append(",PostalCode="+PostalCode);
		sb.append(",CharityID="+String.valueOf(CharityID));
		sb.append(",WebMemberID="+WebMemberID);
		sb.append(",UserUniqueID="+String.valueOf(UserUniqueID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(AddModeratorUserStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.UserID, other.UserID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row33Struct implements routines.system.IPersistableRow<row33Struct> {
    final static byte[] commonByteArrayLock_IMPORTINGEVMDATA_ImportingEVM = new byte[0];
    static byte[] commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[0];

	
			    public String CompanyName;

				public String getCompanyName () {
					return this.CompanyName;
				}
				
			    public String ModeratorCode;

				public String getModeratorCode () {
					return this.ModeratorCode;
				}
				
			    public String ParticipantCode;

				public String getParticipantCode () {
					return this.ParticipantCode;
				}
				
			    public String ModeratorName;

				public String getModeratorName () {
					return this.ModeratorName;
				}
				
			    public String Email;

				public String getEmail () {
					return this.Email;
				}
				
			    public String Password;

				public String getPassword () {
					return this.Password;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IMPORTINGEVMDATA_ImportingEVM.length) {
				if(length < 1024 && commonByteArray_IMPORTINGEVMDATA_ImportingEVM.length == 0) {
   					commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[1024];
				} else {
   					commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IMPORTINGEVMDATA_ImportingEVM, 0, length);
			strReturn = new String(commonByteArray_IMPORTINGEVMDATA_ImportingEVM, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IMPORTINGEVMDATA_ImportingEVM) {

        	try {

        		int length = 0;
		
					this.CompanyName = readString(dis);
					
					this.ModeratorCode = readString(dis);
					
					this.ParticipantCode = readString(dis);
					
					this.ModeratorName = readString(dis);
					
					this.Email = readString(dis);
					
					this.Password = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CompanyName,dos);
					
					// String
				
						writeString(this.ModeratorCode,dos);
					
					// String
				
						writeString(this.ParticipantCode,dos);
					
					// String
				
						writeString(this.ModeratorName,dos);
					
					// String
				
						writeString(this.Email,dos);
					
					// String
				
						writeString(this.Password,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CompanyName="+CompanyName);
		sb.append(",ModeratorCode="+ModeratorCode);
		sb.append(",ParticipantCode="+ParticipantCode);
		sb.append(",ModeratorName="+ModeratorName);
		sb.append(",Email="+Email);
		sb.append(",Password="+Password);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row33Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row31Struct implements routines.system.IPersistableRow<row31Struct> {
    final static byte[] commonByteArrayLock_IMPORTINGEVMDATA_ImportingEVM = new byte[0];
    static byte[] commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[0];

	
			    public String CompanyName;

				public String getCompanyName () {
					return this.CompanyName;
				}
				
			    public String ModeratorCode;

				public String getModeratorCode () {
					return this.ModeratorCode;
				}
				
			    public String ParticipantCode;

				public String getParticipantCode () {
					return this.ParticipantCode;
				}
				
			    public String ModeratorName;

				public String getModeratorName () {
					return this.ModeratorName;
				}
				
			    public String Email;

				public String getEmail () {
					return this.Email;
				}
				
			    public String Password;

				public String getPassword () {
					return this.Password;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IMPORTINGEVMDATA_ImportingEVM.length) {
				if(length < 1024 && commonByteArray_IMPORTINGEVMDATA_ImportingEVM.length == 0) {
   					commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[1024];
				} else {
   					commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IMPORTINGEVMDATA_ImportingEVM, 0, length);
			strReturn = new String(commonByteArray_IMPORTINGEVMDATA_ImportingEVM, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IMPORTINGEVMDATA_ImportingEVM) {

        	try {

        		int length = 0;
		
					this.CompanyName = readString(dis);
					
					this.ModeratorCode = readString(dis);
					
					this.ParticipantCode = readString(dis);
					
					this.ModeratorName = readString(dis);
					
					this.Email = readString(dis);
					
					this.Password = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CompanyName,dos);
					
					// String
				
						writeString(this.ModeratorCode,dos);
					
					// String
				
						writeString(this.ParticipantCode,dos);
					
					// String
				
						writeString(this.ModeratorName,dos);
					
					// String
				
						writeString(this.Email,dos);
					
					// String
				
						writeString(this.Password,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CompanyName="+CompanyName);
		sb.append(",ModeratorCode="+ModeratorCode);
		sb.append(",ParticipantCode="+ParticipantCode);
		sb.append(",ModeratorName="+ModeratorName);
		sb.append(",Email="+Email);
		sb.append(",Password="+Password);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row31Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tFileInputDelimited_6Struct implements routines.system.IPersistableRow<after_tFileInputDelimited_6Struct> {
    final static byte[] commonByteArrayLock_IMPORTINGEVMDATA_ImportingEVM = new byte[0];
    static byte[] commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[0];

	
			    public String CompanyName;

				public String getCompanyName () {
					return this.CompanyName;
				}
				
			    public String ModeratorCode;

				public String getModeratorCode () {
					return this.ModeratorCode;
				}
				
			    public String ParticipantCode;

				public String getParticipantCode () {
					return this.ParticipantCode;
				}
				
			    public String ModeratorName;

				public String getModeratorName () {
					return this.ModeratorName;
				}
				
			    public String Email;

				public String getEmail () {
					return this.Email;
				}
				
			    public String Password;

				public String getPassword () {
					return this.Password;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_IMPORTINGEVMDATA_ImportingEVM.length) {
				if(length < 1024 && commonByteArray_IMPORTINGEVMDATA_ImportingEVM.length == 0) {
   					commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[1024];
				} else {
   					commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_IMPORTINGEVMDATA_ImportingEVM, 0, length);
			strReturn = new String(commonByteArray_IMPORTINGEVMDATA_ImportingEVM, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IMPORTINGEVMDATA_ImportingEVM) {

        	try {

        		int length = 0;
		
					this.CompanyName = readString(dis);
					
					this.ModeratorCode = readString(dis);
					
					this.ParticipantCode = readString(dis);
					
					this.ModeratorName = readString(dis);
					
					this.Email = readString(dis);
					
					this.Password = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CompanyName,dos);
					
					// String
				
						writeString(this.ModeratorCode,dos);
					
					// String
				
						writeString(this.ParticipantCode,dos);
					
					// String
				
						writeString(this.ModeratorName,dos);
					
					// String
				
						writeString(this.Email,dos);
					
					// String
				
						writeString(this.Password,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CompanyName="+CompanyName);
		sb.append(",ModeratorCode="+ModeratorCode);
		sb.append(",ParticipantCode="+ParticipantCode);
		sb.append(",ModeratorName="+ModeratorName);
		sb.append(",Email="+Email);
		sb.append(",Password="+Password);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tFileInputDelimited_6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_5Process(globalMap);

		row31Struct row31 = new row31Struct();
row31Struct row33 = row31;
AddModeratorUserStruct AddModeratorUser = new AddModeratorUserStruct();
row36Struct row36 = new row36Struct();
row37Struct row37 = new row37Struct();







	
	/**
	 * [tLogRow_26 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_26", false);
		start_Hash.put("tLogRow_26", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_26";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("row36"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tLogRow_26 = 0;
		

	///////////////////////
	
         class Util_tLogRow_26 {

        String[] des_top = { ".", ".", "-", "+" };

        String[] des_head = { "|=", "=|", "-", "+" };

        String[] des_bottom = { "'", "'", "-", "+" };

        String name="";

        java.util.List<String[]> list = new java.util.ArrayList<String[]>();

        int[] colLengths = new int[20];

        public void addRow(String[] row) {

            for (int i = 0; i < 20; i++) {
                if (row[i]!=null) {
                  colLengths[i] = Math.max(colLengths[i], row[i].length());
                }
            }
            list.add(row);
        }

        public void setTableName(String name) {

            this.name = name;
        }

            public StringBuilder format() {
            
                StringBuilder sb = new StringBuilder();
  
            
                    sb.append(print(des_top));
    
                    int totals = 0;
                    for (int i = 0; i < colLengths.length; i++) {
                        totals = totals + colLengths[i];
                    }
    
                    // name
                    sb.append("|");
                    int k = 0;
                    for (k = 0; k < (totals + 19 - name.length()) / 2; k++) {
                        sb.append(' ');
                    }
                    sb.append(name);
                    for (int i = 0; i < totals + 19 - name.length() - k; i++) {
                        sb.append(' ');
                    }
                    sb.append("|\n");

                    // head and rows
                    sb.append(print(des_head));
                    for (int i = 0; i < list.size(); i++) {
    
                        String[] row = list.get(i);
    
                        java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());
                        
                        StringBuilder sbformat = new StringBuilder();                                             
        			        sbformat.append("|%1$-");
        			        sbformat.append(colLengths[0]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%2$-");
        			        sbformat.append(colLengths[1]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%3$-");
        			        sbformat.append(colLengths[2]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%4$-");
        			        sbformat.append(colLengths[3]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%5$-");
        			        sbformat.append(colLengths[4]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%6$-");
        			        sbformat.append(colLengths[5]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%7$-");
        			        sbformat.append(colLengths[6]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%8$-");
        			        sbformat.append(colLengths[7]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%9$-");
        			        sbformat.append(colLengths[8]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%10$-");
        			        sbformat.append(colLengths[9]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%11$-");
        			        sbformat.append(colLengths[10]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%12$-");
        			        sbformat.append(colLengths[11]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%13$-");
        			        sbformat.append(colLengths[12]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%14$-");
        			        sbformat.append(colLengths[13]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%15$-");
        			        sbformat.append(colLengths[14]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%16$-");
        			        sbformat.append(colLengths[15]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%17$-");
        			        sbformat.append(colLengths[16]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%18$-");
        			        sbformat.append(colLengths[17]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%19$-");
        			        sbformat.append(colLengths[18]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%20$-");
        			        sbformat.append(colLengths[19]);
        			        sbformat.append("s");
        			                      
                        sbformat.append("|\n");                    
       
                        formatter.format(sbformat.toString(), (Object[])row);	
                                
                        sb.append(formatter.toString());
                        if (i == 0)
                            sb.append(print(des_head)); // print the head
                    }
    
                    // end
                    sb.append(print(des_bottom));
                    return sb;
                }
            

            private StringBuilder print(String[] fillChars) {
                StringBuilder sb = new StringBuilder();
                //first column
                sb.append(fillChars[0]);                
                    for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);	                

                    for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[4] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[5] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[6] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[7] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[8] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[9] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[10] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[11] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[12] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[13] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[14] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[15] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[16] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[17] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[18] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                
                    //last column
                    for (int i = 0; i < colLengths[19] - fillChars[1].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }         
                sb.append(fillChars[1]);
                sb.append("\n");               
                return sb;
            }
            
            public boolean isTableEmpty(){
            	if (list.size() > 1)
            		return false;
            	return true;
            }
        }
        Util_tLogRow_26 util_tLogRow_26 = new Util_tLogRow_26();
        util_tLogRow_26.setTableName("tLogRow_26");
        util_tLogRow_26.addRow(new String[]{"UserID","Username","Password","DisplayName","Email","Telephone","Enabled","CompanyID","SalesPersonID","RoleID","MustChangePassword","Address1","Address2","City","Country","Region","PostalCode","CharityID","WebMemberID","UserUniqueID",});        
 		StringBuilder strBuffer_tLogRow_26 = null;
		int nb_line_tLogRow_26 = 0;
///////////////////////    			



 



/**
 * [tLogRow_26 begin ] stop
 */




	
	/**
	 * [tLogRow_25 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_25", false);
		start_Hash.put("tLogRow_25", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_25";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("row37"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tLogRow_25 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_25 = "|";
		java.io.PrintStream consoleOut_tLogRow_25 = null;	

 		StringBuilder strBuffer_tLogRow_25 = null;
		int nb_line_tLogRow_25 = 0;
///////////////////////    			



 



/**
 * [tLogRow_25 begin ] stop
 */



	
	/**
	 * [tDBOutput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_5", false);
		start_Hash.put("tDBOutput_5", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_5";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("AddModeratorUser"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tDBOutput_5 = 0;
		



int nb_line_tDBOutput_5 = 0;
int nb_line_update_tDBOutput_5 = 0;
int nb_line_inserted_tDBOutput_5 = 0;
int nb_line_deleted_tDBOutput_5 = 0;
int nb_line_rejected_tDBOutput_5 = 0;

int deletedCount_tDBOutput_5=0;
int updatedCount_tDBOutput_5=0;
int insertedCount_tDBOutput_5=0;
int rejectedCount_tDBOutput_5=0;
String dbschema_tDBOutput_5 = null;
String tableName_tDBOutput_5 = null;
boolean whetherReject_tDBOutput_5 = false;

java.util.Calendar calendar_tDBOutput_5 = java.util.Calendar.getInstance();
long year1_tDBOutput_5 = TalendDate.parseDate("yyyy-MM-dd","0001-01-01").getTime();
long year2_tDBOutput_5 = TalendDate.parseDate("yyyy-MM-dd","1753-01-01").getTime();
long year10000_tDBOutput_5 = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss","9999-12-31 24:00:00").getTime();
long date_tDBOutput_5;

java.util.Calendar calendar_datetimeoffset_tDBOutput_5 = java.util.Calendar.getInstance(java.util.TimeZone.getTimeZone("UTC"));

        int insertKeyCount_tDBOutput_5 = 1;
        if(insertKeyCount_tDBOutput_5 < 1) {
            throw new RuntimeException("For insert if not exist, Schema must have a key");
        }
	
java.sql.Connection conn_tDBOutput_5 = null;
String dbUser_tDBOutput_5 = null;
	dbschema_tDBOutput_5 = (String)globalMap.get("dbschema_tDBConnection_1");
	conn_tDBOutput_5 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	

if(dbschema_tDBOutput_5 == null || dbschema_tDBOutput_5.trim().length() == 0) {
    tableName_tDBOutput_5 = "User";
} else {
    tableName_tDBOutput_5 = dbschema_tDBOutput_5 + "].[" + "User";
}
	int count_tDBOutput_5=0;

        java.sql.PreparedStatement pstmt_tDBOutput_5 = conn_tDBOutput_5.prepareStatement("SELECT COUNT(1) FROM [" + tableName_tDBOutput_5 + "] WHERE [UserID] = ?");
        resourceMap.put("pstmt_tDBOutput_5", pstmt_tDBOutput_5);
        String insert_tDBOutput_5 = "INSERT INTO [" + tableName_tDBOutput_5 + "] ([UserID],[Username],[Password],[DisplayName],[Email],[Telephone],[Enabled],[CompanyID],[SalesPersonID],[RoleID],[MustChangePassword],[Address1],[Address2],[City],[Country],[Region],[PostalCode],[CharityID],[WebMemberID],[UserUniqueID]) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
        java.sql.PreparedStatement pstmtInsert_tDBOutput_5 = conn_tDBOutput_5.prepareStatement(insert_tDBOutput_5);
        resourceMap.put("pstmtInsert_tDBOutput_5", pstmtInsert_tDBOutput_5);
 	boolean isShareIdentity_tDBOutput_5 = globalMap.get("shareIdentitySetting_tDBConnection_1") != null && (Boolean)globalMap.get("shareIdentitySetting_tDBConnection_1") == true;
        java.sql.Statement stmt_tDBOutput_5 = conn_tDBOutput_5.createStatement();
	        if ( !isShareIdentity_tDBOutput_5 ) {
	            stmt_tDBOutput_5.execute("SET IDENTITY_INSERT ["+ tableName_tDBOutput_5 +"] ON");
	        }

 



/**
 * [tDBOutput_5 begin ] stop
 */



	
	/**
	 * [tMap_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_5", false);
		start_Hash.put("tMap_5", System.currentTimeMillis());
		
	
	currentComponent="tMap_5";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("row33"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tMap_5 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row34Struct> tHash_Lookup_row34 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row34Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row34Struct>) 
					globalMap.get( "tHash_Lookup_row34" ))
					;					
					
	
		tHash_Lookup_row34.initGet();
	

row34Struct row34HashKey = new row34Struct();
row34Struct row34Default = new row34Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_5__Struct  {
	String username;
}
Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
// ###############################

// ###############################
// # Outputs initialization
AddModeratorUserStruct AddModeratorUser_tmp = new AddModeratorUserStruct();
// ###############################

        
        



        









 



/**
 * [tMap_5 begin ] stop
 */



	
	/**
	 * [tLogRow_22 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_22", false);
		start_Hash.put("tLogRow_22", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_22";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("row31"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tLogRow_22 = 0;
		

	///////////////////////
	
         class Util_tLogRow_22 {

        String[] des_top = { ".", ".", "-", "+" };

        String[] des_head = { "|=", "=|", "-", "+" };

        String[] des_bottom = { "'", "'", "-", "+" };

        String name="";

        java.util.List<String[]> list = new java.util.ArrayList<String[]>();

        int[] colLengths = new int[6];

        public void addRow(String[] row) {

            for (int i = 0; i < 6; i++) {
                if (row[i]!=null) {
                  colLengths[i] = Math.max(colLengths[i], row[i].length());
                }
            }
            list.add(row);
        }

        public void setTableName(String name) {

            this.name = name;
        }

            public StringBuilder format() {
            
                StringBuilder sb = new StringBuilder();
  
            
                    sb.append(print(des_top));
    
                    int totals = 0;
                    for (int i = 0; i < colLengths.length; i++) {
                        totals = totals + colLengths[i];
                    }
    
                    // name
                    sb.append("|");
                    int k = 0;
                    for (k = 0; k < (totals + 5 - name.length()) / 2; k++) {
                        sb.append(' ');
                    }
                    sb.append(name);
                    for (int i = 0; i < totals + 5 - name.length() - k; i++) {
                        sb.append(' ');
                    }
                    sb.append("|\n");

                    // head and rows
                    sb.append(print(des_head));
                    for (int i = 0; i < list.size(); i++) {
    
                        String[] row = list.get(i);
    
                        java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());
                        
                        StringBuilder sbformat = new StringBuilder();                                             
        			        sbformat.append("|%1$-");
        			        sbformat.append(colLengths[0]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%2$-");
        			        sbformat.append(colLengths[1]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%3$-");
        			        sbformat.append(colLengths[2]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%4$-");
        			        sbformat.append(colLengths[3]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%5$-");
        			        sbformat.append(colLengths[4]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%6$-");
        			        sbformat.append(colLengths[5]);
        			        sbformat.append("s");
        			                      
                        sbformat.append("|\n");                    
       
                        formatter.format(sbformat.toString(), (Object[])row);	
                                
                        sb.append(formatter.toString());
                        if (i == 0)
                            sb.append(print(des_head)); // print the head
                    }
    
                    // end
                    sb.append(print(des_bottom));
                    return sb;
                }
            

            private StringBuilder print(String[] fillChars) {
                StringBuilder sb = new StringBuilder();
                //first column
                sb.append(fillChars[0]);                
                    for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);	                

                    for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[4] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                
                    //last column
                    for (int i = 0; i < colLengths[5] - fillChars[1].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }         
                sb.append(fillChars[1]);
                sb.append("\n");               
                return sb;
            }
            
            public boolean isTableEmpty(){
            	if (list.size() > 1)
            		return false;
            	return true;
            }
        }
        Util_tLogRow_22 util_tLogRow_22 = new Util_tLogRow_22();
        util_tLogRow_22.setTableName("ModeratorCompanyLog");
        util_tLogRow_22.addRow(new String[]{"CompanyName","ModeratorCode","ParticipantCode","ModeratorName","Email","Password",});        
 		StringBuilder strBuffer_tLogRow_22 = null;
		int nb_line_tLogRow_22 = 0;
///////////////////////    			



 



/**
 * [tLogRow_22 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_6", false);
		start_Hash.put("tFileInputDelimited_6", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_6";

	
		int tos_count_tFileInputDelimited_6 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_6 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_6 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_6 = null;
				int limit_tFileInputDelimited_6 = -1;
				try{
					
						Object filename_tFileInputDelimited_6 = context.Moderator_File;
						if(filename_tFileInputDelimited_6 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_6 = 0, random_value_tFileInputDelimited_6 = -1;
			if(footer_value_tFileInputDelimited_6 >0 || random_value_tFileInputDelimited_6 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_6 = new org.talend.fileprocess.FileInputDelimited(context.Moderator_File, "ISO-8859-15",",","\n",true,1,0,
									limit_tFileInputDelimited_6
								,-1, false);
						} catch(java.lang.Exception e) {
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_6!=null && fid_tFileInputDelimited_6.nextRecord()) {
						rowstate_tFileInputDelimited_6.reset();
						
			    						row31 = null;			
												
									boolean whetherReject_tFileInputDelimited_6 = false;
									row31 = new row31Struct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_6 = 0;
				
					columnIndexWithD_tFileInputDelimited_6 = 0;
					
							row31.CompanyName = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);
						
				
					columnIndexWithD_tFileInputDelimited_6 = 1;
					
							row31.ModeratorCode = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);
						
				
					columnIndexWithD_tFileInputDelimited_6 = 2;
					
							row31.ParticipantCode = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);
						
				
					columnIndexWithD_tFileInputDelimited_6 = 3;
					
							row31.ModeratorName = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);
						
				
					columnIndexWithD_tFileInputDelimited_6 = 4;
					
							row31.Email = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);
						
				
					columnIndexWithD_tFileInputDelimited_6 = 5;
					
							row31.Password = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);
						
				
				
										
										if(rowstate_tFileInputDelimited_6.getException()!=null) {
											throw rowstate_tFileInputDelimited_6.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
			        					whetherReject_tFileInputDelimited_6 = true;
			        					
			                					System.err.println(e.getMessage());
			                					row31 = null;
			                				
			    					}
								

 



/**
 * [tFileInputDelimited_6 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_6 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_6";

	

 


	tos_count_tFileInputDelimited_6++;

/**
 * [tFileInputDelimited_6 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_6";

	

 



/**
 * [tFileInputDelimited_6 process_data_begin ] stop
 */
// Start of branch "row31"
if(row31 != null) { 
			row37 = null;



	
	/**
	 * [tLogRow_22 main ] start
	 */

	

	
	
	currentComponent="tLogRow_22";

	

			//row31
			//row31


			
				
				if(execStat){
					runStat.updateStatOnConnection("row31"+iterateId,1, 1);
				}
				
				
				
			

		
///////////////////////		
						

				
				String[] row_tLogRow_22 = new String[6];
   				
	    		if(row31.CompanyName != null) { //              
                 row_tLogRow_22[0]=    						    
				                String.valueOf(row31.CompanyName)			
					          ;	
							
	    		} //			
    			   				
	    		if(row31.ModeratorCode != null) { //              
                 row_tLogRow_22[1]=    						    
				                String.valueOf(row31.ModeratorCode)			
					          ;	
							
	    		} //			
    			   				
	    		if(row31.ParticipantCode != null) { //              
                 row_tLogRow_22[2]=    						    
				                String.valueOf(row31.ParticipantCode)			
					          ;	
							
	    		} //			
    			   				
	    		if(row31.ModeratorName != null) { //              
                 row_tLogRow_22[3]=    						    
				                String.valueOf(row31.ModeratorName)			
					          ;	
							
	    		} //			
    			   				
	    		if(row31.Email != null) { //              
                 row_tLogRow_22[4]=    						    
				                String.valueOf(row31.Email)			
					          ;	
							
	    		} //			
    			   				
	    		if(row31.Password != null) { //              
                 row_tLogRow_22[5]=    						    
				                String.valueOf(row31.Password)			
					          ;	
							
	    		} //			
    			 

				util_tLogRow_22.addRow(row_tLogRow_22);	
				nb_line_tLogRow_22++;
//////

//////                    
                    
///////////////////////    			

 
     row33 = row31;


	tos_count_tLogRow_22++;

/**
 * [tLogRow_22 main ] stop
 */
	
	/**
	 * [tLogRow_22 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_22";

	

 



/**
 * [tLogRow_22 process_data_begin ] stop
 */

	
	/**
	 * [tMap_5 main ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

			//row33
			//row33


			
				
				if(execStat){
					runStat.updateStatOnConnection("row33"+iterateId,1, 1);
				}
				
				
				
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_5 = false;
		  boolean mainRowRejected_tMap_5 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row34" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow34 = false;
       		  	    	
       		  	    	
 							row34Struct row34ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_5) { // G_TM_M_020

								

								
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row34.lookup( row34HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row34.hasNext()) { // G_TM_M_090

  								
		  				
	  								
						
									
	
		  								forceLooprow34 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow34 = true;
			           		  	} // G 21
                    		  	
                    		

							row34Struct row34 = null;
                    		  	 
							

								while ((tHash_Lookup_row34 != null && tHash_Lookup_row34.hasNext()) || forceLooprow34) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row34'
									
                    		  	 
							   
                    		  	 
	       		  	    	row34Struct fromLookup_row34 = null;
							row34 = row34Default;
										 
							
								
								if(!forceLooprow34) { // G 46
								
							
								 
							
								
								fromLookup_row34 = tHash_Lookup_row34.next();

							

							if(fromLookup_row34 != null) {
								row34 = fromLookup_row34;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow34 = false;
									 	
							
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_5__Struct Var = Var__tMap_5;
Var.username = StringHandling.EREPLACE(row33.ModeratorName," ","");// ###############################
        // ###############################
        // # Output tables

AddModeratorUser = null;


// # Output table : 'AddModeratorUser'
AddModeratorUser_tmp.UserID = Numeric.sequence("s5", row34.UserID + 1, 1) ;
AddModeratorUser_tmp.Username = StringHandling.DOWNCASE(Var.username) ;
AddModeratorUser_tmp.Password = row33.Password ;
AddModeratorUser_tmp.DisplayName = row33.ModeratorName ;
AddModeratorUser_tmp.Email = row33.Email ;
AddModeratorUser_tmp.Telephone = null;
AddModeratorUser_tmp.Enabled = row34.Enabled;
AddModeratorUser_tmp.CompanyID = null;
AddModeratorUser_tmp.SalesPersonID = null;
AddModeratorUser_tmp.RoleID = row34.RoleID ;
AddModeratorUser_tmp.MustChangePassword = row34.MustChangePassword;
AddModeratorUser_tmp.Address1 = null;
AddModeratorUser_tmp.Address2 = null;
AddModeratorUser_tmp.City = null;
AddModeratorUser_tmp.Country = null;
AddModeratorUser_tmp.Region = null;
AddModeratorUser_tmp.PostalCode = null;
AddModeratorUser_tmp.CharityID = null;
AddModeratorUser_tmp.WebMemberID = null;
AddModeratorUser_tmp.UserUniqueID = row34.UserUniqueID ;
AddModeratorUser = AddModeratorUser_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_5 = false;










 


	tos_count_tMap_5++;

/**
 * [tMap_5 main ] stop
 */
	
	/**
	 * [tMap_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 process_data_begin ] stop
 */
// Start of branch "AddModeratorUser"
if(AddModeratorUser != null) { 
			row37 = null;



	
	/**
	 * [tDBOutput_5 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	

			//AddModeratorUser
			//AddModeratorUser


			
				
				if(execStat){
					runStat.updateStatOnConnection("AddModeratorUser"+iterateId,1, 1);
				}
				
				
				
			

		



            row36 = null;
            row37 = null;
	        if(isShareIdentity_tDBOutput_5) {
	            stmt_tDBOutput_5.execute("SET IDENTITY_INSERT ["+ tableName_tDBOutput_5 +"] ON");
	        }
        whetherReject_tDBOutput_5 = false;

                pstmt_tDBOutput_5.setInt(1, AddModeratorUser.UserID);


        java.sql.ResultSet rs_tDBOutput_5 = pstmt_tDBOutput_5.executeQuery();
        int checkCount_tDBOutput_5 = -1;
        while(rs_tDBOutput_5.next()) {
            checkCount_tDBOutput_5 = rs_tDBOutput_5.getInt(1);
        }

        if (checkCount_tDBOutput_5 < 1) {
            try {
                    pstmtInsert_tDBOutput_5.setInt(1, AddModeratorUser.UserID);

                    if(AddModeratorUser.Username == null) {
pstmtInsert_tDBOutput_5.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_5.setString(2, AddModeratorUser.Username);
}

                    if(AddModeratorUser.Password == null) {
pstmtInsert_tDBOutput_5.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_5.setString(3, AddModeratorUser.Password);
}

                    if(AddModeratorUser.DisplayName == null) {
pstmtInsert_tDBOutput_5.setNull(4, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_5.setString(4, AddModeratorUser.DisplayName);
}

                    if(AddModeratorUser.Email == null) {
pstmtInsert_tDBOutput_5.setNull(5, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_5.setString(5, AddModeratorUser.Email);
}

                    if(AddModeratorUser.Telephone == null) {
pstmtInsert_tDBOutput_5.setNull(6, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_5.setString(6, AddModeratorUser.Telephone);
}

                    pstmtInsert_tDBOutput_5.setBoolean(7, AddModeratorUser.Enabled);

                    if(AddModeratorUser.CompanyID == null) {
pstmtInsert_tDBOutput_5.setNull(8, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_5.setInt(8, AddModeratorUser.CompanyID);
}

                    if(AddModeratorUser.SalesPersonID == null) {
pstmtInsert_tDBOutput_5.setNull(9, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_5.setInt(9, AddModeratorUser.SalesPersonID);
}

                    if(AddModeratorUser.RoleID == null) {
pstmtInsert_tDBOutput_5.setNull(10, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_5.setInt(10, AddModeratorUser.RoleID);
}

                    if(AddModeratorUser.MustChangePassword == null) {
pstmtInsert_tDBOutput_5.setNull(11, java.sql.Types.BOOLEAN);
} else {pstmtInsert_tDBOutput_5.setBoolean(11, AddModeratorUser.MustChangePassword);
}

                    if(AddModeratorUser.Address1 == null) {
pstmtInsert_tDBOutput_5.setNull(12, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_5.setString(12, AddModeratorUser.Address1);
}

                    if(AddModeratorUser.Address2 == null) {
pstmtInsert_tDBOutput_5.setNull(13, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_5.setString(13, AddModeratorUser.Address2);
}

                    if(AddModeratorUser.City == null) {
pstmtInsert_tDBOutput_5.setNull(14, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_5.setString(14, AddModeratorUser.City);
}

                    if(AddModeratorUser.Country == null) {
pstmtInsert_tDBOutput_5.setNull(15, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_5.setString(15, AddModeratorUser.Country);
}

                    if(AddModeratorUser.Region == null) {
pstmtInsert_tDBOutput_5.setNull(16, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_5.setString(16, AddModeratorUser.Region);
}

                    if(AddModeratorUser.PostalCode == null) {
pstmtInsert_tDBOutput_5.setNull(17, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_5.setString(17, AddModeratorUser.PostalCode);
}

                    if(AddModeratorUser.CharityID == null) {
pstmtInsert_tDBOutput_5.setNull(18, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_5.setInt(18, AddModeratorUser.CharityID);
}

                    if(AddModeratorUser.WebMemberID == null) {
pstmtInsert_tDBOutput_5.setNull(19, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_5.setString(19, AddModeratorUser.WebMemberID);
}

                    if(AddModeratorUser.UserUniqueID == null) {
pstmtInsert_tDBOutput_5.setNull(20, java.sql.Types.OTHER);
} else {pstmtInsert_tDBOutput_5.setObject(20, AddModeratorUser.UserUniqueID);
}

                insertedCount_tDBOutput_5 = insertedCount_tDBOutput_5 + pstmtInsert_tDBOutput_5.executeUpdate();
                nb_line_tDBOutput_5++;
            } catch(java.lang.Exception e) {
				whetherReject_tDBOutput_5 = true;
            	nb_line_tDBOutput_5++;
            	
	            row37 = new row37Struct();
                    row37.UserID = AddModeratorUser.UserID;
                    row37.Username = AddModeratorUser.Username;
                    row37.Password = AddModeratorUser.Password;
                    row37.DisplayName = AddModeratorUser.DisplayName;
                    row37.Email = AddModeratorUser.Email;
                    row37.Telephone = AddModeratorUser.Telephone;
                    row37.Enabled = AddModeratorUser.Enabled;
                    row37.CompanyID = AddModeratorUser.CompanyID;
                    row37.SalesPersonID = AddModeratorUser.SalesPersonID;
                    row37.RoleID = AddModeratorUser.RoleID;
                    row37.MustChangePassword = AddModeratorUser.MustChangePassword;
                    row37.Address1 = AddModeratorUser.Address1;
                    row37.Address2 = AddModeratorUser.Address2;
                    row37.City = AddModeratorUser.City;
                    row37.Country = AddModeratorUser.Country;
                    row37.Region = AddModeratorUser.Region;
                    row37.PostalCode = AddModeratorUser.PostalCode;
                    row37.CharityID = AddModeratorUser.CharityID;
                    row37.WebMemberID = AddModeratorUser.WebMemberID;
                    row37.UserUniqueID = AddModeratorUser.UserUniqueID;
                	rejectedCount_tDBOutput_5 = rejectedCount_tDBOutput_5 + 1;
                	row37.errorCode = ((java.sql.SQLException)e).getSQLState();
                    row37.errorMessage = e.getMessage() + " - Line: " + tos_count_tDBOutput_5;
                }
            }
            if(!whetherReject_tDBOutput_5) {
                            row36 = new row36Struct();
                                row36.UserID = AddModeratorUser.UserID;
                                row36.Username = AddModeratorUser.Username;
                                row36.Password = AddModeratorUser.Password;
                                row36.DisplayName = AddModeratorUser.DisplayName;
                                row36.Email = AddModeratorUser.Email;
                                row36.Telephone = AddModeratorUser.Telephone;
                                row36.Enabled = AddModeratorUser.Enabled;
                                row36.CompanyID = AddModeratorUser.CompanyID;
                                row36.SalesPersonID = AddModeratorUser.SalesPersonID;
                                row36.RoleID = AddModeratorUser.RoleID;
                                row36.MustChangePassword = AddModeratorUser.MustChangePassword;
                                row36.Address1 = AddModeratorUser.Address1;
                                row36.Address2 = AddModeratorUser.Address2;
                                row36.City = AddModeratorUser.City;
                                row36.Country = AddModeratorUser.Country;
                                row36.Region = AddModeratorUser.Region;
                                row36.PostalCode = AddModeratorUser.PostalCode;
                                row36.CharityID = AddModeratorUser.CharityID;
                                row36.WebMemberID = AddModeratorUser.WebMemberID;
                                row36.UserUniqueID = AddModeratorUser.UserUniqueID;
            }
            	//////////batch execute by batch size///////
            	class LimitBytesHelper_tDBOutput_5{
            		public int limitBytePart1(int counter,java.sql.PreparedStatement pstmt_tDBOutput_5) throws Exception {
                try {
						
						for(int countEach_tDBOutput_5: pstmt_tDBOutput_5.executeBatch()) {
							if(countEach_tDBOutput_5 == -2 || countEach_tDBOutput_5 == -3) {
								break;
							}
							counter += countEach_tDBOutput_5;
						}
						
                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_tDBOutput_5 = 0;
					for(int countEach_tDBOutput_5: e.getUpdateCounts()) {
						counter += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
					}
				
            	    	
                		System.err.println(e.getMessage());
                	
               			 }
    				return counter;
            	}
            	
            	public int limitBytePart2(int counter,java.sql.PreparedStatement pstmt_tDBOutput_5) throws Exception {
                try {
                		
						for(int countEach_tDBOutput_5: pstmt_tDBOutput_5.executeBatch()) {
							if(countEach_tDBOutput_5 == -2 || countEach_tDBOutput_5 == -3) {
								break;
							}
							counter += countEach_tDBOutput_5;
						}
						
                }catch (java.sql.BatchUpdateException e){
                	
                	
					for(int countEach_tDBOutput_5: e.getUpdateCounts()) {
						counter += (countEach_tDBOutput_5 < 0 ? 0 : countEach_tDBOutput_5);
					}
					
            	    	
                        System.err.println(e.getMessage());
                	
                		}	
                	return counter;	
            	}
            }

    	////////////commit every////////////
    			
		if (isShareIdentity_tDBOutput_5 ) {
        	 stmt_tDBOutput_5.execute("SET IDENTITY_INSERT ["+ tableName_tDBOutput_5 +"] OFF");
        }

 


	tos_count_tDBOutput_5++;

/**
 * [tDBOutput_5 main ] stop
 */
	
	/**
	 * [tDBOutput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	

 



/**
 * [tDBOutput_5 process_data_begin ] stop
 */
// Start of branch "row36"
if(row36 != null) { 



	
	/**
	 * [tLogRow_26 main ] start
	 */

	

	
	
	currentComponent="tLogRow_26";

	

			//row36
			//row36


			
				
				if(execStat){
					runStat.updateStatOnConnection("row36"+iterateId,1, 1);
				}
				
				
				
			

		
///////////////////////		
						

				
				String[] row_tLogRow_26 = new String[20];
              
                 row_tLogRow_26[0]=    						    
				                String.valueOf(row36.UserID)			
					          ;	
										
    			   				
	    		if(row36.Username != null) { //              
                 row_tLogRow_26[1]=    						    
				                String.valueOf(row36.Username)			
					          ;	
							
	    		} //			
    			   				
	    		if(row36.Password != null) { //              
                 row_tLogRow_26[2]=    						    
				                String.valueOf(row36.Password)			
					          ;	
							
	    		} //			
    			   				
	    		if(row36.DisplayName != null) { //              
                 row_tLogRow_26[3]=    						    
				                String.valueOf(row36.DisplayName)			
					          ;	
							
	    		} //			
    			   				
	    		if(row36.Email != null) { //              
                 row_tLogRow_26[4]=    						    
				                String.valueOf(row36.Email)			
					          ;	
							
	    		} //			
    			   				
	    		if(row36.Telephone != null) { //              
                 row_tLogRow_26[5]=    						    
				                String.valueOf(row36.Telephone)			
					          ;	
							
	    		} //			
    			              
                 row_tLogRow_26[6]=    						    
				                String.valueOf(row36.Enabled)			
					          ;	
										
    			   				
	    		if(row36.CompanyID != null) { //              
                 row_tLogRow_26[7]=    						    
				                String.valueOf(row36.CompanyID)			
					          ;	
							
	    		} //			
    			   				
	    		if(row36.SalesPersonID != null) { //              
                 row_tLogRow_26[8]=    						    
				                String.valueOf(row36.SalesPersonID)			
					          ;	
							
	    		} //			
    			   				
	    		if(row36.RoleID != null) { //              
                 row_tLogRow_26[9]=    						    
				                String.valueOf(row36.RoleID)			
					          ;	
							
	    		} //			
    			   				
	    		if(row36.MustChangePassword != null) { //              
                 row_tLogRow_26[10]=    						    
				                String.valueOf(row36.MustChangePassword)			
					          ;	
							
	    		} //			
    			   				
	    		if(row36.Address1 != null) { //              
                 row_tLogRow_26[11]=    						    
				                String.valueOf(row36.Address1)			
					          ;	
							
	    		} //			
    			   				
	    		if(row36.Address2 != null) { //              
                 row_tLogRow_26[12]=    						    
				                String.valueOf(row36.Address2)			
					          ;	
							
	    		} //			
    			   				
	    		if(row36.City != null) { //              
                 row_tLogRow_26[13]=    						    
				                String.valueOf(row36.City)			
					          ;	
							
	    		} //			
    			   				
	    		if(row36.Country != null) { //              
                 row_tLogRow_26[14]=    						    
				                String.valueOf(row36.Country)			
					          ;	
							
	    		} //			
    			   				
	    		if(row36.Region != null) { //              
                 row_tLogRow_26[15]=    						    
				                String.valueOf(row36.Region)			
					          ;	
							
	    		} //			
    			   				
	    		if(row36.PostalCode != null) { //              
                 row_tLogRow_26[16]=    						    
				                String.valueOf(row36.PostalCode)			
					          ;	
							
	    		} //			
    			   				
	    		if(row36.CharityID != null) { //              
                 row_tLogRow_26[17]=    						    
				                String.valueOf(row36.CharityID)			
					          ;	
							
	    		} //			
    			   				
	    		if(row36.WebMemberID != null) { //              
                 row_tLogRow_26[18]=    						    
				                String.valueOf(row36.WebMemberID)			
					          ;	
							
	    		} //			
    			   				
	    		if(row36.UserUniqueID != null) { //              
                 row_tLogRow_26[19]=    						    
				                String.valueOf(row36.UserUniqueID)			
					          ;	
							
	    		} //			
    			 

				util_tLogRow_26.addRow(row_tLogRow_26);	
				nb_line_tLogRow_26++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_26++;

/**
 * [tLogRow_26 main ] stop
 */
	
	/**
	 * [tLogRow_26 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_26";

	

 



/**
 * [tLogRow_26 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_26 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_26";

	

 



/**
 * [tLogRow_26 process_data_end ] stop
 */

} // End of branch "row36"




// Start of branch "row37"
if(row37 != null) { 



	
	/**
	 * [tLogRow_25 main ] start
	 */

	

	
	
	currentComponent="tLogRow_25";

	

			//row37
			//row37


			
				
				if(execStat){
					runStat.updateStatOnConnection("row37"+iterateId,1, 1);
				}
				
				
				
			

		
///////////////////////		
						



				strBuffer_tLogRow_25 = new StringBuilder();




              
                    							
       
				strBuffer_tLogRow_25.append(
				                String.valueOf(row37.UserID)							
				);


							  			

    			strBuffer_tLogRow_25.append("|");
    			


   				
	    		if(row37.Username != null) { //              
                    							
       
				strBuffer_tLogRow_25.append(
				                String.valueOf(row37.Username)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_25.append("|");
    			


   				
	    		if(row37.Password != null) { //              
                    							
       
				strBuffer_tLogRow_25.append(
				                String.valueOf(row37.Password)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_25.append("|");
    			


   				
	    		if(row37.DisplayName != null) { //              
                    							
       
				strBuffer_tLogRow_25.append(
				                String.valueOf(row37.DisplayName)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_25.append("|");
    			


   				
	    		if(row37.Email != null) { //              
                    							
       
				strBuffer_tLogRow_25.append(
				                String.valueOf(row37.Email)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_25.append("|");
    			


   				
	    		if(row37.Telephone != null) { //              
                    							
       
				strBuffer_tLogRow_25.append(
				                String.valueOf(row37.Telephone)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_25.append("|");
    			


              
                    							
       
				strBuffer_tLogRow_25.append(
				                String.valueOf(row37.Enabled)							
				);


							  			

    			strBuffer_tLogRow_25.append("|");
    			


   				
	    		if(row37.CompanyID != null) { //              
                    							
       
				strBuffer_tLogRow_25.append(
				                String.valueOf(row37.CompanyID)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_25.append("|");
    			


   				
	    		if(row37.SalesPersonID != null) { //              
                    							
       
				strBuffer_tLogRow_25.append(
				                String.valueOf(row37.SalesPersonID)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_25.append("|");
    			


   				
	    		if(row37.RoleID != null) { //              
                    							
       
				strBuffer_tLogRow_25.append(
				                String.valueOf(row37.RoleID)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_25.append("|");
    			


   				
	    		if(row37.MustChangePassword != null) { //              
                    							
       
				strBuffer_tLogRow_25.append(
				                String.valueOf(row37.MustChangePassword)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_25.append("|");
    			


   				
	    		if(row37.Address1 != null) { //              
                    							
       
				strBuffer_tLogRow_25.append(
				                String.valueOf(row37.Address1)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_25.append("|");
    			


   				
	    		if(row37.Address2 != null) { //              
                    							
       
				strBuffer_tLogRow_25.append(
				                String.valueOf(row37.Address2)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_25.append("|");
    			


   				
	    		if(row37.City != null) { //              
                    							
       
				strBuffer_tLogRow_25.append(
				                String.valueOf(row37.City)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_25.append("|");
    			


   				
	    		if(row37.Country != null) { //              
                    							
       
				strBuffer_tLogRow_25.append(
				                String.valueOf(row37.Country)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_25.append("|");
    			


   				
	    		if(row37.Region != null) { //              
                    							
       
				strBuffer_tLogRow_25.append(
				                String.valueOf(row37.Region)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_25.append("|");
    			


   				
	    		if(row37.PostalCode != null) { //              
                    							
       
				strBuffer_tLogRow_25.append(
				                String.valueOf(row37.PostalCode)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_25.append("|");
    			


   				
	    		if(row37.CharityID != null) { //              
                    							
       
				strBuffer_tLogRow_25.append(
				                String.valueOf(row37.CharityID)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_25.append("|");
    			


   				
	    		if(row37.WebMemberID != null) { //              
                    							
       
				strBuffer_tLogRow_25.append(
				                String.valueOf(row37.WebMemberID)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_25.append("|");
    			


   				
	    		if(row37.UserUniqueID != null) { //              
                    							
       
				strBuffer_tLogRow_25.append(
				                String.valueOf(row37.UserUniqueID)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_25.append("|");
    			


   				
	    		if(row37.errorCode != null) { //              
                    							
       
				strBuffer_tLogRow_25.append(
				                String.valueOf(row37.errorCode)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_25.append("|");
    			


   				
	    		if(row37.errorMessage != null) { //              
                    							
       
				strBuffer_tLogRow_25.append(
				                String.valueOf(row37.errorMessage)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_25 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_25 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_25);
                    }
                    consoleOut_tLogRow_25.println(strBuffer_tLogRow_25.toString());
                    consoleOut_tLogRow_25.flush();
                    nb_line_tLogRow_25++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_25++;

/**
 * [tLogRow_25 main ] stop
 */
	
	/**
	 * [tLogRow_25 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_25";

	

 



/**
 * [tLogRow_25 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_25 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_25";

	

 



/**
 * [tLogRow_25 process_data_end ] stop
 */

} // End of branch "row37"




	
	/**
	 * [tDBOutput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	

 



/**
 * [tDBOutput_5 process_data_end ] stop
 */

} // End of branch "AddModeratorUser"



	
		} // close loop of lookup 'row34' // G_TM_M_043
	
	
	/**
	 * [tMap_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 process_data_end ] stop
 */



	
	/**
	 * [tLogRow_22 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_22";

	

 



/**
 * [tLogRow_22 process_data_end ] stop
 */

} // End of branch "row31"




	
	/**
	 * [tFileInputDelimited_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_6";

	

 



/**
 * [tFileInputDelimited_6 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_6 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_6";

	



            }
            }finally{
                if(!((Object)(context.Moderator_File) instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_6!=null){
                		fid_tFileInputDelimited_6.close();
                	}
                }
                if(fid_tFileInputDelimited_6!=null){
                	globalMap.put("tFileInputDelimited_6_NB_LINE", fid_tFileInputDelimited_6.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_6", true);
end_Hash.put("tFileInputDelimited_6", System.currentTimeMillis());




/**
 * [tFileInputDelimited_6 end ] stop
 */

	
	/**
	 * [tLogRow_22 end ] start
	 */

	

	
	
	currentComponent="tLogRow_22";

	


//////

                    
                    java.io.PrintStream consoleOut_tLogRow_22 = null;
                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_22 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_22 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_22);
                    }
                    
                    consoleOut_tLogRow_22.println(util_tLogRow_22.format().toString());
                    consoleOut_tLogRow_22.flush();
//////
globalMap.put("tLogRow_22_NB_LINE",nb_line_tLogRow_22);

///////////////////////    			

			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("row31"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tLogRow_22", true);
end_Hash.put("tLogRow_22", System.currentTimeMillis());




/**
 * [tLogRow_22 end ] stop
 */

	
	/**
	 * [tMap_5 end ] start
	 */

	

	
	
	currentComponent="tMap_5";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row34 != null) {
						tHash_Lookup_row34.endGet();
					}
					globalMap.remove( "tHash_Lookup_row34" );

					
					
				
// ###############################      





			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("row33"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tMap_5", true);
end_Hash.put("tMap_5", System.currentTimeMillis());




/**
 * [tMap_5 end ] stop
 */

	
	/**
	 * [tDBOutput_5 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	



		if ( isShareIdentity_tDBOutput_5 ) {
			String setIdentityInsertONSQL_tDBOutput_5 = "SET IDENTITY_INSERT ["+ tableName_tDBOutput_5 +"] ON";
			
        	stmt_tDBOutput_5.execute(setIdentityInsertONSQL_tDBOutput_5);
			
        }
        if(pstmtInsert_tDBOutput_5 != null){
            pstmtInsert_tDBOutput_5.close();
            resourceMap.remove("pstmtInsert_tDBOutput_5");
        }
        if(pstmt_tDBOutput_5 != null) {
            pstmt_tDBOutput_5.close();
            resourceMap.remove("pstmt_tDBOutput_5");
        }
    String setIdentityInsertOFFSQL_tDBOutput_5 = "SET IDENTITY_INSERT ["+ tableName_tDBOutput_5 +"] OFF";
    stmt_tDBOutput_5.execute(setIdentityInsertOFFSQL_tDBOutput_5);
    stmt_tDBOutput_5.close();
    resourceMap.put("statementClosed_tDBOutput_5", true);

	nb_line_deleted_tDBOutput_5=nb_line_deleted_tDBOutput_5+ deletedCount_tDBOutput_5;
	nb_line_update_tDBOutput_5=nb_line_update_tDBOutput_5 + updatedCount_tDBOutput_5;
	nb_line_inserted_tDBOutput_5=nb_line_inserted_tDBOutput_5 + insertedCount_tDBOutput_5;
	nb_line_rejected_tDBOutput_5=nb_line_rejected_tDBOutput_5 + rejectedCount_tDBOutput_5;
	
        globalMap.put("tDBOutput_5_NB_LINE",nb_line_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_UPDATED",nb_line_update_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_DELETED",nb_line_deleted_tDBOutput_5);
        globalMap.put("tDBOutput_5_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_5);
    
	

			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("AddModeratorUser"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tDBOutput_5", true);
end_Hash.put("tDBOutput_5", System.currentTimeMillis());




/**
 * [tDBOutput_5 end ] stop
 */

	
	/**
	 * [tLogRow_26 end ] start
	 */

	

	
	
	currentComponent="tLogRow_26";

	


//////

                    
                    java.io.PrintStream consoleOut_tLogRow_26 = null;
                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_26 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_26 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_26);
                    }
                    
                    consoleOut_tLogRow_26.println(util_tLogRow_26.format().toString());
                    consoleOut_tLogRow_26.flush();
//////
globalMap.put("tLogRow_26_NB_LINE",nb_line_tLogRow_26);

///////////////////////    			

			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("row36"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tLogRow_26", true);
end_Hash.put("tLogRow_26", System.currentTimeMillis());




/**
 * [tLogRow_26 end ] stop
 */




	
	/**
	 * [tLogRow_25 end ] start
	 */

	

	
	
	currentComponent="tLogRow_25";

	


//////
//////
globalMap.put("tLogRow_25_NB_LINE",nb_line_tLogRow_25);

///////////////////////    			

			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("row37"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tLogRow_25", true);
end_Hash.put("tLogRow_25", System.currentTimeMillis());




/**
 * [tLogRow_25 end ] stop
 */












				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_5"
					     			globalMap.remove("tHash_Lookup_row34"); 
				     			
				try{
					
	
	/**
	 * [tFileInputDelimited_6 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_6";

	

 



/**
 * [tFileInputDelimited_6 finally ] stop
 */

	
	/**
	 * [tLogRow_22 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_22";

	

 



/**
 * [tLogRow_22 finally ] stop
 */

	
	/**
	 * [tMap_5 finally ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 finally ] stop
 */

	
	/**
	 * [tDBOutput_5 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_5";

	



    if (resourceMap.get("statementClosed_tDBOutput_5") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_5 = null;
                if ((pstmtToClose_tDBOutput_5 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_5")) != null) {
                    pstmtToClose_tDBOutput_5.close();
                }
    }
 



/**
 * [tDBOutput_5 finally ] stop
 */

	
	/**
	 * [tLogRow_26 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_26";

	

 



/**
 * [tLogRow_26 finally ] stop
 */




	
	/**
	 * [tLogRow_25 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_25";

	

 



/**
 * [tLogRow_25 finally ] stop
 */












				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_6_SUBPROCESS_STATE", 1);
	}
	

public void tSendMail_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tSendMail_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tSendMail_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tSendMail_4", false);
		start_Hash.put("tSendMail_4", System.currentTimeMillis());
		
	
	currentComponent="tSendMail_4";

	
		int tos_count_tSendMail_4 = 0;
		

 



/**
 * [tSendMail_4 begin ] stop
 */
	
	/**
	 * [tSendMail_4 main ] start
	 */

	

	
	
	currentComponent="tSendMail_4";

	

 

	String smtpHost_tSendMail_4 = context.Email_host;
        String smtpPort_tSendMail_4 = context.Email_port;
	String from_tSendMail_4 = (context.Email_from);
    String to_tSendMail_4 = (context.Email_to).replace(";",",");
    String cc_tSendMail_4 = (("")==null || "".equals(""))?null:("").replace(";",",");
    String bcc_tSendMail_4 = (("")==null || "".equals(""))?null:("").replace(";",",");
    String subject_tSendMail_4 = ("Talend Error Notification");
    
	java.util.List<java.util.Map<String, String>> headers_tSendMail_4 = new java.util.ArrayList<java.util.Map<String,String>>();
	java.util.List<String> attachments_tSendMail_4 = new java.util.ArrayList<String>();
	java.util.List<String> contentTransferEncoding_tSendMail_4 = new java.util.ArrayList<String>();

	String message_tSendMail_4 = (("Error at process 4") == null || "".equals("Error at process 4")) ? "\"\"" : ("Error at process 4") ;
	java.util.Properties props_tSendMail_4 = System.getProperties();     
	props_tSendMail_4.put("mail.smtp.host", smtpHost_tSendMail_4);
	props_tSendMail_4.put("mail.smtp.port", smtpPort_tSendMail_4);
		props_tSendMail_4.put("mail.mime.encodefilename", "true");  
		props_tSendMail_4.put("mail.smtp.socketFactory.class", "javax.net.ssl.SSLSocketFactory");
		props_tSendMail_4.put("mail.smtp.socketFactory.fallback", "false");
		props_tSendMail_4.put("mail.smtp.socketFactory.port", smtpPort_tSendMail_4);     
	try {
		
		
			props_tSendMail_4.put("mail.smtp.auth", "true");
			javax.mail.Session session_tSendMail_4 = javax.mail.Session.getInstance(props_tSendMail_4, new javax.mail.Authenticator(){         
				protected javax.mail.PasswordAuthentication getPasswordAuthentication() {
				
                
	final String decryptedPassword_tSendMail_4 = context.Email_password; 
				
				
				return new javax.mail.PasswordAuthentication(context.Email_username, decryptedPassword_tSendMail_4); 
				}         
			});   
		
		
		javax.mail.Message msg_tSendMail_4 = new javax.mail.internet.MimeMessage(session_tSendMail_4);
		msg_tSendMail_4.setFrom(new javax.mail.internet.InternetAddress(from_tSendMail_4, null));
		msg_tSendMail_4.setRecipients(javax.mail.Message.RecipientType.TO,javax.mail.internet.InternetAddress.parse(to_tSendMail_4, false));
		if (cc_tSendMail_4 != null) msg_tSendMail_4.setRecipients(javax.mail.Message.RecipientType.CC, javax.mail.internet.InternetAddress.parse(cc_tSendMail_4, false));
		if (bcc_tSendMail_4 != null) msg_tSendMail_4.setRecipients(javax.mail.Message.RecipientType.BCC, javax.mail.internet.InternetAddress.parse(bcc_tSendMail_4, false));
		msg_tSendMail_4.setSubject(subject_tSendMail_4);

		for (int i_tSendMail_4 = 0; i_tSendMail_4 < headers_tSendMail_4.size(); i_tSendMail_4++) {
			java.util.Map<String, String> header_tSendMail_4 = headers_tSendMail_4.get(i_tSendMail_4);
			msg_tSendMail_4.setHeader(header_tSendMail_4.get("KEY"), header_tSendMail_4.get("VALUE"));    
		}  
		msg_tSendMail_4.setSentDate(new Date());
		msg_tSendMail_4.setHeader("X-Priority", "1"); //High->1 Normal->3 Low->5
		javax.mail.Multipart mp_tSendMail_4 = new javax.mail.internet.MimeMultipart();
		javax.mail.internet.MimeBodyPart mbpText_tSendMail_4 = new javax.mail.internet.MimeBodyPart();
		mbpText_tSendMail_4.setText(message_tSendMail_4,"ISO-8859-15", "plain");
		mp_tSendMail_4.addBodyPart(mbpText_tSendMail_4);
  
		javax.mail.internet.MimeBodyPart mbpFile_tSendMail_4 = null;

		for (int i_tSendMail_4 = 0; i_tSendMail_4 < attachments_tSendMail_4.size(); i_tSendMail_4++){
			String filename_tSendMail_4 = attachments_tSendMail_4.get(i_tSendMail_4);
			javax.activation.FileDataSource fds_tSendMail_4 = null;
			java.io.File file_tSendMail_4 = new java.io.File(filename_tSendMail_4);
			
				if (!file_tSendMail_4.exists()){
					continue;
				}
			
    		if (file_tSendMail_4.isDirectory()){
				java.io.File[] subFiles_tSendMail_4 = file_tSendMail_4.listFiles();
				for(java.io.File subFile_tSendMail_4 : subFiles_tSendMail_4){
					if (subFile_tSendMail_4.isFile()){
						fds_tSendMail_4 = new javax.activation.FileDataSource(subFile_tSendMail_4.getAbsolutePath());
						mbpFile_tSendMail_4 = new javax.mail.internet.MimeBodyPart();
						mbpFile_tSendMail_4.setDataHandler(new javax.activation.DataHandler(fds_tSendMail_4));
						mbpFile_tSendMail_4.setFileName(javax.mail.internet.MimeUtility.encodeText(fds_tSendMail_4.getName()));
						if(contentTransferEncoding_tSendMail_4.get(i_tSendMail_4).equalsIgnoreCase("base64")){
							mbpFile_tSendMail_4.setHeader("Content-Transfer-Encoding", "base64");
						}
						mp_tSendMail_4.addBodyPart(mbpFile_tSendMail_4);
					}
				}
    		}else{
				mbpFile_tSendMail_4 = new javax.mail.internet.MimeBodyPart();
				fds_tSendMail_4 = new javax.activation.FileDataSource(filename_tSendMail_4);
				mbpFile_tSendMail_4.setDataHandler(new javax.activation.DataHandler(fds_tSendMail_4)); 
				mbpFile_tSendMail_4.setFileName(javax.mail.internet.MimeUtility.encodeText(fds_tSendMail_4.getName()));
				if(contentTransferEncoding_tSendMail_4.get(i_tSendMail_4).equalsIgnoreCase("base64")){
					mbpFile_tSendMail_4.setHeader("Content-Transfer-Encoding", "base64");
				}
				mp_tSendMail_4.addBodyPart(mbpFile_tSendMail_4);
			}
		}
		// -- set the content --
		msg_tSendMail_4.setContent(mp_tSendMail_4);
		// add handlers for main MIME types
		javax.activation.MailcapCommandMap mc_tSendMail_4 = ( javax.activation.MailcapCommandMap)javax.activation.CommandMap.getDefaultCommandMap();
		mc_tSendMail_4.addMailcap("text/html;; x-java-content-handler=com.sun.mail.handlers.text_html");
		mc_tSendMail_4.addMailcap("text/xml;; x-java-content-handler=com.sun.mail.handlers.text_xml");
		mc_tSendMail_4.addMailcap("text/plain;; x-java-content-handler=com.sun.mail.handlers.text_plain");
		mc_tSendMail_4.addMailcap("multipart/*;; x-java-content-handler=com.sun.mail.handlers.multipart_mixed");
		mc_tSendMail_4.addMailcap("message/rfc822;; x-java-content-handler=com.sun.mail.handlers.message_rfc822");
		javax.activation.CommandMap.setDefaultCommandMap(mc_tSendMail_4);
		// -- Send the message --
		javax.mail.Transport.send(msg_tSendMail_4);
	} catch(java.lang.Exception e){
  		
			throw(e);
		
	}finally{
		props_tSendMail_4.remove("mail.smtp.host");
		props_tSendMail_4.remove("mail.smtp.port");
		
		props_tSendMail_4.remove("mail.mime.encodefilename");
		  
			props_tSendMail_4.remove("mail.smtp.socketFactory.class");
			props_tSendMail_4.remove("mail.smtp.socketFactory.fallback");
			props_tSendMail_4.remove("mail.smtp.socketFactory.port");
		
		props_tSendMail_4.remove("mail.smtp.auth");     
	}

 


	tos_count_tSendMail_4++;

/**
 * [tSendMail_4 main ] stop
 */
	
	/**
	 * [tSendMail_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSendMail_4";

	

 



/**
 * [tSendMail_4 process_data_begin ] stop
 */
	
	/**
	 * [tSendMail_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tSendMail_4";

	

 



/**
 * [tSendMail_4 process_data_end ] stop
 */
	
	/**
	 * [tSendMail_4 end ] start
	 */

	

	
	
	currentComponent="tSendMail_4";

	

 

ok_Hash.put("tSendMail_4", true);
end_Hash.put("tSendMail_4", System.currentTimeMillis());




/**
 * [tSendMail_4 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tSendMail_4 finally ] start
	 */

	

	
	
	currentComponent="tSendMail_4";

	

 



/**
 * [tSendMail_4 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tSendMail_4_SUBPROCESS_STATE", 1);
	}
	


public static class row34Struct implements routines.system.IPersistableRow<row34Struct> {
    final static byte[] commonByteArrayLock_IMPORTINGEVMDATA_ImportingEVM = new byte[0];
    static byte[] commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[0];

	
			    public Integer UserID;

				public Integer getUserID () {
					return this.UserID;
				}
				
			    public boolean Enabled;

				public boolean getEnabled () {
					return this.Enabled;
				}
				
			    public Object UserUniqueID;

				public Object getUserUniqueID () {
					return this.UserUniqueID;
				}
				
			    public int RoleID;

				public int getRoleID () {
					return this.RoleID;
				}
				
			    public boolean MustChangePassword;

				public boolean getMustChangePassword () {
					return this.MustChangePassword;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IMPORTINGEVMDATA_ImportingEVM) {

        	try {

        		int length = 0;
		
						this.UserID = readInteger(dis);
					
			        this.Enabled = dis.readBoolean();
					
						this.UserUniqueID = (Object) dis.readObject();
					
			        this.RoleID = dis.readInt();
					
			        this.MustChangePassword = dis.readBoolean();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.UserID,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.Enabled);
					
					// Object
				
       			    	dos.writeObject(this.UserUniqueID);
					
					// int
				
		            	dos.writeInt(this.RoleID);
					
					// boolean
				
		            	dos.writeBoolean(this.MustChangePassword);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("UserID="+String.valueOf(UserID));
		sb.append(",Enabled="+String.valueOf(Enabled));
		sb.append(",UserUniqueID="+String.valueOf(UserUniqueID));
		sb.append(",RoleID="+String.valueOf(RoleID));
		sb.append(",MustChangePassword="+String.valueOf(MustChangePassword));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row34Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row32Struct implements routines.system.IPersistableRow<row32Struct> {
    final static byte[] commonByteArrayLock_IMPORTINGEVMDATA_ImportingEVM = new byte[0];
    static byte[] commonByteArray_IMPORTINGEVMDATA_ImportingEVM = new byte[0];

	
			    public Integer UserID;

				public Integer getUserID () {
					return this.UserID;
				}
				
			    public boolean Enabled;

				public boolean getEnabled () {
					return this.Enabled;
				}
				
			    public Object UserUniqueID;

				public Object getUserUniqueID () {
					return this.UserUniqueID;
				}
				
			    public int RoleID;

				public int getRoleID () {
					return this.RoleID;
				}
				
			    public boolean MustChangePassword;

				public boolean getMustChangePassword () {
					return this.MustChangePassword;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_IMPORTINGEVMDATA_ImportingEVM) {

        	try {

        		int length = 0;
		
						this.UserID = readInteger(dis);
					
			        this.Enabled = dis.readBoolean();
					
						this.UserUniqueID = (Object) dis.readObject();
					
			        this.RoleID = dis.readInt();
					
			        this.MustChangePassword = dis.readBoolean();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.UserID,dos);
					
					// boolean
				
		            	dos.writeBoolean(this.Enabled);
					
					// Object
				
       			    	dos.writeObject(this.UserUniqueID);
					
					// int
				
		            	dos.writeInt(this.RoleID);
					
					// boolean
				
		            	dos.writeBoolean(this.MustChangePassword);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("UserID="+String.valueOf(UserID));
		sb.append(",Enabled="+String.valueOf(Enabled));
		sb.append(",UserUniqueID="+String.valueOf(UserUniqueID));
		sb.append(",RoleID="+String.valueOf(RoleID));
		sb.append(",MustChangePassword="+String.valueOf(MustChangePassword));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row32Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row32Struct row32 = new row32Struct();
row32Struct row34 = row32;





	
	/**
	 * [tAdvancedHash_row34 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row34", false);
		start_Hash.put("tAdvancedHash_row34", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row34";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("row34"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tAdvancedHash_row34 = 0;
		

			   		// connection name:row34
			   		// source node:tLogRow_23 - inputs:(row32) outputs:(row34,row34) | target node:tAdvancedHash_row34 - inputs:(row34) outputs:()
			   		// linked node: tMap_5 - inputs:(row33,row34) outputs:(AddModeratorUser)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row34 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_ROWS;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row34Struct> tHash_Lookup_row34 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row34Struct>getLookup(matchingModeEnum_row34);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row34", tHash_Lookup_row34);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row34 begin ] stop
 */



	
	/**
	 * [tLogRow_23 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_23", false);
		start_Hash.put("tLogRow_23", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_23";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						
						if(execStat) {
							runStat.updateStatOnConnection("row32"+iterateId, 0, 0);
						}
						
						
						
					
				}
			} 

		
		int tos_count_tLogRow_23 = 0;
		

	///////////////////////
	
         class Util_tLogRow_23 {

        String[] des_top = { ".", ".", "-", "+" };

        String[] des_head = { "|=", "=|", "-", "+" };

        String[] des_bottom = { "'", "'", "-", "+" };

        String name="";

        java.util.List<String[]> list = new java.util.ArrayList<String[]>();

        int[] colLengths = new int[5];

        public void addRow(String[] row) {

            for (int i = 0; i < 5; i++) {
                if (row[i]!=null) {
                  colLengths[i] = Math.max(colLengths[i], row[i].length());
                }
            }
            list.add(row);
        }

        public void setTableName(String name) {

            this.name = name;
        }

            public StringBuilder format() {
            
                StringBuilder sb = new StringBuilder();
  
            
                    sb.append(print(des_top));
    
                    int totals = 0;
                    for (int i = 0; i < colLengths.length; i++) {
                        totals = totals + colLengths[i];
                    }
    
                    // name
                    sb.append("|");
                    int k = 0;
                    for (k = 0; k < (totals + 4 - name.length()) / 2; k++) {
                        sb.append(' ');
                    }
                    sb.append(name);
                    for (int i = 0; i < totals + 4 - name.length() - k; i++) {
                        sb.append(' ');
                    }
                    sb.append("|\n");

                    // head and rows
                    sb.append(print(des_head));
                    for (int i = 0; i < list.size(); i++) {
    
                        String[] row = list.get(i);
    
                        java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());
                        
                        StringBuilder sbformat = new StringBuilder();                                             
        			        sbformat.append("|%1$-");
        			        sbformat.append(colLengths[0]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%2$-");
        			        sbformat.append(colLengths[1]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%3$-");
        			        sbformat.append(colLengths[2]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%4$-");
        			        sbformat.append(colLengths[3]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%5$-");
        			        sbformat.append(colLengths[4]);
        			        sbformat.append("s");
        			                      
                        sbformat.append("|\n");                    
       
                        formatter.format(sbformat.toString(), (Object[])row);	
                                
                        sb.append(formatter.toString());
                        if (i == 0)
                            sb.append(print(des_head)); // print the head
                    }
    
                    // end
                    sb.append(print(des_bottom));
                    return sb;
                }
            

            private StringBuilder print(String[] fillChars) {
                StringBuilder sb = new StringBuilder();
                //first column
                sb.append(fillChars[0]);                
                    for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);	                

                    for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                
                    //last column
                    for (int i = 0; i < colLengths[4] - fillChars[1].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }         
                sb.append(fillChars[1]);
                sb.append("\n");               
                return sb;
            }
            
            public boolean isTableEmpty(){
            	if (list.size() > 1)
            		return false;
            	return true;
            }
        }
        Util_tLogRow_23 util_tLogRow_23 = new Util_tLogRow_23();
        util_tLogRow_23.setTableName("UserIDLog");
        util_tLogRow_23.addRow(new String[]{"UserID","Enabled","UserUniqueID","RoleID","MustChangePassword",});        
 		StringBuilder strBuffer_tLogRow_23 = null;
		int nb_line_tLogRow_23 = 0;
///////////////////////    			



 



/**
 * [tLogRow_23 begin ] stop
 */



	
	/**
	 * [tDBInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_5", false);
		start_Hash.put("tDBInput_5", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_5";

	
		int tos_count_tDBInput_5 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_5 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_5 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_5  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_5, talendToDBArray_tDBInput_5); 
		    int nb_line_tDBInput_5 = 0;
		    java.sql.Connection conn_tDBInput_5 = null;
		        conn_tDBInput_5 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
			String dbschema_tDBInput_5 = (String)globalMap.get("dbschema_tDBConnection_1");
		    
			java.sql.Statement stmt_tDBInput_5 = conn_tDBInput_5.createStatement();

		    String dbquery_tDBInput_5 = "SELECT MAX(UserID) as UserID, 1 as Enabled,\nNEWID() as UserUniqueID, 2 as RoleID, 0 as MustChangePassword FROM	\"User"
+"\"";
			

            	globalMap.put("tDBInput_5_QUERY",dbquery_tDBInput_5);
		    java.sql.ResultSet rs_tDBInput_5 = null;

		    try {
		    	rs_tDBInput_5 = stmt_tDBInput_5.executeQuery(dbquery_tDBInput_5);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_5 = rs_tDBInput_5.getMetaData();
		    	int colQtyInRs_tDBInput_5 = rsmd_tDBInput_5.getColumnCount();

		    String tmpContent_tDBInput_5 = null;
		    
		    
		    while (rs_tDBInput_5.next()) {
		        nb_line_tDBInput_5++;
		        
							if(colQtyInRs_tDBInput_5 < 1) {
								row32.UserID = null;
							} else {
		                          
            row32.UserID = rs_tDBInput_5.getInt(1);
            if(rs_tDBInput_5.wasNull()){
                    row32.UserID = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 2) {
								row32.Enabled = false;
							} else {
	                         		
            row32.Enabled = rs_tDBInput_5.getBoolean(2);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 3) {
								row32.UserUniqueID = null;
							} else {
		                          
            row32.UserUniqueID = rs_tDBInput_5.getObject(3);
            if(rs_tDBInput_5.wasNull()){
                    row32.UserUniqueID = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 4) {
								row32.RoleID = 0;
							} else {
		                          
            row32.RoleID = rs_tDBInput_5.getInt(4);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 5) {
								row32.MustChangePassword = false;
							} else {
	                         		
            row32.MustChangePassword = rs_tDBInput_5.getBoolean(5);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
					





 



/**
 * [tDBInput_5 begin ] stop
 */
	
	/**
	 * [tDBInput_5 main ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 


	tos_count_tDBInput_5++;

/**
 * [tDBInput_5 main ] stop
 */
	
	/**
	 * [tDBInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tLogRow_23 main ] start
	 */

	

	
	
	currentComponent="tLogRow_23";

	

			//row32
			//row32


			
				
				if(execStat){
					runStat.updateStatOnConnection("row32"+iterateId,1, 1);
				}
				
				
				
			

		
///////////////////////		
						

				
				String[] row_tLogRow_23 = new String[5];
   				
	    		if(row32.UserID != null) { //              
                 row_tLogRow_23[0]=    						    
				                String.valueOf(row32.UserID)			
					          ;	
							
	    		} //			
    			              
                 row_tLogRow_23[1]=    						    
				                String.valueOf(row32.Enabled)			
					          ;	
										
    			   				
	    		if(row32.UserUniqueID != null) { //              
                 row_tLogRow_23[2]=    						    
				                String.valueOf(row32.UserUniqueID)			
					          ;	
							
	    		} //			
    			              
                 row_tLogRow_23[3]=    						    
				                String.valueOf(row32.RoleID)			
					          ;	
										
    			              
                 row_tLogRow_23[4]=    						    
				                String.valueOf(row32.MustChangePassword)			
					          ;	
										
    			 

				util_tLogRow_23.addRow(row_tLogRow_23);	
				nb_line_tLogRow_23++;
//////

//////                    
                    
///////////////////////    			

 
     row34 = row32;


	tos_count_tLogRow_23++;

/**
 * [tLogRow_23 main ] stop
 */
	
	/**
	 * [tLogRow_23 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_23";

	

 



/**
 * [tLogRow_23 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row34 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row34";

	

			//row34
			//row34


			
				
				if(execStat){
					runStat.updateStatOnConnection("row34"+iterateId,1, 1);
				}
				
				
				
			

		


			   
			   

					row34Struct row34_HashRow = new row34Struct();
		   	   	   
				
				row34_HashRow.UserID = row34.UserID;
				
				row34_HashRow.Enabled = row34.Enabled;
				
				row34_HashRow.UserUniqueID = row34.UserUniqueID;
				
				row34_HashRow.RoleID = row34.RoleID;
				
				row34_HashRow.MustChangePassword = row34.MustChangePassword;
				
			tHash_Lookup_row34.put(row34_HashRow);
			
            




 


	tos_count_tAdvancedHash_row34++;

/**
 * [tAdvancedHash_row34 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row34 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row34";

	

 



/**
 * [tAdvancedHash_row34 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row34 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row34";

	

 



/**
 * [tAdvancedHash_row34 process_data_end ] stop
 */



	
	/**
	 * [tLogRow_23 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_23";

	

 



/**
 * [tLogRow_23 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_5 end ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

	}
}finally{
	if (rs_tDBInput_5 != null) {
		rs_tDBInput_5.close();
	}
	if (stmt_tDBInput_5 != null) {
		stmt_tDBInput_5.close();
	}
}
globalMap.put("tDBInput_5_NB_LINE",nb_line_tDBInput_5);

 

ok_Hash.put("tDBInput_5", true);
end_Hash.put("tDBInput_5", System.currentTimeMillis());




/**
 * [tDBInput_5 end ] stop
 */

	
	/**
	 * [tLogRow_23 end ] start
	 */

	

	
	
	currentComponent="tLogRow_23";

	


//////

                    
                    java.io.PrintStream consoleOut_tLogRow_23 = null;
                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_23 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_23 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_23);
                    }
                    
                    consoleOut_tLogRow_23.println(util_tLogRow_23.format().toString());
                    consoleOut_tLogRow_23.flush();
//////
globalMap.put("tLogRow_23_NB_LINE",nb_line_tLogRow_23);

///////////////////////    			

			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("row32"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tLogRow_23", true);
end_Hash.put("tLogRow_23", System.currentTimeMillis());




/**
 * [tLogRow_23 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row34 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row34";

	

tHash_Lookup_row34.endPut();

			
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
	 				runStat.updateStatOnConnection("row34"+iterateId,2, 0);
			 	}
			}
			
			
			
		
 

ok_Hash.put("tAdvancedHash_row34", true);
end_Hash.put("tAdvancedHash_row34", System.currentTimeMillis());




/**
 * [tAdvancedHash_row34 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_5 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 finally ] stop
 */

	
	/**
	 * [tLogRow_23 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_23";

	

 



/**
 * [tLogRow_23 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row34 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row34";

	

 



/**
 * [tAdvancedHash_row34 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Production";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final ImportingEVM ImportingEVMClass = new ImportingEVM();

        int exitCode = ImportingEVMClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = ImportingEVM.class.getClassLoader().getResourceAsStream("importingevmdata/importingevm_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = ImportingEVM.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                }
                
                inContext.close();
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("Email_from", "id_String");
                            context.Email_from=(String) context.getProperty("Email_from");
                        context.setContextType("Email_host", "id_String");
                            context.Email_host=(String) context.getProperty("Email_host");
                        context.setContextType("Email_password", "id_String");
                            context.Email_password=(String) context.getProperty("Email_password");
                        context.setContextType("Email_port", "id_String");
                            context.Email_port=(String) context.getProperty("Email_port");
                        context.setContextType("Email_to", "id_String");
                            context.Email_to=(String) context.getProperty("Email_to");
                        context.setContextType("Email_username", "id_String");
                            context.Email_username=(String) context.getProperty("Email_username");
                        context.setContextType("DB_Host", "id_String");
                            context.DB_Host=(String) context.getProperty("DB_Host");
                        context.setContextType("DB_Name", "id_String");
                            context.DB_Name=(String) context.getProperty("DB_Name");
                        context.setContextType("DB_Password", "id_String");
                            context.DB_Password=(String) context.getProperty("DB_Password");
                        context.setContextType("DB_Port", "id_String");
                            context.DB_Port=(String) context.getProperty("DB_Port");
                        context.setContextType("DB_Username", "id_String");
                            context.DB_Username=(String) context.getProperty("DB_Username");
                        context.setContextType("Customer_File", "id_String");
                            context.Customer_File=(String) context.getProperty("Customer_File");
                        context.setContextType("Moderator_File", "id_String");
                            context.Moderator_File=(String) context.getProperty("Moderator_File");
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("Email_from")) {
                context.Email_from = (String) parentContextMap.get("Email_from");
            }if (parentContextMap.containsKey("Email_host")) {
                context.Email_host = (String) parentContextMap.get("Email_host");
            }if (parentContextMap.containsKey("Email_password")) {
                context.Email_password = (String) parentContextMap.get("Email_password");
            }if (parentContextMap.containsKey("Email_port")) {
                context.Email_port = (String) parentContextMap.get("Email_port");
            }if (parentContextMap.containsKey("Email_to")) {
                context.Email_to = (String) parentContextMap.get("Email_to");
            }if (parentContextMap.containsKey("Email_username")) {
                context.Email_username = (String) parentContextMap.get("Email_username");
            }if (parentContextMap.containsKey("DB_Host")) {
                context.DB_Host = (String) parentContextMap.get("DB_Host");
            }if (parentContextMap.containsKey("DB_Name")) {
                context.DB_Name = (String) parentContextMap.get("DB_Name");
            }if (parentContextMap.containsKey("DB_Password")) {
                context.DB_Password = (String) parentContextMap.get("DB_Password");
            }if (parentContextMap.containsKey("DB_Port")) {
                context.DB_Port = (String) parentContextMap.get("DB_Port");
            }if (parentContextMap.containsKey("DB_Username")) {
                context.DB_Username = (String) parentContextMap.get("DB_Username");
            }if (parentContextMap.containsKey("Customer_File")) {
                context.Customer_File = (String) parentContextMap.get("Customer_File");
            }if (parentContextMap.containsKey("Moderator_File")) {
                context.Moderator_File = (String) parentContextMap.get("Moderator_File");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tDBConnection_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBConnection_1) {
globalMap.put("tDBConnection_1_SUBPROCESS_STATE", -1);

e_tDBConnection_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : ImportingEVM");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tDBConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tDBConnection_1", globalMap.get("conn_tDBConnection_1"));







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring=")) {//for trunjob call
			enableLogStash = "true".equalsIgnoreCase(arg.substring(13));
		}
		
		if(!enableLogStash) {
			enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     1021267 characters generated by Talend Open Studio for Data Integration 
 *     on the April 26, 2022 7:43:10 AM ICT
 ************************************************************************************************/